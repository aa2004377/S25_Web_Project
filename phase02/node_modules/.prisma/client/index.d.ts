
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Instructor
 * 
 */
export type Instructor = $Result.DefaultSelection<Prisma.$InstructorPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>
/**
 * Model InstructorCourse
 * 
 */
export type InstructorCourse = $Result.DefaultSelection<Prisma.$InstructorCoursePayload>
/**
 * Model RegisteredStudent
 * 
 */
export type RegisteredStudent = $Result.DefaultSelection<Prisma.$RegisteredStudentPayload>
/**
 * Model CompletedCourse
 * 
 */
export type CompletedCourse = $Result.DefaultSelection<Prisma.$CompletedCoursePayload>
/**
 * Model PendingCourse
 * 
 */
export type PendingCourse = $Result.DefaultSelection<Prisma.$PendingCoursePayload>
/**
 * Model Prerequisite
 * 
 */
export type Prerequisite = $Result.DefaultSelection<Prisma.$PrerequisitePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Students
 * const students = await prisma.student.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Students
   * const students = await prisma.student.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.instructor`: Exposes CRUD operations for the **Instructor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Instructors
    * const instructors = await prisma.instructor.findMany()
    * ```
    */
  get instructor(): Prisma.InstructorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.instructorCourse`: Exposes CRUD operations for the **InstructorCourse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InstructorCourses
    * const instructorCourses = await prisma.instructorCourse.findMany()
    * ```
    */
  get instructorCourse(): Prisma.InstructorCourseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.registeredStudent`: Exposes CRUD operations for the **RegisteredStudent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RegisteredStudents
    * const registeredStudents = await prisma.registeredStudent.findMany()
    * ```
    */
  get registeredStudent(): Prisma.RegisteredStudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.completedCourse`: Exposes CRUD operations for the **CompletedCourse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompletedCourses
    * const completedCourses = await prisma.completedCourse.findMany()
    * ```
    */
  get completedCourse(): Prisma.CompletedCourseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pendingCourse`: Exposes CRUD operations for the **PendingCourse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PendingCourses
    * const pendingCourses = await prisma.pendingCourse.findMany()
    * ```
    */
  get pendingCourse(): Prisma.PendingCourseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.prerequisite`: Exposes CRUD operations for the **Prerequisite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Prerequisites
    * const prerequisites = await prisma.prerequisite.findMany()
    * ```
    */
  get prerequisite(): Prisma.PrerequisiteDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Student: 'Student',
    Instructor: 'Instructor',
    Admin: 'Admin',
    Course: 'Course',
    InstructorCourse: 'InstructorCourse',
    RegisteredStudent: 'RegisteredStudent',
    CompletedCourse: 'CompletedCourse',
    PendingCourse: 'PendingCourse',
    Prerequisite: 'Prerequisite'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "student" | "instructor" | "admin" | "course" | "instructorCourse" | "registeredStudent" | "completedCourse" | "pendingCourse" | "prerequisite"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Instructor: {
        payload: Prisma.$InstructorPayload<ExtArgs>
        fields: Prisma.InstructorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InstructorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InstructorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload>
          }
          findFirst: {
            args: Prisma.InstructorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InstructorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload>
          }
          findMany: {
            args: Prisma.InstructorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload>[]
          }
          create: {
            args: Prisma.InstructorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload>
          }
          createMany: {
            args: Prisma.InstructorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InstructorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload>[]
          }
          delete: {
            args: Prisma.InstructorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload>
          }
          update: {
            args: Prisma.InstructorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload>
          }
          deleteMany: {
            args: Prisma.InstructorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InstructorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InstructorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload>[]
          }
          upsert: {
            args: Prisma.InstructorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload>
          }
          aggregate: {
            args: Prisma.InstructorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInstructor>
          }
          groupBy: {
            args: Prisma.InstructorGroupByArgs<ExtArgs>
            result: $Utils.Optional<InstructorGroupByOutputType>[]
          }
          count: {
            args: Prisma.InstructorCountArgs<ExtArgs>
            result: $Utils.Optional<InstructorCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      InstructorCourse: {
        payload: Prisma.$InstructorCoursePayload<ExtArgs>
        fields: Prisma.InstructorCourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InstructorCourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorCoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InstructorCourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorCoursePayload>
          }
          findFirst: {
            args: Prisma.InstructorCourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorCoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InstructorCourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorCoursePayload>
          }
          findMany: {
            args: Prisma.InstructorCourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorCoursePayload>[]
          }
          create: {
            args: Prisma.InstructorCourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorCoursePayload>
          }
          createMany: {
            args: Prisma.InstructorCourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InstructorCourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorCoursePayload>[]
          }
          delete: {
            args: Prisma.InstructorCourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorCoursePayload>
          }
          update: {
            args: Prisma.InstructorCourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorCoursePayload>
          }
          deleteMany: {
            args: Prisma.InstructorCourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InstructorCourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InstructorCourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorCoursePayload>[]
          }
          upsert: {
            args: Prisma.InstructorCourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorCoursePayload>
          }
          aggregate: {
            args: Prisma.InstructorCourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInstructorCourse>
          }
          groupBy: {
            args: Prisma.InstructorCourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<InstructorCourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.InstructorCourseCountArgs<ExtArgs>
            result: $Utils.Optional<InstructorCourseCountAggregateOutputType> | number
          }
        }
      }
      RegisteredStudent: {
        payload: Prisma.$RegisteredStudentPayload<ExtArgs>
        fields: Prisma.RegisteredStudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegisteredStudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredStudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegisteredStudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredStudentPayload>
          }
          findFirst: {
            args: Prisma.RegisteredStudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredStudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegisteredStudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredStudentPayload>
          }
          findMany: {
            args: Prisma.RegisteredStudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredStudentPayload>[]
          }
          create: {
            args: Prisma.RegisteredStudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredStudentPayload>
          }
          createMany: {
            args: Prisma.RegisteredStudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegisteredStudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredStudentPayload>[]
          }
          delete: {
            args: Prisma.RegisteredStudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredStudentPayload>
          }
          update: {
            args: Prisma.RegisteredStudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredStudentPayload>
          }
          deleteMany: {
            args: Prisma.RegisteredStudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegisteredStudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RegisteredStudentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredStudentPayload>[]
          }
          upsert: {
            args: Prisma.RegisteredStudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegisteredStudentPayload>
          }
          aggregate: {
            args: Prisma.RegisteredStudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegisteredStudent>
          }
          groupBy: {
            args: Prisma.RegisteredStudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegisteredStudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegisteredStudentCountArgs<ExtArgs>
            result: $Utils.Optional<RegisteredStudentCountAggregateOutputType> | number
          }
        }
      }
      CompletedCourse: {
        payload: Prisma.$CompletedCoursePayload<ExtArgs>
        fields: Prisma.CompletedCourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompletedCourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompletedCourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload>
          }
          findFirst: {
            args: Prisma.CompletedCourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompletedCourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload>
          }
          findMany: {
            args: Prisma.CompletedCourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload>[]
          }
          create: {
            args: Prisma.CompletedCourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload>
          }
          createMany: {
            args: Prisma.CompletedCourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompletedCourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload>[]
          }
          delete: {
            args: Prisma.CompletedCourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload>
          }
          update: {
            args: Prisma.CompletedCourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload>
          }
          deleteMany: {
            args: Prisma.CompletedCourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompletedCourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompletedCourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload>[]
          }
          upsert: {
            args: Prisma.CompletedCourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompletedCoursePayload>
          }
          aggregate: {
            args: Prisma.CompletedCourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompletedCourse>
          }
          groupBy: {
            args: Prisma.CompletedCourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompletedCourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompletedCourseCountArgs<ExtArgs>
            result: $Utils.Optional<CompletedCourseCountAggregateOutputType> | number
          }
        }
      }
      PendingCourse: {
        payload: Prisma.$PendingCoursePayload<ExtArgs>
        fields: Prisma.PendingCourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PendingCourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PendingCourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload>
          }
          findFirst: {
            args: Prisma.PendingCourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PendingCourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload>
          }
          findMany: {
            args: Prisma.PendingCourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload>[]
          }
          create: {
            args: Prisma.PendingCourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload>
          }
          createMany: {
            args: Prisma.PendingCourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PendingCourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload>[]
          }
          delete: {
            args: Prisma.PendingCourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload>
          }
          update: {
            args: Prisma.PendingCourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload>
          }
          deleteMany: {
            args: Prisma.PendingCourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PendingCourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PendingCourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload>[]
          }
          upsert: {
            args: Prisma.PendingCourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PendingCoursePayload>
          }
          aggregate: {
            args: Prisma.PendingCourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePendingCourse>
          }
          groupBy: {
            args: Prisma.PendingCourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<PendingCourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.PendingCourseCountArgs<ExtArgs>
            result: $Utils.Optional<PendingCourseCountAggregateOutputType> | number
          }
        }
      }
      Prerequisite: {
        payload: Prisma.$PrerequisitePayload<ExtArgs>
        fields: Prisma.PrerequisiteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrerequisiteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrerequisitePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrerequisiteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrerequisitePayload>
          }
          findFirst: {
            args: Prisma.PrerequisiteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrerequisitePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrerequisiteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrerequisitePayload>
          }
          findMany: {
            args: Prisma.PrerequisiteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrerequisitePayload>[]
          }
          create: {
            args: Prisma.PrerequisiteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrerequisitePayload>
          }
          createMany: {
            args: Prisma.PrerequisiteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PrerequisiteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrerequisitePayload>[]
          }
          delete: {
            args: Prisma.PrerequisiteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrerequisitePayload>
          }
          update: {
            args: Prisma.PrerequisiteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrerequisitePayload>
          }
          deleteMany: {
            args: Prisma.PrerequisiteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PrerequisiteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PrerequisiteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrerequisitePayload>[]
          }
          upsert: {
            args: Prisma.PrerequisiteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrerequisitePayload>
          }
          aggregate: {
            args: Prisma.PrerequisiteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrerequisite>
          }
          groupBy: {
            args: Prisma.PrerequisiteGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrerequisiteGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrerequisiteCountArgs<ExtArgs>
            result: $Utils.Optional<PrerequisiteCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    student?: StudentOmit
    instructor?: InstructorOmit
    admin?: AdminOmit
    course?: CourseOmit
    instructorCourse?: InstructorCourseOmit
    registeredStudent?: RegisteredStudentOmit
    completedCourse?: CompletedCourseOmit
    pendingCourse?: PendingCourseOmit
    prerequisite?: PrerequisiteOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    completedCourses: number
    pendingCourses: number
    registeredCourses: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    completedCourses?: boolean | StudentCountOutputTypeCountCompletedCoursesArgs
    pendingCourses?: boolean | StudentCountOutputTypeCountPendingCoursesArgs
    registeredCourses?: boolean | StudentCountOutputTypeCountRegisteredCoursesArgs
  }

  // Custom InputTypes
  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountCompletedCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompletedCourseWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountPendingCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PendingCourseWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountRegisteredCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegisteredStudentWhereInput
  }


  /**
   * Count Type InstructorCountOutputType
   */

  export type InstructorCountOutputType = {
    courses: number
    pendingApprovals: number
  }

  export type InstructorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | InstructorCountOutputTypeCountCoursesArgs
    pendingApprovals?: boolean | InstructorCountOutputTypeCountPendingApprovalsArgs
  }

  // Custom InputTypes
  /**
   * InstructorCountOutputType without action
   */
  export type InstructorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstructorCountOutputType
     */
    select?: InstructorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InstructorCountOutputType without action
   */
  export type InstructorCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstructorCourseWhereInput
  }

  /**
   * InstructorCountOutputType without action
   */
  export type InstructorCountOutputTypeCountPendingApprovalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PendingCourseWhereInput
  }


  /**
   * Count Type CourseCountOutputType
   */

  export type CourseCountOutputType = {
    prerequisites: number
    requiredBy: number
    instructorCourses: number
    completedCourses: number
    pendingCourses: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prerequisites?: boolean | CourseCountOutputTypeCountPrerequisitesArgs
    requiredBy?: boolean | CourseCountOutputTypeCountRequiredByArgs
    instructorCourses?: boolean | CourseCountOutputTypeCountInstructorCoursesArgs
    completedCourses?: boolean | CourseCountOutputTypeCountCompletedCoursesArgs
    pendingCourses?: boolean | CourseCountOutputTypeCountPendingCoursesArgs
  }

  // Custom InputTypes
  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountPrerequisitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrerequisiteWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountRequiredByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrerequisiteWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountInstructorCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstructorCourseWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountCompletedCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompletedCourseWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountPendingCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PendingCourseWhereInput
  }


  /**
   * Count Type InstructorCourseCountOutputType
   */

  export type InstructorCourseCountOutputType = {
    registeredStudents: number
  }

  export type InstructorCourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registeredStudents?: boolean | InstructorCourseCountOutputTypeCountRegisteredStudentsArgs
  }

  // Custom InputTypes
  /**
   * InstructorCourseCountOutputType without action
   */
  export type InstructorCourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstructorCourseCountOutputType
     */
    select?: InstructorCourseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InstructorCourseCountOutputType without action
   */
  export type InstructorCourseCountOutputTypeCountRegisteredStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegisteredStudentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
  }

  export type StudentMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    username: number
    password: number
    _all: number
  }


  export type StudentMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: string
    username: string
    password: string
    _count: StudentCountAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    completedCourses?: boolean | Student$completedCoursesArgs<ExtArgs>
    pendingCourses?: boolean | Student$pendingCoursesArgs<ExtArgs>
    registeredCourses?: boolean | Student$registeredCoursesArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["student"]>

  export type StudentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
  }

  export type StudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password", ExtArgs["result"]["student"]>
  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    completedCourses?: boolean | Student$completedCoursesArgs<ExtArgs>
    pendingCourses?: boolean | Student$pendingCoursesArgs<ExtArgs>
    registeredCourses?: boolean | Student$registeredCoursesArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StudentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      completedCourses: Prisma.$CompletedCoursePayload<ExtArgs>[]
      pendingCourses: Prisma.$PendingCoursePayload<ExtArgs>[]
      registeredCourses: Prisma.$RegisteredStudentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      password: string
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Students and returns the data saved in the database.
     * @param {StudentCreateManyAndReturnArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Students and only return the `id`
     * const studentWithIdOnly = await prisma.student.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students and returns the data updated in the database.
     * @param {StudentUpdateManyAndReturnArgs} args - Arguments to update many Students.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Students and only return the `id`
     * const studentWithIdOnly = await prisma.student.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    completedCourses<T extends Student$completedCoursesArgs<ExtArgs> = {}>(args?: Subset<T, Student$completedCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pendingCourses<T extends Student$pendingCoursesArgs<ExtArgs> = {}>(args?: Subset<T, Student$pendingCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    registeredCourses<T extends Student$registeredCoursesArgs<ExtArgs> = {}>(args?: Subset<T, Student$registeredCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegisteredStudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */
  interface StudentFieldRefs {
    readonly id: FieldRef<"Student", 'String'>
    readonly username: FieldRef<"Student", 'String'>
    readonly password: FieldRef<"Student", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
  }

  /**
   * Student createManyAndReturn
   */
  export type StudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student updateManyAndReturn
   */
  export type StudentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to delete.
     */
    limit?: number
  }

  /**
   * Student.completedCourses
   */
  export type Student$completedCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    where?: CompletedCourseWhereInput
    orderBy?: CompletedCourseOrderByWithRelationInput | CompletedCourseOrderByWithRelationInput[]
    cursor?: CompletedCourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompletedCourseScalarFieldEnum | CompletedCourseScalarFieldEnum[]
  }

  /**
   * Student.pendingCourses
   */
  export type Student$pendingCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    where?: PendingCourseWhereInput
    orderBy?: PendingCourseOrderByWithRelationInput | PendingCourseOrderByWithRelationInput[]
    cursor?: PendingCourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PendingCourseScalarFieldEnum | PendingCourseScalarFieldEnum[]
  }

  /**
   * Student.registeredCourses
   */
  export type Student$registeredCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredStudent
     */
    select?: RegisteredStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegisteredStudent
     */
    omit?: RegisteredStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegisteredStudentInclude<ExtArgs> | null
    where?: RegisteredStudentWhereInput
    orderBy?: RegisteredStudentOrderByWithRelationInput | RegisteredStudentOrderByWithRelationInput[]
    cursor?: RegisteredStudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegisteredStudentScalarFieldEnum | RegisteredStudentScalarFieldEnum[]
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model Instructor
   */

  export type AggregateInstructor = {
    _count: InstructorCountAggregateOutputType | null
    _min: InstructorMinAggregateOutputType | null
    _max: InstructorMaxAggregateOutputType | null
  }

  export type InstructorMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
  }

  export type InstructorMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
  }

  export type InstructorCountAggregateOutputType = {
    id: number
    username: number
    password: number
    _all: number
  }


  export type InstructorMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type InstructorMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type InstructorCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    _all?: true
  }

  export type InstructorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Instructor to aggregate.
     */
    where?: InstructorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instructors to fetch.
     */
    orderBy?: InstructorOrderByWithRelationInput | InstructorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InstructorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instructors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instructors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Instructors
    **/
    _count?: true | InstructorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstructorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstructorMaxAggregateInputType
  }

  export type GetInstructorAggregateType<T extends InstructorAggregateArgs> = {
        [P in keyof T & keyof AggregateInstructor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstructor[P]>
      : GetScalarType<T[P], AggregateInstructor[P]>
  }




  export type InstructorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstructorWhereInput
    orderBy?: InstructorOrderByWithAggregationInput | InstructorOrderByWithAggregationInput[]
    by: InstructorScalarFieldEnum[] | InstructorScalarFieldEnum
    having?: InstructorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstructorCountAggregateInputType | true
    _min?: InstructorMinAggregateInputType
    _max?: InstructorMaxAggregateInputType
  }

  export type InstructorGroupByOutputType = {
    id: string
    username: string
    password: string
    _count: InstructorCountAggregateOutputType | null
    _min: InstructorMinAggregateOutputType | null
    _max: InstructorMaxAggregateOutputType | null
  }

  type GetInstructorGroupByPayload<T extends InstructorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstructorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstructorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstructorGroupByOutputType[P]>
            : GetScalarType<T[P], InstructorGroupByOutputType[P]>
        }
      >
    >


  export type InstructorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    courses?: boolean | Instructor$coursesArgs<ExtArgs>
    pendingApprovals?: boolean | Instructor$pendingApprovalsArgs<ExtArgs>
    _count?: boolean | InstructorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["instructor"]>

  export type InstructorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["instructor"]>

  export type InstructorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["instructor"]>

  export type InstructorSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
  }

  export type InstructorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password", ExtArgs["result"]["instructor"]>
  export type InstructorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | Instructor$coursesArgs<ExtArgs>
    pendingApprovals?: boolean | Instructor$pendingApprovalsArgs<ExtArgs>
    _count?: boolean | InstructorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InstructorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type InstructorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $InstructorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Instructor"
    objects: {
      courses: Prisma.$InstructorCoursePayload<ExtArgs>[]
      pendingApprovals: Prisma.$PendingCoursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      password: string
    }, ExtArgs["result"]["instructor"]>
    composites: {}
  }

  type InstructorGetPayload<S extends boolean | null | undefined | InstructorDefaultArgs> = $Result.GetResult<Prisma.$InstructorPayload, S>

  type InstructorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InstructorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InstructorCountAggregateInputType | true
    }

  export interface InstructorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Instructor'], meta: { name: 'Instructor' } }
    /**
     * Find zero or one Instructor that matches the filter.
     * @param {InstructorFindUniqueArgs} args - Arguments to find a Instructor
     * @example
     * // Get one Instructor
     * const instructor = await prisma.instructor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InstructorFindUniqueArgs>(args: SelectSubset<T, InstructorFindUniqueArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Instructor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InstructorFindUniqueOrThrowArgs} args - Arguments to find a Instructor
     * @example
     * // Get one Instructor
     * const instructor = await prisma.instructor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InstructorFindUniqueOrThrowArgs>(args: SelectSubset<T, InstructorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Instructor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorFindFirstArgs} args - Arguments to find a Instructor
     * @example
     * // Get one Instructor
     * const instructor = await prisma.instructor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InstructorFindFirstArgs>(args?: SelectSubset<T, InstructorFindFirstArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Instructor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorFindFirstOrThrowArgs} args - Arguments to find a Instructor
     * @example
     * // Get one Instructor
     * const instructor = await prisma.instructor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InstructorFindFirstOrThrowArgs>(args?: SelectSubset<T, InstructorFindFirstOrThrowArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Instructors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Instructors
     * const instructors = await prisma.instructor.findMany()
     * 
     * // Get first 10 Instructors
     * const instructors = await prisma.instructor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const instructorWithIdOnly = await prisma.instructor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InstructorFindManyArgs>(args?: SelectSubset<T, InstructorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Instructor.
     * @param {InstructorCreateArgs} args - Arguments to create a Instructor.
     * @example
     * // Create one Instructor
     * const Instructor = await prisma.instructor.create({
     *   data: {
     *     // ... data to create a Instructor
     *   }
     * })
     * 
     */
    create<T extends InstructorCreateArgs>(args: SelectSubset<T, InstructorCreateArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Instructors.
     * @param {InstructorCreateManyArgs} args - Arguments to create many Instructors.
     * @example
     * // Create many Instructors
     * const instructor = await prisma.instructor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InstructorCreateManyArgs>(args?: SelectSubset<T, InstructorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Instructors and returns the data saved in the database.
     * @param {InstructorCreateManyAndReturnArgs} args - Arguments to create many Instructors.
     * @example
     * // Create many Instructors
     * const instructor = await prisma.instructor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Instructors and only return the `id`
     * const instructorWithIdOnly = await prisma.instructor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InstructorCreateManyAndReturnArgs>(args?: SelectSubset<T, InstructorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Instructor.
     * @param {InstructorDeleteArgs} args - Arguments to delete one Instructor.
     * @example
     * // Delete one Instructor
     * const Instructor = await prisma.instructor.delete({
     *   where: {
     *     // ... filter to delete one Instructor
     *   }
     * })
     * 
     */
    delete<T extends InstructorDeleteArgs>(args: SelectSubset<T, InstructorDeleteArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Instructor.
     * @param {InstructorUpdateArgs} args - Arguments to update one Instructor.
     * @example
     * // Update one Instructor
     * const instructor = await prisma.instructor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InstructorUpdateArgs>(args: SelectSubset<T, InstructorUpdateArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Instructors.
     * @param {InstructorDeleteManyArgs} args - Arguments to filter Instructors to delete.
     * @example
     * // Delete a few Instructors
     * const { count } = await prisma.instructor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InstructorDeleteManyArgs>(args?: SelectSubset<T, InstructorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Instructors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Instructors
     * const instructor = await prisma.instructor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InstructorUpdateManyArgs>(args: SelectSubset<T, InstructorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Instructors and returns the data updated in the database.
     * @param {InstructorUpdateManyAndReturnArgs} args - Arguments to update many Instructors.
     * @example
     * // Update many Instructors
     * const instructor = await prisma.instructor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Instructors and only return the `id`
     * const instructorWithIdOnly = await prisma.instructor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InstructorUpdateManyAndReturnArgs>(args: SelectSubset<T, InstructorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Instructor.
     * @param {InstructorUpsertArgs} args - Arguments to update or create a Instructor.
     * @example
     * // Update or create a Instructor
     * const instructor = await prisma.instructor.upsert({
     *   create: {
     *     // ... data to create a Instructor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Instructor we want to update
     *   }
     * })
     */
    upsert<T extends InstructorUpsertArgs>(args: SelectSubset<T, InstructorUpsertArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Instructors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorCountArgs} args - Arguments to filter Instructors to count.
     * @example
     * // Count the number of Instructors
     * const count = await prisma.instructor.count({
     *   where: {
     *     // ... the filter for the Instructors we want to count
     *   }
     * })
    **/
    count<T extends InstructorCountArgs>(
      args?: Subset<T, InstructorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstructorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Instructor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstructorAggregateArgs>(args: Subset<T, InstructorAggregateArgs>): Prisma.PrismaPromise<GetInstructorAggregateType<T>>

    /**
     * Group by Instructor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstructorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstructorGroupByArgs['orderBy'] }
        : { orderBy?: InstructorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstructorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstructorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Instructor model
   */
  readonly fields: InstructorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Instructor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InstructorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    courses<T extends Instructor$coursesArgs<ExtArgs> = {}>(args?: Subset<T, Instructor$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstructorCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pendingApprovals<T extends Instructor$pendingApprovalsArgs<ExtArgs> = {}>(args?: Subset<T, Instructor$pendingApprovalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Instructor model
   */
  interface InstructorFieldRefs {
    readonly id: FieldRef<"Instructor", 'String'>
    readonly username: FieldRef<"Instructor", 'String'>
    readonly password: FieldRef<"Instructor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Instructor findUnique
   */
  export type InstructorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    /**
     * Filter, which Instructor to fetch.
     */
    where: InstructorWhereUniqueInput
  }

  /**
   * Instructor findUniqueOrThrow
   */
  export type InstructorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    /**
     * Filter, which Instructor to fetch.
     */
    where: InstructorWhereUniqueInput
  }

  /**
   * Instructor findFirst
   */
  export type InstructorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    /**
     * Filter, which Instructor to fetch.
     */
    where?: InstructorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instructors to fetch.
     */
    orderBy?: InstructorOrderByWithRelationInput | InstructorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Instructors.
     */
    cursor?: InstructorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instructors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instructors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Instructors.
     */
    distinct?: InstructorScalarFieldEnum | InstructorScalarFieldEnum[]
  }

  /**
   * Instructor findFirstOrThrow
   */
  export type InstructorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    /**
     * Filter, which Instructor to fetch.
     */
    where?: InstructorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instructors to fetch.
     */
    orderBy?: InstructorOrderByWithRelationInput | InstructorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Instructors.
     */
    cursor?: InstructorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instructors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instructors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Instructors.
     */
    distinct?: InstructorScalarFieldEnum | InstructorScalarFieldEnum[]
  }

  /**
   * Instructor findMany
   */
  export type InstructorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    /**
     * Filter, which Instructors to fetch.
     */
    where?: InstructorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instructors to fetch.
     */
    orderBy?: InstructorOrderByWithRelationInput | InstructorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Instructors.
     */
    cursor?: InstructorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instructors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instructors.
     */
    skip?: number
    distinct?: InstructorScalarFieldEnum | InstructorScalarFieldEnum[]
  }

  /**
   * Instructor create
   */
  export type InstructorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    /**
     * The data needed to create a Instructor.
     */
    data: XOR<InstructorCreateInput, InstructorUncheckedCreateInput>
  }

  /**
   * Instructor createMany
   */
  export type InstructorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Instructors.
     */
    data: InstructorCreateManyInput | InstructorCreateManyInput[]
  }

  /**
   * Instructor createManyAndReturn
   */
  export type InstructorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * The data used to create many Instructors.
     */
    data: InstructorCreateManyInput | InstructorCreateManyInput[]
  }

  /**
   * Instructor update
   */
  export type InstructorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    /**
     * The data needed to update a Instructor.
     */
    data: XOR<InstructorUpdateInput, InstructorUncheckedUpdateInput>
    /**
     * Choose, which Instructor to update.
     */
    where: InstructorWhereUniqueInput
  }

  /**
   * Instructor updateMany
   */
  export type InstructorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Instructors.
     */
    data: XOR<InstructorUpdateManyMutationInput, InstructorUncheckedUpdateManyInput>
    /**
     * Filter which Instructors to update
     */
    where?: InstructorWhereInput
    /**
     * Limit how many Instructors to update.
     */
    limit?: number
  }

  /**
   * Instructor updateManyAndReturn
   */
  export type InstructorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * The data used to update Instructors.
     */
    data: XOR<InstructorUpdateManyMutationInput, InstructorUncheckedUpdateManyInput>
    /**
     * Filter which Instructors to update
     */
    where?: InstructorWhereInput
    /**
     * Limit how many Instructors to update.
     */
    limit?: number
  }

  /**
   * Instructor upsert
   */
  export type InstructorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    /**
     * The filter to search for the Instructor to update in case it exists.
     */
    where: InstructorWhereUniqueInput
    /**
     * In case the Instructor found by the `where` argument doesn't exist, create a new Instructor with this data.
     */
    create: XOR<InstructorCreateInput, InstructorUncheckedCreateInput>
    /**
     * In case the Instructor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InstructorUpdateInput, InstructorUncheckedUpdateInput>
  }

  /**
   * Instructor delete
   */
  export type InstructorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    /**
     * Filter which Instructor to delete.
     */
    where: InstructorWhereUniqueInput
  }

  /**
   * Instructor deleteMany
   */
  export type InstructorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Instructors to delete
     */
    where?: InstructorWhereInput
    /**
     * Limit how many Instructors to delete.
     */
    limit?: number
  }

  /**
   * Instructor.courses
   */
  export type Instructor$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstructorCourse
     */
    select?: InstructorCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstructorCourse
     */
    omit?: InstructorCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorCourseInclude<ExtArgs> | null
    where?: InstructorCourseWhereInput
    orderBy?: InstructorCourseOrderByWithRelationInput | InstructorCourseOrderByWithRelationInput[]
    cursor?: InstructorCourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InstructorCourseScalarFieldEnum | InstructorCourseScalarFieldEnum[]
  }

  /**
   * Instructor.pendingApprovals
   */
  export type Instructor$pendingApprovalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    where?: PendingCourseWhereInput
    orderBy?: PendingCourseOrderByWithRelationInput | PendingCourseOrderByWithRelationInput[]
    cursor?: PendingCourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PendingCourseScalarFieldEnum | PendingCourseScalarFieldEnum[]
  }

  /**
   * Instructor without action
   */
  export type InstructorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
  }

  export type AdminMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    username: number
    password: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: string
    username: string
    password: string
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
  }

  export type AdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password", ExtArgs["result"]["admin"]>

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      password: string
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins and returns the data updated in the database.
     * @param {AdminUpdateManyAndReturnArgs} args - Arguments to update many Admins.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'String'>
    readonly username: FieldRef<"Admin", 'String'>
    readonly password: FieldRef<"Admin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin updateManyAndReturn
   */
  export type AdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to delete.
     */
    limit?: number
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
  }


  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    course_id: number | null
  }

  export type CourseSumAggregateOutputType = {
    course_id: number | null
  }

  export type CourseMinAggregateOutputType = {
    course_id: number | null
    course_name: string | null
    course_description: string | null
    category: string | null
    status: string | null
  }

  export type CourseMaxAggregateOutputType = {
    course_id: number | null
    course_name: string | null
    course_description: string | null
    category: string | null
    status: string | null
  }

  export type CourseCountAggregateOutputType = {
    course_id: number
    course_name: number
    course_description: number
    category: number
    status: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    course_id?: true
  }

  export type CourseSumAggregateInputType = {
    course_id?: true
  }

  export type CourseMinAggregateInputType = {
    course_id?: true
    course_name?: true
    course_description?: true
    category?: true
    status?: true
  }

  export type CourseMaxAggregateInputType = {
    course_id?: true
    course_name?: true
    course_description?: true
    category?: true
    status?: true
  }

  export type CourseCountAggregateInputType = {
    course_id?: true
    course_name?: true
    course_description?: true
    category?: true
    status?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    course_id: number
    course_name: string
    course_description: string | null
    category: string
    status: string
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    course_id?: boolean
    course_name?: boolean
    course_description?: boolean
    category?: boolean
    status?: boolean
    prerequisites?: boolean | Course$prerequisitesArgs<ExtArgs>
    requiredBy?: boolean | Course$requiredByArgs<ExtArgs>
    instructorCourses?: boolean | Course$instructorCoursesArgs<ExtArgs>
    completedCourses?: boolean | Course$completedCoursesArgs<ExtArgs>
    pendingCourses?: boolean | Course$pendingCoursesArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    course_id?: boolean
    course_name?: boolean
    course_description?: boolean
    category?: boolean
    status?: boolean
  }, ExtArgs["result"]["course"]>

  export type CourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    course_id?: boolean
    course_name?: boolean
    course_description?: boolean
    category?: boolean
    status?: boolean
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    course_id?: boolean
    course_name?: boolean
    course_description?: boolean
    category?: boolean
    status?: boolean
  }

  export type CourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"course_id" | "course_name" | "course_description" | "category" | "status", ExtArgs["result"]["course"]>
  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prerequisites?: boolean | Course$prerequisitesArgs<ExtArgs>
    requiredBy?: boolean | Course$requiredByArgs<ExtArgs>
    instructorCourses?: boolean | Course$instructorCoursesArgs<ExtArgs>
    completedCourses?: boolean | Course$completedCoursesArgs<ExtArgs>
    pendingCourses?: boolean | Course$pendingCoursesArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      prerequisites: Prisma.$PrerequisitePayload<ExtArgs>[]
      requiredBy: Prisma.$PrerequisitePayload<ExtArgs>[]
      instructorCourses: Prisma.$InstructorCoursePayload<ExtArgs>[]
      completedCourses: Prisma.$CompletedCoursePayload<ExtArgs>[]
      pendingCourses: Prisma.$PendingCoursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      course_id: number
      course_name: string
      course_description: string | null
      category: string
      status: string
    }, ExtArgs["result"]["course"]>
    composites: {}
  }

  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseFindUniqueArgs>(args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Course that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseFindFirstArgs>(args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `course_id`
     * const courseWithCourse_idOnly = await prisma.course.findMany({ select: { course_id: true } })
     * 
     */
    findMany<T extends CourseFindManyArgs>(args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
     */
    create<T extends CourseCreateArgs>(args: SelectSubset<T, CourseCreateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Courses.
     * @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseCreateManyArgs>(args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CourseCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `course_id`
     * const courseWithCourse_idOnly = await prisma.course.createManyAndReturn({
     *   select: { course_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
     */
    delete<T extends CourseDeleteArgs>(args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseUpdateArgs>(args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseDeleteManyArgs>(args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseUpdateManyArgs>(args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses and returns the data updated in the database.
     * @param {CourseUpdateManyAndReturnArgs} args - Arguments to update many Courses.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Courses and only return the `course_id`
     * const courseWithCourse_idOnly = await prisma.course.updateManyAndReturn({
     *   select: { course_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
     */
    upsert<T extends CourseUpsertArgs>(args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    prerequisites<T extends Course$prerequisitesArgs<ExtArgs> = {}>(args?: Subset<T, Course$prerequisitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrerequisitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    requiredBy<T extends Course$requiredByArgs<ExtArgs> = {}>(args?: Subset<T, Course$requiredByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrerequisitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    instructorCourses<T extends Course$instructorCoursesArgs<ExtArgs> = {}>(args?: Subset<T, Course$instructorCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstructorCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    completedCourses<T extends Course$completedCoursesArgs<ExtArgs> = {}>(args?: Subset<T, Course$completedCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pendingCourses<T extends Course$pendingCoursesArgs<ExtArgs> = {}>(args?: Subset<T, Course$pendingCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Course model
   */
  interface CourseFieldRefs {
    readonly course_id: FieldRef<"Course", 'Int'>
    readonly course_name: FieldRef<"Course", 'String'>
    readonly course_description: FieldRef<"Course", 'String'>
    readonly category: FieldRef<"Course", 'String'>
    readonly status: FieldRef<"Course", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }

  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
  }

  /**
   * Course createManyAndReturn
   */
  export type CourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
  }

  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
  }

  /**
   * Course updateManyAndReturn
   */
  export type CourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
  }

  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }

  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to delete.
     */
    limit?: number
  }

  /**
   * Course.prerequisites
   */
  export type Course$prerequisitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prerequisite
     */
    select?: PrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prerequisite
     */
    omit?: PrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrerequisiteInclude<ExtArgs> | null
    where?: PrerequisiteWhereInput
    orderBy?: PrerequisiteOrderByWithRelationInput | PrerequisiteOrderByWithRelationInput[]
    cursor?: PrerequisiteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrerequisiteScalarFieldEnum | PrerequisiteScalarFieldEnum[]
  }

  /**
   * Course.requiredBy
   */
  export type Course$requiredByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prerequisite
     */
    select?: PrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prerequisite
     */
    omit?: PrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrerequisiteInclude<ExtArgs> | null
    where?: PrerequisiteWhereInput
    orderBy?: PrerequisiteOrderByWithRelationInput | PrerequisiteOrderByWithRelationInput[]
    cursor?: PrerequisiteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrerequisiteScalarFieldEnum | PrerequisiteScalarFieldEnum[]
  }

  /**
   * Course.instructorCourses
   */
  export type Course$instructorCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstructorCourse
     */
    select?: InstructorCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstructorCourse
     */
    omit?: InstructorCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorCourseInclude<ExtArgs> | null
    where?: InstructorCourseWhereInput
    orderBy?: InstructorCourseOrderByWithRelationInput | InstructorCourseOrderByWithRelationInput[]
    cursor?: InstructorCourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InstructorCourseScalarFieldEnum | InstructorCourseScalarFieldEnum[]
  }

  /**
   * Course.completedCourses
   */
  export type Course$completedCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    where?: CompletedCourseWhereInput
    orderBy?: CompletedCourseOrderByWithRelationInput | CompletedCourseOrderByWithRelationInput[]
    cursor?: CompletedCourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompletedCourseScalarFieldEnum | CompletedCourseScalarFieldEnum[]
  }

  /**
   * Course.pendingCourses
   */
  export type Course$pendingCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    where?: PendingCourseWhereInput
    orderBy?: PendingCourseOrderByWithRelationInput | PendingCourseOrderByWithRelationInput[]
    cursor?: PendingCourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PendingCourseScalarFieldEnum | PendingCourseScalarFieldEnum[]
  }

  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
  }


  /**
   * Model InstructorCourse
   */

  export type AggregateInstructorCourse = {
    _count: InstructorCourseCountAggregateOutputType | null
    _avg: InstructorCourseAvgAggregateOutputType | null
    _sum: InstructorCourseSumAggregateOutputType | null
    _min: InstructorCourseMinAggregateOutputType | null
    _max: InstructorCourseMaxAggregateOutputType | null
  }

  export type InstructorCourseAvgAggregateOutputType = {
    capacity: number | null
    course_id: number | null
  }

  export type InstructorCourseSumAggregateOutputType = {
    capacity: number | null
    course_id: number | null
  }

  export type InstructorCourseMinAggregateOutputType = {
    capacity: number | null
    status: string | null
    course_id: number | null
    instructor_id: string | null
  }

  export type InstructorCourseMaxAggregateOutputType = {
    capacity: number | null
    status: string | null
    course_id: number | null
    instructor_id: string | null
  }

  export type InstructorCourseCountAggregateOutputType = {
    capacity: number
    status: number
    course_id: number
    instructor_id: number
    _all: number
  }


  export type InstructorCourseAvgAggregateInputType = {
    capacity?: true
    course_id?: true
  }

  export type InstructorCourseSumAggregateInputType = {
    capacity?: true
    course_id?: true
  }

  export type InstructorCourseMinAggregateInputType = {
    capacity?: true
    status?: true
    course_id?: true
    instructor_id?: true
  }

  export type InstructorCourseMaxAggregateInputType = {
    capacity?: true
    status?: true
    course_id?: true
    instructor_id?: true
  }

  export type InstructorCourseCountAggregateInputType = {
    capacity?: true
    status?: true
    course_id?: true
    instructor_id?: true
    _all?: true
  }

  export type InstructorCourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InstructorCourse to aggregate.
     */
    where?: InstructorCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstructorCourses to fetch.
     */
    orderBy?: InstructorCourseOrderByWithRelationInput | InstructorCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InstructorCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstructorCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstructorCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InstructorCourses
    **/
    _count?: true | InstructorCourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InstructorCourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InstructorCourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstructorCourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstructorCourseMaxAggregateInputType
  }

  export type GetInstructorCourseAggregateType<T extends InstructorCourseAggregateArgs> = {
        [P in keyof T & keyof AggregateInstructorCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstructorCourse[P]>
      : GetScalarType<T[P], AggregateInstructorCourse[P]>
  }




  export type InstructorCourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstructorCourseWhereInput
    orderBy?: InstructorCourseOrderByWithAggregationInput | InstructorCourseOrderByWithAggregationInput[]
    by: InstructorCourseScalarFieldEnum[] | InstructorCourseScalarFieldEnum
    having?: InstructorCourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstructorCourseCountAggregateInputType | true
    _avg?: InstructorCourseAvgAggregateInputType
    _sum?: InstructorCourseSumAggregateInputType
    _min?: InstructorCourseMinAggregateInputType
    _max?: InstructorCourseMaxAggregateInputType
  }

  export type InstructorCourseGroupByOutputType = {
    capacity: number
    status: string
    course_id: number
    instructor_id: string
    _count: InstructorCourseCountAggregateOutputType | null
    _avg: InstructorCourseAvgAggregateOutputType | null
    _sum: InstructorCourseSumAggregateOutputType | null
    _min: InstructorCourseMinAggregateOutputType | null
    _max: InstructorCourseMaxAggregateOutputType | null
  }

  type GetInstructorCourseGroupByPayload<T extends InstructorCourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstructorCourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstructorCourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstructorCourseGroupByOutputType[P]>
            : GetScalarType<T[P], InstructorCourseGroupByOutputType[P]>
        }
      >
    >


  export type InstructorCourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    capacity?: boolean
    status?: boolean
    course_id?: boolean
    instructor_id?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    instructor?: boolean | InstructorDefaultArgs<ExtArgs>
    registeredStudents?: boolean | InstructorCourse$registeredStudentsArgs<ExtArgs>
    _count?: boolean | InstructorCourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["instructorCourse"]>

  export type InstructorCourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    capacity?: boolean
    status?: boolean
    course_id?: boolean
    instructor_id?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    instructor?: boolean | InstructorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["instructorCourse"]>

  export type InstructorCourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    capacity?: boolean
    status?: boolean
    course_id?: boolean
    instructor_id?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    instructor?: boolean | InstructorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["instructorCourse"]>

  export type InstructorCourseSelectScalar = {
    capacity?: boolean
    status?: boolean
    course_id?: boolean
    instructor_id?: boolean
  }

  export type InstructorCourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"capacity" | "status" | "course_id" | "instructor_id", ExtArgs["result"]["instructorCourse"]>
  export type InstructorCourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    instructor?: boolean | InstructorDefaultArgs<ExtArgs>
    registeredStudents?: boolean | InstructorCourse$registeredStudentsArgs<ExtArgs>
    _count?: boolean | InstructorCourseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InstructorCourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    instructor?: boolean | InstructorDefaultArgs<ExtArgs>
  }
  export type InstructorCourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    instructor?: boolean | InstructorDefaultArgs<ExtArgs>
  }

  export type $InstructorCoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InstructorCourse"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      instructor: Prisma.$InstructorPayload<ExtArgs>
      registeredStudents: Prisma.$RegisteredStudentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      capacity: number
      status: string
      course_id: number
      instructor_id: string
    }, ExtArgs["result"]["instructorCourse"]>
    composites: {}
  }

  type InstructorCourseGetPayload<S extends boolean | null | undefined | InstructorCourseDefaultArgs> = $Result.GetResult<Prisma.$InstructorCoursePayload, S>

  type InstructorCourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InstructorCourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InstructorCourseCountAggregateInputType | true
    }

  export interface InstructorCourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InstructorCourse'], meta: { name: 'InstructorCourse' } }
    /**
     * Find zero or one InstructorCourse that matches the filter.
     * @param {InstructorCourseFindUniqueArgs} args - Arguments to find a InstructorCourse
     * @example
     * // Get one InstructorCourse
     * const instructorCourse = await prisma.instructorCourse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InstructorCourseFindUniqueArgs>(args: SelectSubset<T, InstructorCourseFindUniqueArgs<ExtArgs>>): Prisma__InstructorCourseClient<$Result.GetResult<Prisma.$InstructorCoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InstructorCourse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InstructorCourseFindUniqueOrThrowArgs} args - Arguments to find a InstructorCourse
     * @example
     * // Get one InstructorCourse
     * const instructorCourse = await prisma.instructorCourse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InstructorCourseFindUniqueOrThrowArgs>(args: SelectSubset<T, InstructorCourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InstructorCourseClient<$Result.GetResult<Prisma.$InstructorCoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InstructorCourse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorCourseFindFirstArgs} args - Arguments to find a InstructorCourse
     * @example
     * // Get one InstructorCourse
     * const instructorCourse = await prisma.instructorCourse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InstructorCourseFindFirstArgs>(args?: SelectSubset<T, InstructorCourseFindFirstArgs<ExtArgs>>): Prisma__InstructorCourseClient<$Result.GetResult<Prisma.$InstructorCoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InstructorCourse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorCourseFindFirstOrThrowArgs} args - Arguments to find a InstructorCourse
     * @example
     * // Get one InstructorCourse
     * const instructorCourse = await prisma.instructorCourse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InstructorCourseFindFirstOrThrowArgs>(args?: SelectSubset<T, InstructorCourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__InstructorCourseClient<$Result.GetResult<Prisma.$InstructorCoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InstructorCourses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorCourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InstructorCourses
     * const instructorCourses = await prisma.instructorCourse.findMany()
     * 
     * // Get first 10 InstructorCourses
     * const instructorCourses = await prisma.instructorCourse.findMany({ take: 10 })
     * 
     * // Only select the `capacity`
     * const instructorCourseWithCapacityOnly = await prisma.instructorCourse.findMany({ select: { capacity: true } })
     * 
     */
    findMany<T extends InstructorCourseFindManyArgs>(args?: SelectSubset<T, InstructorCourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstructorCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InstructorCourse.
     * @param {InstructorCourseCreateArgs} args - Arguments to create a InstructorCourse.
     * @example
     * // Create one InstructorCourse
     * const InstructorCourse = await prisma.instructorCourse.create({
     *   data: {
     *     // ... data to create a InstructorCourse
     *   }
     * })
     * 
     */
    create<T extends InstructorCourseCreateArgs>(args: SelectSubset<T, InstructorCourseCreateArgs<ExtArgs>>): Prisma__InstructorCourseClient<$Result.GetResult<Prisma.$InstructorCoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InstructorCourses.
     * @param {InstructorCourseCreateManyArgs} args - Arguments to create many InstructorCourses.
     * @example
     * // Create many InstructorCourses
     * const instructorCourse = await prisma.instructorCourse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InstructorCourseCreateManyArgs>(args?: SelectSubset<T, InstructorCourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InstructorCourses and returns the data saved in the database.
     * @param {InstructorCourseCreateManyAndReturnArgs} args - Arguments to create many InstructorCourses.
     * @example
     * // Create many InstructorCourses
     * const instructorCourse = await prisma.instructorCourse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InstructorCourses and only return the `capacity`
     * const instructorCourseWithCapacityOnly = await prisma.instructorCourse.createManyAndReturn({
     *   select: { capacity: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InstructorCourseCreateManyAndReturnArgs>(args?: SelectSubset<T, InstructorCourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstructorCoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InstructorCourse.
     * @param {InstructorCourseDeleteArgs} args - Arguments to delete one InstructorCourse.
     * @example
     * // Delete one InstructorCourse
     * const InstructorCourse = await prisma.instructorCourse.delete({
     *   where: {
     *     // ... filter to delete one InstructorCourse
     *   }
     * })
     * 
     */
    delete<T extends InstructorCourseDeleteArgs>(args: SelectSubset<T, InstructorCourseDeleteArgs<ExtArgs>>): Prisma__InstructorCourseClient<$Result.GetResult<Prisma.$InstructorCoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InstructorCourse.
     * @param {InstructorCourseUpdateArgs} args - Arguments to update one InstructorCourse.
     * @example
     * // Update one InstructorCourse
     * const instructorCourse = await prisma.instructorCourse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InstructorCourseUpdateArgs>(args: SelectSubset<T, InstructorCourseUpdateArgs<ExtArgs>>): Prisma__InstructorCourseClient<$Result.GetResult<Prisma.$InstructorCoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InstructorCourses.
     * @param {InstructorCourseDeleteManyArgs} args - Arguments to filter InstructorCourses to delete.
     * @example
     * // Delete a few InstructorCourses
     * const { count } = await prisma.instructorCourse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InstructorCourseDeleteManyArgs>(args?: SelectSubset<T, InstructorCourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InstructorCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorCourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InstructorCourses
     * const instructorCourse = await prisma.instructorCourse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InstructorCourseUpdateManyArgs>(args: SelectSubset<T, InstructorCourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InstructorCourses and returns the data updated in the database.
     * @param {InstructorCourseUpdateManyAndReturnArgs} args - Arguments to update many InstructorCourses.
     * @example
     * // Update many InstructorCourses
     * const instructorCourse = await prisma.instructorCourse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InstructorCourses and only return the `capacity`
     * const instructorCourseWithCapacityOnly = await prisma.instructorCourse.updateManyAndReturn({
     *   select: { capacity: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InstructorCourseUpdateManyAndReturnArgs>(args: SelectSubset<T, InstructorCourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstructorCoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InstructorCourse.
     * @param {InstructorCourseUpsertArgs} args - Arguments to update or create a InstructorCourse.
     * @example
     * // Update or create a InstructorCourse
     * const instructorCourse = await prisma.instructorCourse.upsert({
     *   create: {
     *     // ... data to create a InstructorCourse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InstructorCourse we want to update
     *   }
     * })
     */
    upsert<T extends InstructorCourseUpsertArgs>(args: SelectSubset<T, InstructorCourseUpsertArgs<ExtArgs>>): Prisma__InstructorCourseClient<$Result.GetResult<Prisma.$InstructorCoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InstructorCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorCourseCountArgs} args - Arguments to filter InstructorCourses to count.
     * @example
     * // Count the number of InstructorCourses
     * const count = await prisma.instructorCourse.count({
     *   where: {
     *     // ... the filter for the InstructorCourses we want to count
     *   }
     * })
    **/
    count<T extends InstructorCourseCountArgs>(
      args?: Subset<T, InstructorCourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstructorCourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InstructorCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorCourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstructorCourseAggregateArgs>(args: Subset<T, InstructorCourseAggregateArgs>): Prisma.PrismaPromise<GetInstructorCourseAggregateType<T>>

    /**
     * Group by InstructorCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorCourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstructorCourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstructorCourseGroupByArgs['orderBy'] }
        : { orderBy?: InstructorCourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstructorCourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstructorCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InstructorCourse model
   */
  readonly fields: InstructorCourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InstructorCourse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InstructorCourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    instructor<T extends InstructorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstructorDefaultArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    registeredStudents<T extends InstructorCourse$registeredStudentsArgs<ExtArgs> = {}>(args?: Subset<T, InstructorCourse$registeredStudentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegisteredStudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InstructorCourse model
   */
  interface InstructorCourseFieldRefs {
    readonly capacity: FieldRef<"InstructorCourse", 'Int'>
    readonly status: FieldRef<"InstructorCourse", 'String'>
    readonly course_id: FieldRef<"InstructorCourse", 'Int'>
    readonly instructor_id: FieldRef<"InstructorCourse", 'String'>
  }
    

  // Custom InputTypes
  /**
   * InstructorCourse findUnique
   */
  export type InstructorCourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstructorCourse
     */
    select?: InstructorCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstructorCourse
     */
    omit?: InstructorCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorCourseInclude<ExtArgs> | null
    /**
     * Filter, which InstructorCourse to fetch.
     */
    where: InstructorCourseWhereUniqueInput
  }

  /**
   * InstructorCourse findUniqueOrThrow
   */
  export type InstructorCourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstructorCourse
     */
    select?: InstructorCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstructorCourse
     */
    omit?: InstructorCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorCourseInclude<ExtArgs> | null
    /**
     * Filter, which InstructorCourse to fetch.
     */
    where: InstructorCourseWhereUniqueInput
  }

  /**
   * InstructorCourse findFirst
   */
  export type InstructorCourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstructorCourse
     */
    select?: InstructorCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstructorCourse
     */
    omit?: InstructorCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorCourseInclude<ExtArgs> | null
    /**
     * Filter, which InstructorCourse to fetch.
     */
    where?: InstructorCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstructorCourses to fetch.
     */
    orderBy?: InstructorCourseOrderByWithRelationInput | InstructorCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InstructorCourses.
     */
    cursor?: InstructorCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstructorCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstructorCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InstructorCourses.
     */
    distinct?: InstructorCourseScalarFieldEnum | InstructorCourseScalarFieldEnum[]
  }

  /**
   * InstructorCourse findFirstOrThrow
   */
  export type InstructorCourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstructorCourse
     */
    select?: InstructorCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstructorCourse
     */
    omit?: InstructorCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorCourseInclude<ExtArgs> | null
    /**
     * Filter, which InstructorCourse to fetch.
     */
    where?: InstructorCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstructorCourses to fetch.
     */
    orderBy?: InstructorCourseOrderByWithRelationInput | InstructorCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InstructorCourses.
     */
    cursor?: InstructorCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstructorCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstructorCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InstructorCourses.
     */
    distinct?: InstructorCourseScalarFieldEnum | InstructorCourseScalarFieldEnum[]
  }

  /**
   * InstructorCourse findMany
   */
  export type InstructorCourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstructorCourse
     */
    select?: InstructorCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstructorCourse
     */
    omit?: InstructorCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorCourseInclude<ExtArgs> | null
    /**
     * Filter, which InstructorCourses to fetch.
     */
    where?: InstructorCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstructorCourses to fetch.
     */
    orderBy?: InstructorCourseOrderByWithRelationInput | InstructorCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InstructorCourses.
     */
    cursor?: InstructorCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstructorCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstructorCourses.
     */
    skip?: number
    distinct?: InstructorCourseScalarFieldEnum | InstructorCourseScalarFieldEnum[]
  }

  /**
   * InstructorCourse create
   */
  export type InstructorCourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstructorCourse
     */
    select?: InstructorCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstructorCourse
     */
    omit?: InstructorCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorCourseInclude<ExtArgs> | null
    /**
     * The data needed to create a InstructorCourse.
     */
    data: XOR<InstructorCourseCreateInput, InstructorCourseUncheckedCreateInput>
  }

  /**
   * InstructorCourse createMany
   */
  export type InstructorCourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InstructorCourses.
     */
    data: InstructorCourseCreateManyInput | InstructorCourseCreateManyInput[]
  }

  /**
   * InstructorCourse createManyAndReturn
   */
  export type InstructorCourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstructorCourse
     */
    select?: InstructorCourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InstructorCourse
     */
    omit?: InstructorCourseOmit<ExtArgs> | null
    /**
     * The data used to create many InstructorCourses.
     */
    data: InstructorCourseCreateManyInput | InstructorCourseCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorCourseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InstructorCourse update
   */
  export type InstructorCourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstructorCourse
     */
    select?: InstructorCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstructorCourse
     */
    omit?: InstructorCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorCourseInclude<ExtArgs> | null
    /**
     * The data needed to update a InstructorCourse.
     */
    data: XOR<InstructorCourseUpdateInput, InstructorCourseUncheckedUpdateInput>
    /**
     * Choose, which InstructorCourse to update.
     */
    where: InstructorCourseWhereUniqueInput
  }

  /**
   * InstructorCourse updateMany
   */
  export type InstructorCourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InstructorCourses.
     */
    data: XOR<InstructorCourseUpdateManyMutationInput, InstructorCourseUncheckedUpdateManyInput>
    /**
     * Filter which InstructorCourses to update
     */
    where?: InstructorCourseWhereInput
    /**
     * Limit how many InstructorCourses to update.
     */
    limit?: number
  }

  /**
   * InstructorCourse updateManyAndReturn
   */
  export type InstructorCourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstructorCourse
     */
    select?: InstructorCourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InstructorCourse
     */
    omit?: InstructorCourseOmit<ExtArgs> | null
    /**
     * The data used to update InstructorCourses.
     */
    data: XOR<InstructorCourseUpdateManyMutationInput, InstructorCourseUncheckedUpdateManyInput>
    /**
     * Filter which InstructorCourses to update
     */
    where?: InstructorCourseWhereInput
    /**
     * Limit how many InstructorCourses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorCourseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InstructorCourse upsert
   */
  export type InstructorCourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstructorCourse
     */
    select?: InstructorCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstructorCourse
     */
    omit?: InstructorCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorCourseInclude<ExtArgs> | null
    /**
     * The filter to search for the InstructorCourse to update in case it exists.
     */
    where: InstructorCourseWhereUniqueInput
    /**
     * In case the InstructorCourse found by the `where` argument doesn't exist, create a new InstructorCourse with this data.
     */
    create: XOR<InstructorCourseCreateInput, InstructorCourseUncheckedCreateInput>
    /**
     * In case the InstructorCourse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InstructorCourseUpdateInput, InstructorCourseUncheckedUpdateInput>
  }

  /**
   * InstructorCourse delete
   */
  export type InstructorCourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstructorCourse
     */
    select?: InstructorCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstructorCourse
     */
    omit?: InstructorCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorCourseInclude<ExtArgs> | null
    /**
     * Filter which InstructorCourse to delete.
     */
    where: InstructorCourseWhereUniqueInput
  }

  /**
   * InstructorCourse deleteMany
   */
  export type InstructorCourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InstructorCourses to delete
     */
    where?: InstructorCourseWhereInput
    /**
     * Limit how many InstructorCourses to delete.
     */
    limit?: number
  }

  /**
   * InstructorCourse.registeredStudents
   */
  export type InstructorCourse$registeredStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredStudent
     */
    select?: RegisteredStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegisteredStudent
     */
    omit?: RegisteredStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegisteredStudentInclude<ExtArgs> | null
    where?: RegisteredStudentWhereInput
    orderBy?: RegisteredStudentOrderByWithRelationInput | RegisteredStudentOrderByWithRelationInput[]
    cursor?: RegisteredStudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegisteredStudentScalarFieldEnum | RegisteredStudentScalarFieldEnum[]
  }

  /**
   * InstructorCourse without action
   */
  export type InstructorCourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstructorCourse
     */
    select?: InstructorCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InstructorCourse
     */
    omit?: InstructorCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorCourseInclude<ExtArgs> | null
  }


  /**
   * Model RegisteredStudent
   */

  export type AggregateRegisteredStudent = {
    _count: RegisteredStudentCountAggregateOutputType | null
    _avg: RegisteredStudentAvgAggregateOutputType | null
    _sum: RegisteredStudentSumAggregateOutputType | null
    _min: RegisteredStudentMinAggregateOutputType | null
    _max: RegisteredStudentMaxAggregateOutputType | null
  }

  export type RegisteredStudentAvgAggregateOutputType = {
    instructor_course_course_id: number | null
  }

  export type RegisteredStudentSumAggregateOutputType = {
    instructor_course_course_id: number | null
  }

  export type RegisteredStudentMinAggregateOutputType = {
    instructor_course_course_id: number | null
    instructor_course_instructor_id: string | null
    student_id: string | null
  }

  export type RegisteredStudentMaxAggregateOutputType = {
    instructor_course_course_id: number | null
    instructor_course_instructor_id: string | null
    student_id: string | null
  }

  export type RegisteredStudentCountAggregateOutputType = {
    instructor_course_course_id: number
    instructor_course_instructor_id: number
    student_id: number
    _all: number
  }


  export type RegisteredStudentAvgAggregateInputType = {
    instructor_course_course_id?: true
  }

  export type RegisteredStudentSumAggregateInputType = {
    instructor_course_course_id?: true
  }

  export type RegisteredStudentMinAggregateInputType = {
    instructor_course_course_id?: true
    instructor_course_instructor_id?: true
    student_id?: true
  }

  export type RegisteredStudentMaxAggregateInputType = {
    instructor_course_course_id?: true
    instructor_course_instructor_id?: true
    student_id?: true
  }

  export type RegisteredStudentCountAggregateInputType = {
    instructor_course_course_id?: true
    instructor_course_instructor_id?: true
    student_id?: true
    _all?: true
  }

  export type RegisteredStudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RegisteredStudent to aggregate.
     */
    where?: RegisteredStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegisteredStudents to fetch.
     */
    orderBy?: RegisteredStudentOrderByWithRelationInput | RegisteredStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegisteredStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegisteredStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegisteredStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RegisteredStudents
    **/
    _count?: true | RegisteredStudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RegisteredStudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RegisteredStudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegisteredStudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegisteredStudentMaxAggregateInputType
  }

  export type GetRegisteredStudentAggregateType<T extends RegisteredStudentAggregateArgs> = {
        [P in keyof T & keyof AggregateRegisteredStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegisteredStudent[P]>
      : GetScalarType<T[P], AggregateRegisteredStudent[P]>
  }




  export type RegisteredStudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegisteredStudentWhereInput
    orderBy?: RegisteredStudentOrderByWithAggregationInput | RegisteredStudentOrderByWithAggregationInput[]
    by: RegisteredStudentScalarFieldEnum[] | RegisteredStudentScalarFieldEnum
    having?: RegisteredStudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegisteredStudentCountAggregateInputType | true
    _avg?: RegisteredStudentAvgAggregateInputType
    _sum?: RegisteredStudentSumAggregateInputType
    _min?: RegisteredStudentMinAggregateInputType
    _max?: RegisteredStudentMaxAggregateInputType
  }

  export type RegisteredStudentGroupByOutputType = {
    instructor_course_course_id: number
    instructor_course_instructor_id: string
    student_id: string
    _count: RegisteredStudentCountAggregateOutputType | null
    _avg: RegisteredStudentAvgAggregateOutputType | null
    _sum: RegisteredStudentSumAggregateOutputType | null
    _min: RegisteredStudentMinAggregateOutputType | null
    _max: RegisteredStudentMaxAggregateOutputType | null
  }

  type GetRegisteredStudentGroupByPayload<T extends RegisteredStudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegisteredStudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegisteredStudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegisteredStudentGroupByOutputType[P]>
            : GetScalarType<T[P], RegisteredStudentGroupByOutputType[P]>
        }
      >
    >


  export type RegisteredStudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    instructor_course_course_id?: boolean
    instructor_course_instructor_id?: boolean
    student_id?: boolean
    instructorCourse?: boolean | InstructorCourseDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registeredStudent"]>

  export type RegisteredStudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    instructor_course_course_id?: boolean
    instructor_course_instructor_id?: boolean
    student_id?: boolean
    instructorCourse?: boolean | InstructorCourseDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registeredStudent"]>

  export type RegisteredStudentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    instructor_course_course_id?: boolean
    instructor_course_instructor_id?: boolean
    student_id?: boolean
    instructorCourse?: boolean | InstructorCourseDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registeredStudent"]>

  export type RegisteredStudentSelectScalar = {
    instructor_course_course_id?: boolean
    instructor_course_instructor_id?: boolean
    student_id?: boolean
  }

  export type RegisteredStudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"instructor_course_course_id" | "instructor_course_instructor_id" | "student_id", ExtArgs["result"]["registeredStudent"]>
  export type RegisteredStudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instructorCourse?: boolean | InstructorCourseDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type RegisteredStudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instructorCourse?: boolean | InstructorCourseDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type RegisteredStudentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instructorCourse?: boolean | InstructorCourseDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $RegisteredStudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RegisteredStudent"
    objects: {
      instructorCourse: Prisma.$InstructorCoursePayload<ExtArgs>
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      instructor_course_course_id: number
      instructor_course_instructor_id: string
      student_id: string
    }, ExtArgs["result"]["registeredStudent"]>
    composites: {}
  }

  type RegisteredStudentGetPayload<S extends boolean | null | undefined | RegisteredStudentDefaultArgs> = $Result.GetResult<Prisma.$RegisteredStudentPayload, S>

  type RegisteredStudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RegisteredStudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RegisteredStudentCountAggregateInputType | true
    }

  export interface RegisteredStudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RegisteredStudent'], meta: { name: 'RegisteredStudent' } }
    /**
     * Find zero or one RegisteredStudent that matches the filter.
     * @param {RegisteredStudentFindUniqueArgs} args - Arguments to find a RegisteredStudent
     * @example
     * // Get one RegisteredStudent
     * const registeredStudent = await prisma.registeredStudent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegisteredStudentFindUniqueArgs>(args: SelectSubset<T, RegisteredStudentFindUniqueArgs<ExtArgs>>): Prisma__RegisteredStudentClient<$Result.GetResult<Prisma.$RegisteredStudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RegisteredStudent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RegisteredStudentFindUniqueOrThrowArgs} args - Arguments to find a RegisteredStudent
     * @example
     * // Get one RegisteredStudent
     * const registeredStudent = await prisma.registeredStudent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegisteredStudentFindUniqueOrThrowArgs>(args: SelectSubset<T, RegisteredStudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegisteredStudentClient<$Result.GetResult<Prisma.$RegisteredStudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RegisteredStudent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredStudentFindFirstArgs} args - Arguments to find a RegisteredStudent
     * @example
     * // Get one RegisteredStudent
     * const registeredStudent = await prisma.registeredStudent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegisteredStudentFindFirstArgs>(args?: SelectSubset<T, RegisteredStudentFindFirstArgs<ExtArgs>>): Prisma__RegisteredStudentClient<$Result.GetResult<Prisma.$RegisteredStudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RegisteredStudent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredStudentFindFirstOrThrowArgs} args - Arguments to find a RegisteredStudent
     * @example
     * // Get one RegisteredStudent
     * const registeredStudent = await prisma.registeredStudent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegisteredStudentFindFirstOrThrowArgs>(args?: SelectSubset<T, RegisteredStudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegisteredStudentClient<$Result.GetResult<Prisma.$RegisteredStudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RegisteredStudents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredStudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RegisteredStudents
     * const registeredStudents = await prisma.registeredStudent.findMany()
     * 
     * // Get first 10 RegisteredStudents
     * const registeredStudents = await prisma.registeredStudent.findMany({ take: 10 })
     * 
     * // Only select the `instructor_course_course_id`
     * const registeredStudentWithInstructor_course_course_idOnly = await prisma.registeredStudent.findMany({ select: { instructor_course_course_id: true } })
     * 
     */
    findMany<T extends RegisteredStudentFindManyArgs>(args?: SelectSubset<T, RegisteredStudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegisteredStudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RegisteredStudent.
     * @param {RegisteredStudentCreateArgs} args - Arguments to create a RegisteredStudent.
     * @example
     * // Create one RegisteredStudent
     * const RegisteredStudent = await prisma.registeredStudent.create({
     *   data: {
     *     // ... data to create a RegisteredStudent
     *   }
     * })
     * 
     */
    create<T extends RegisteredStudentCreateArgs>(args: SelectSubset<T, RegisteredStudentCreateArgs<ExtArgs>>): Prisma__RegisteredStudentClient<$Result.GetResult<Prisma.$RegisteredStudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RegisteredStudents.
     * @param {RegisteredStudentCreateManyArgs} args - Arguments to create many RegisteredStudents.
     * @example
     * // Create many RegisteredStudents
     * const registeredStudent = await prisma.registeredStudent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegisteredStudentCreateManyArgs>(args?: SelectSubset<T, RegisteredStudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RegisteredStudents and returns the data saved in the database.
     * @param {RegisteredStudentCreateManyAndReturnArgs} args - Arguments to create many RegisteredStudents.
     * @example
     * // Create many RegisteredStudents
     * const registeredStudent = await prisma.registeredStudent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RegisteredStudents and only return the `instructor_course_course_id`
     * const registeredStudentWithInstructor_course_course_idOnly = await prisma.registeredStudent.createManyAndReturn({
     *   select: { instructor_course_course_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegisteredStudentCreateManyAndReturnArgs>(args?: SelectSubset<T, RegisteredStudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegisteredStudentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RegisteredStudent.
     * @param {RegisteredStudentDeleteArgs} args - Arguments to delete one RegisteredStudent.
     * @example
     * // Delete one RegisteredStudent
     * const RegisteredStudent = await prisma.registeredStudent.delete({
     *   where: {
     *     // ... filter to delete one RegisteredStudent
     *   }
     * })
     * 
     */
    delete<T extends RegisteredStudentDeleteArgs>(args: SelectSubset<T, RegisteredStudentDeleteArgs<ExtArgs>>): Prisma__RegisteredStudentClient<$Result.GetResult<Prisma.$RegisteredStudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RegisteredStudent.
     * @param {RegisteredStudentUpdateArgs} args - Arguments to update one RegisteredStudent.
     * @example
     * // Update one RegisteredStudent
     * const registeredStudent = await prisma.registeredStudent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegisteredStudentUpdateArgs>(args: SelectSubset<T, RegisteredStudentUpdateArgs<ExtArgs>>): Prisma__RegisteredStudentClient<$Result.GetResult<Prisma.$RegisteredStudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RegisteredStudents.
     * @param {RegisteredStudentDeleteManyArgs} args - Arguments to filter RegisteredStudents to delete.
     * @example
     * // Delete a few RegisteredStudents
     * const { count } = await prisma.registeredStudent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegisteredStudentDeleteManyArgs>(args?: SelectSubset<T, RegisteredStudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RegisteredStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredStudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RegisteredStudents
     * const registeredStudent = await prisma.registeredStudent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegisteredStudentUpdateManyArgs>(args: SelectSubset<T, RegisteredStudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RegisteredStudents and returns the data updated in the database.
     * @param {RegisteredStudentUpdateManyAndReturnArgs} args - Arguments to update many RegisteredStudents.
     * @example
     * // Update many RegisteredStudents
     * const registeredStudent = await prisma.registeredStudent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RegisteredStudents and only return the `instructor_course_course_id`
     * const registeredStudentWithInstructor_course_course_idOnly = await prisma.registeredStudent.updateManyAndReturn({
     *   select: { instructor_course_course_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RegisteredStudentUpdateManyAndReturnArgs>(args: SelectSubset<T, RegisteredStudentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegisteredStudentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RegisteredStudent.
     * @param {RegisteredStudentUpsertArgs} args - Arguments to update or create a RegisteredStudent.
     * @example
     * // Update or create a RegisteredStudent
     * const registeredStudent = await prisma.registeredStudent.upsert({
     *   create: {
     *     // ... data to create a RegisteredStudent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RegisteredStudent we want to update
     *   }
     * })
     */
    upsert<T extends RegisteredStudentUpsertArgs>(args: SelectSubset<T, RegisteredStudentUpsertArgs<ExtArgs>>): Prisma__RegisteredStudentClient<$Result.GetResult<Prisma.$RegisteredStudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RegisteredStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredStudentCountArgs} args - Arguments to filter RegisteredStudents to count.
     * @example
     * // Count the number of RegisteredStudents
     * const count = await prisma.registeredStudent.count({
     *   where: {
     *     // ... the filter for the RegisteredStudents we want to count
     *   }
     * })
    **/
    count<T extends RegisteredStudentCountArgs>(
      args?: Subset<T, RegisteredStudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegisteredStudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RegisteredStudent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredStudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegisteredStudentAggregateArgs>(args: Subset<T, RegisteredStudentAggregateArgs>): Prisma.PrismaPromise<GetRegisteredStudentAggregateType<T>>

    /**
     * Group by RegisteredStudent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisteredStudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegisteredStudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegisteredStudentGroupByArgs['orderBy'] }
        : { orderBy?: RegisteredStudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegisteredStudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegisteredStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RegisteredStudent model
   */
  readonly fields: RegisteredStudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RegisteredStudent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegisteredStudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    instructorCourse<T extends InstructorCourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstructorCourseDefaultArgs<ExtArgs>>): Prisma__InstructorCourseClient<$Result.GetResult<Prisma.$InstructorCoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RegisteredStudent model
   */
  interface RegisteredStudentFieldRefs {
    readonly instructor_course_course_id: FieldRef<"RegisteredStudent", 'Int'>
    readonly instructor_course_instructor_id: FieldRef<"RegisteredStudent", 'String'>
    readonly student_id: FieldRef<"RegisteredStudent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RegisteredStudent findUnique
   */
  export type RegisteredStudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredStudent
     */
    select?: RegisteredStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegisteredStudent
     */
    omit?: RegisteredStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegisteredStudentInclude<ExtArgs> | null
    /**
     * Filter, which RegisteredStudent to fetch.
     */
    where: RegisteredStudentWhereUniqueInput
  }

  /**
   * RegisteredStudent findUniqueOrThrow
   */
  export type RegisteredStudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredStudent
     */
    select?: RegisteredStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegisteredStudent
     */
    omit?: RegisteredStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegisteredStudentInclude<ExtArgs> | null
    /**
     * Filter, which RegisteredStudent to fetch.
     */
    where: RegisteredStudentWhereUniqueInput
  }

  /**
   * RegisteredStudent findFirst
   */
  export type RegisteredStudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredStudent
     */
    select?: RegisteredStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegisteredStudent
     */
    omit?: RegisteredStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegisteredStudentInclude<ExtArgs> | null
    /**
     * Filter, which RegisteredStudent to fetch.
     */
    where?: RegisteredStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegisteredStudents to fetch.
     */
    orderBy?: RegisteredStudentOrderByWithRelationInput | RegisteredStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegisteredStudents.
     */
    cursor?: RegisteredStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegisteredStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegisteredStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegisteredStudents.
     */
    distinct?: RegisteredStudentScalarFieldEnum | RegisteredStudentScalarFieldEnum[]
  }

  /**
   * RegisteredStudent findFirstOrThrow
   */
  export type RegisteredStudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredStudent
     */
    select?: RegisteredStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegisteredStudent
     */
    omit?: RegisteredStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegisteredStudentInclude<ExtArgs> | null
    /**
     * Filter, which RegisteredStudent to fetch.
     */
    where?: RegisteredStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegisteredStudents to fetch.
     */
    orderBy?: RegisteredStudentOrderByWithRelationInput | RegisteredStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegisteredStudents.
     */
    cursor?: RegisteredStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegisteredStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegisteredStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegisteredStudents.
     */
    distinct?: RegisteredStudentScalarFieldEnum | RegisteredStudentScalarFieldEnum[]
  }

  /**
   * RegisteredStudent findMany
   */
  export type RegisteredStudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredStudent
     */
    select?: RegisteredStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegisteredStudent
     */
    omit?: RegisteredStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegisteredStudentInclude<ExtArgs> | null
    /**
     * Filter, which RegisteredStudents to fetch.
     */
    where?: RegisteredStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegisteredStudents to fetch.
     */
    orderBy?: RegisteredStudentOrderByWithRelationInput | RegisteredStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RegisteredStudents.
     */
    cursor?: RegisteredStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegisteredStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegisteredStudents.
     */
    skip?: number
    distinct?: RegisteredStudentScalarFieldEnum | RegisteredStudentScalarFieldEnum[]
  }

  /**
   * RegisteredStudent create
   */
  export type RegisteredStudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredStudent
     */
    select?: RegisteredStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegisteredStudent
     */
    omit?: RegisteredStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegisteredStudentInclude<ExtArgs> | null
    /**
     * The data needed to create a RegisteredStudent.
     */
    data: XOR<RegisteredStudentCreateInput, RegisteredStudentUncheckedCreateInput>
  }

  /**
   * RegisteredStudent createMany
   */
  export type RegisteredStudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RegisteredStudents.
     */
    data: RegisteredStudentCreateManyInput | RegisteredStudentCreateManyInput[]
  }

  /**
   * RegisteredStudent createManyAndReturn
   */
  export type RegisteredStudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredStudent
     */
    select?: RegisteredStudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RegisteredStudent
     */
    omit?: RegisteredStudentOmit<ExtArgs> | null
    /**
     * The data used to create many RegisteredStudents.
     */
    data: RegisteredStudentCreateManyInput | RegisteredStudentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegisteredStudentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RegisteredStudent update
   */
  export type RegisteredStudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredStudent
     */
    select?: RegisteredStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegisteredStudent
     */
    omit?: RegisteredStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegisteredStudentInclude<ExtArgs> | null
    /**
     * The data needed to update a RegisteredStudent.
     */
    data: XOR<RegisteredStudentUpdateInput, RegisteredStudentUncheckedUpdateInput>
    /**
     * Choose, which RegisteredStudent to update.
     */
    where: RegisteredStudentWhereUniqueInput
  }

  /**
   * RegisteredStudent updateMany
   */
  export type RegisteredStudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RegisteredStudents.
     */
    data: XOR<RegisteredStudentUpdateManyMutationInput, RegisteredStudentUncheckedUpdateManyInput>
    /**
     * Filter which RegisteredStudents to update
     */
    where?: RegisteredStudentWhereInput
    /**
     * Limit how many RegisteredStudents to update.
     */
    limit?: number
  }

  /**
   * RegisteredStudent updateManyAndReturn
   */
  export type RegisteredStudentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredStudent
     */
    select?: RegisteredStudentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RegisteredStudent
     */
    omit?: RegisteredStudentOmit<ExtArgs> | null
    /**
     * The data used to update RegisteredStudents.
     */
    data: XOR<RegisteredStudentUpdateManyMutationInput, RegisteredStudentUncheckedUpdateManyInput>
    /**
     * Filter which RegisteredStudents to update
     */
    where?: RegisteredStudentWhereInput
    /**
     * Limit how many RegisteredStudents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegisteredStudentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RegisteredStudent upsert
   */
  export type RegisteredStudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredStudent
     */
    select?: RegisteredStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegisteredStudent
     */
    omit?: RegisteredStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegisteredStudentInclude<ExtArgs> | null
    /**
     * The filter to search for the RegisteredStudent to update in case it exists.
     */
    where: RegisteredStudentWhereUniqueInput
    /**
     * In case the RegisteredStudent found by the `where` argument doesn't exist, create a new RegisteredStudent with this data.
     */
    create: XOR<RegisteredStudentCreateInput, RegisteredStudentUncheckedCreateInput>
    /**
     * In case the RegisteredStudent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegisteredStudentUpdateInput, RegisteredStudentUncheckedUpdateInput>
  }

  /**
   * RegisteredStudent delete
   */
  export type RegisteredStudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredStudent
     */
    select?: RegisteredStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegisteredStudent
     */
    omit?: RegisteredStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegisteredStudentInclude<ExtArgs> | null
    /**
     * Filter which RegisteredStudent to delete.
     */
    where: RegisteredStudentWhereUniqueInput
  }

  /**
   * RegisteredStudent deleteMany
   */
  export type RegisteredStudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RegisteredStudents to delete
     */
    where?: RegisteredStudentWhereInput
    /**
     * Limit how many RegisteredStudents to delete.
     */
    limit?: number
  }

  /**
   * RegisteredStudent without action
   */
  export type RegisteredStudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisteredStudent
     */
    select?: RegisteredStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegisteredStudent
     */
    omit?: RegisteredStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegisteredStudentInclude<ExtArgs> | null
  }


  /**
   * Model CompletedCourse
   */

  export type AggregateCompletedCourse = {
    _count: CompletedCourseCountAggregateOutputType | null
    _avg: CompletedCourseAvgAggregateOutputType | null
    _sum: CompletedCourseSumAggregateOutputType | null
    _min: CompletedCourseMinAggregateOutputType | null
    _max: CompletedCourseMaxAggregateOutputType | null
  }

  export type CompletedCourseAvgAggregateOutputType = {
    course_id: number | null
  }

  export type CompletedCourseSumAggregateOutputType = {
    course_id: number | null
  }

  export type CompletedCourseMinAggregateOutputType = {
    course_id: number | null
    student_id: string | null
    grade: string | null
  }

  export type CompletedCourseMaxAggregateOutputType = {
    course_id: number | null
    student_id: string | null
    grade: string | null
  }

  export type CompletedCourseCountAggregateOutputType = {
    course_id: number
    student_id: number
    grade: number
    _all: number
  }


  export type CompletedCourseAvgAggregateInputType = {
    course_id?: true
  }

  export type CompletedCourseSumAggregateInputType = {
    course_id?: true
  }

  export type CompletedCourseMinAggregateInputType = {
    course_id?: true
    student_id?: true
    grade?: true
  }

  export type CompletedCourseMaxAggregateInputType = {
    course_id?: true
    student_id?: true
    grade?: true
  }

  export type CompletedCourseCountAggregateInputType = {
    course_id?: true
    student_id?: true
    grade?: true
    _all?: true
  }

  export type CompletedCourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompletedCourse to aggregate.
     */
    where?: CompletedCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompletedCourses to fetch.
     */
    orderBy?: CompletedCourseOrderByWithRelationInput | CompletedCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompletedCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompletedCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompletedCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompletedCourses
    **/
    _count?: true | CompletedCourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompletedCourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompletedCourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompletedCourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompletedCourseMaxAggregateInputType
  }

  export type GetCompletedCourseAggregateType<T extends CompletedCourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCompletedCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompletedCourse[P]>
      : GetScalarType<T[P], AggregateCompletedCourse[P]>
  }




  export type CompletedCourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompletedCourseWhereInput
    orderBy?: CompletedCourseOrderByWithAggregationInput | CompletedCourseOrderByWithAggregationInput[]
    by: CompletedCourseScalarFieldEnum[] | CompletedCourseScalarFieldEnum
    having?: CompletedCourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompletedCourseCountAggregateInputType | true
    _avg?: CompletedCourseAvgAggregateInputType
    _sum?: CompletedCourseSumAggregateInputType
    _min?: CompletedCourseMinAggregateInputType
    _max?: CompletedCourseMaxAggregateInputType
  }

  export type CompletedCourseGroupByOutputType = {
    course_id: number
    student_id: string
    grade: string
    _count: CompletedCourseCountAggregateOutputType | null
    _avg: CompletedCourseAvgAggregateOutputType | null
    _sum: CompletedCourseSumAggregateOutputType | null
    _min: CompletedCourseMinAggregateOutputType | null
    _max: CompletedCourseMaxAggregateOutputType | null
  }

  type GetCompletedCourseGroupByPayload<T extends CompletedCourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompletedCourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompletedCourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompletedCourseGroupByOutputType[P]>
            : GetScalarType<T[P], CompletedCourseGroupByOutputType[P]>
        }
      >
    >


  export type CompletedCourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    course_id?: boolean
    student_id?: boolean
    grade?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["completedCourse"]>

  export type CompletedCourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    course_id?: boolean
    student_id?: boolean
    grade?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["completedCourse"]>

  export type CompletedCourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    course_id?: boolean
    student_id?: boolean
    grade?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["completedCourse"]>

  export type CompletedCourseSelectScalar = {
    course_id?: boolean
    student_id?: boolean
    grade?: boolean
  }

  export type CompletedCourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"course_id" | "student_id" | "grade", ExtArgs["result"]["completedCourse"]>
  export type CompletedCourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type CompletedCourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type CompletedCourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $CompletedCoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompletedCourse"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      course_id: number
      student_id: string
      grade: string
    }, ExtArgs["result"]["completedCourse"]>
    composites: {}
  }

  type CompletedCourseGetPayload<S extends boolean | null | undefined | CompletedCourseDefaultArgs> = $Result.GetResult<Prisma.$CompletedCoursePayload, S>

  type CompletedCourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompletedCourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompletedCourseCountAggregateInputType | true
    }

  export interface CompletedCourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompletedCourse'], meta: { name: 'CompletedCourse' } }
    /**
     * Find zero or one CompletedCourse that matches the filter.
     * @param {CompletedCourseFindUniqueArgs} args - Arguments to find a CompletedCourse
     * @example
     * // Get one CompletedCourse
     * const completedCourse = await prisma.completedCourse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompletedCourseFindUniqueArgs>(args: SelectSubset<T, CompletedCourseFindUniqueArgs<ExtArgs>>): Prisma__CompletedCourseClient<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CompletedCourse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompletedCourseFindUniqueOrThrowArgs} args - Arguments to find a CompletedCourse
     * @example
     * // Get one CompletedCourse
     * const completedCourse = await prisma.completedCourse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompletedCourseFindUniqueOrThrowArgs>(args: SelectSubset<T, CompletedCourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompletedCourseClient<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompletedCourse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedCourseFindFirstArgs} args - Arguments to find a CompletedCourse
     * @example
     * // Get one CompletedCourse
     * const completedCourse = await prisma.completedCourse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompletedCourseFindFirstArgs>(args?: SelectSubset<T, CompletedCourseFindFirstArgs<ExtArgs>>): Prisma__CompletedCourseClient<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompletedCourse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedCourseFindFirstOrThrowArgs} args - Arguments to find a CompletedCourse
     * @example
     * // Get one CompletedCourse
     * const completedCourse = await prisma.completedCourse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompletedCourseFindFirstOrThrowArgs>(args?: SelectSubset<T, CompletedCourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompletedCourseClient<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CompletedCourses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedCourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompletedCourses
     * const completedCourses = await prisma.completedCourse.findMany()
     * 
     * // Get first 10 CompletedCourses
     * const completedCourses = await prisma.completedCourse.findMany({ take: 10 })
     * 
     * // Only select the `course_id`
     * const completedCourseWithCourse_idOnly = await prisma.completedCourse.findMany({ select: { course_id: true } })
     * 
     */
    findMany<T extends CompletedCourseFindManyArgs>(args?: SelectSubset<T, CompletedCourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CompletedCourse.
     * @param {CompletedCourseCreateArgs} args - Arguments to create a CompletedCourse.
     * @example
     * // Create one CompletedCourse
     * const CompletedCourse = await prisma.completedCourse.create({
     *   data: {
     *     // ... data to create a CompletedCourse
     *   }
     * })
     * 
     */
    create<T extends CompletedCourseCreateArgs>(args: SelectSubset<T, CompletedCourseCreateArgs<ExtArgs>>): Prisma__CompletedCourseClient<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CompletedCourses.
     * @param {CompletedCourseCreateManyArgs} args - Arguments to create many CompletedCourses.
     * @example
     * // Create many CompletedCourses
     * const completedCourse = await prisma.completedCourse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompletedCourseCreateManyArgs>(args?: SelectSubset<T, CompletedCourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompletedCourses and returns the data saved in the database.
     * @param {CompletedCourseCreateManyAndReturnArgs} args - Arguments to create many CompletedCourses.
     * @example
     * // Create many CompletedCourses
     * const completedCourse = await prisma.completedCourse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompletedCourses and only return the `course_id`
     * const completedCourseWithCourse_idOnly = await prisma.completedCourse.createManyAndReturn({
     *   select: { course_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompletedCourseCreateManyAndReturnArgs>(args?: SelectSubset<T, CompletedCourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CompletedCourse.
     * @param {CompletedCourseDeleteArgs} args - Arguments to delete one CompletedCourse.
     * @example
     * // Delete one CompletedCourse
     * const CompletedCourse = await prisma.completedCourse.delete({
     *   where: {
     *     // ... filter to delete one CompletedCourse
     *   }
     * })
     * 
     */
    delete<T extends CompletedCourseDeleteArgs>(args: SelectSubset<T, CompletedCourseDeleteArgs<ExtArgs>>): Prisma__CompletedCourseClient<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CompletedCourse.
     * @param {CompletedCourseUpdateArgs} args - Arguments to update one CompletedCourse.
     * @example
     * // Update one CompletedCourse
     * const completedCourse = await prisma.completedCourse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompletedCourseUpdateArgs>(args: SelectSubset<T, CompletedCourseUpdateArgs<ExtArgs>>): Prisma__CompletedCourseClient<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CompletedCourses.
     * @param {CompletedCourseDeleteManyArgs} args - Arguments to filter CompletedCourses to delete.
     * @example
     * // Delete a few CompletedCourses
     * const { count } = await prisma.completedCourse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompletedCourseDeleteManyArgs>(args?: SelectSubset<T, CompletedCourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompletedCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedCourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompletedCourses
     * const completedCourse = await prisma.completedCourse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompletedCourseUpdateManyArgs>(args: SelectSubset<T, CompletedCourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompletedCourses and returns the data updated in the database.
     * @param {CompletedCourseUpdateManyAndReturnArgs} args - Arguments to update many CompletedCourses.
     * @example
     * // Update many CompletedCourses
     * const completedCourse = await prisma.completedCourse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CompletedCourses and only return the `course_id`
     * const completedCourseWithCourse_idOnly = await prisma.completedCourse.updateManyAndReturn({
     *   select: { course_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompletedCourseUpdateManyAndReturnArgs>(args: SelectSubset<T, CompletedCourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CompletedCourse.
     * @param {CompletedCourseUpsertArgs} args - Arguments to update or create a CompletedCourse.
     * @example
     * // Update or create a CompletedCourse
     * const completedCourse = await prisma.completedCourse.upsert({
     *   create: {
     *     // ... data to create a CompletedCourse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompletedCourse we want to update
     *   }
     * })
     */
    upsert<T extends CompletedCourseUpsertArgs>(args: SelectSubset<T, CompletedCourseUpsertArgs<ExtArgs>>): Prisma__CompletedCourseClient<$Result.GetResult<Prisma.$CompletedCoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CompletedCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedCourseCountArgs} args - Arguments to filter CompletedCourses to count.
     * @example
     * // Count the number of CompletedCourses
     * const count = await prisma.completedCourse.count({
     *   where: {
     *     // ... the filter for the CompletedCourses we want to count
     *   }
     * })
    **/
    count<T extends CompletedCourseCountArgs>(
      args?: Subset<T, CompletedCourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompletedCourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompletedCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedCourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompletedCourseAggregateArgs>(args: Subset<T, CompletedCourseAggregateArgs>): Prisma.PrismaPromise<GetCompletedCourseAggregateType<T>>

    /**
     * Group by CompletedCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedCourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompletedCourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompletedCourseGroupByArgs['orderBy'] }
        : { orderBy?: CompletedCourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompletedCourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompletedCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompletedCourse model
   */
  readonly fields: CompletedCourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompletedCourse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompletedCourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompletedCourse model
   */
  interface CompletedCourseFieldRefs {
    readonly course_id: FieldRef<"CompletedCourse", 'Int'>
    readonly student_id: FieldRef<"CompletedCourse", 'String'>
    readonly grade: FieldRef<"CompletedCourse", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CompletedCourse findUnique
   */
  export type CompletedCourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    /**
     * Filter, which CompletedCourse to fetch.
     */
    where: CompletedCourseWhereUniqueInput
  }

  /**
   * CompletedCourse findUniqueOrThrow
   */
  export type CompletedCourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    /**
     * Filter, which CompletedCourse to fetch.
     */
    where: CompletedCourseWhereUniqueInput
  }

  /**
   * CompletedCourse findFirst
   */
  export type CompletedCourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    /**
     * Filter, which CompletedCourse to fetch.
     */
    where?: CompletedCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompletedCourses to fetch.
     */
    orderBy?: CompletedCourseOrderByWithRelationInput | CompletedCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompletedCourses.
     */
    cursor?: CompletedCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompletedCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompletedCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompletedCourses.
     */
    distinct?: CompletedCourseScalarFieldEnum | CompletedCourseScalarFieldEnum[]
  }

  /**
   * CompletedCourse findFirstOrThrow
   */
  export type CompletedCourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    /**
     * Filter, which CompletedCourse to fetch.
     */
    where?: CompletedCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompletedCourses to fetch.
     */
    orderBy?: CompletedCourseOrderByWithRelationInput | CompletedCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompletedCourses.
     */
    cursor?: CompletedCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompletedCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompletedCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompletedCourses.
     */
    distinct?: CompletedCourseScalarFieldEnum | CompletedCourseScalarFieldEnum[]
  }

  /**
   * CompletedCourse findMany
   */
  export type CompletedCourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    /**
     * Filter, which CompletedCourses to fetch.
     */
    where?: CompletedCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompletedCourses to fetch.
     */
    orderBy?: CompletedCourseOrderByWithRelationInput | CompletedCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompletedCourses.
     */
    cursor?: CompletedCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompletedCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompletedCourses.
     */
    skip?: number
    distinct?: CompletedCourseScalarFieldEnum | CompletedCourseScalarFieldEnum[]
  }

  /**
   * CompletedCourse create
   */
  export type CompletedCourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    /**
     * The data needed to create a CompletedCourse.
     */
    data: XOR<CompletedCourseCreateInput, CompletedCourseUncheckedCreateInput>
  }

  /**
   * CompletedCourse createMany
   */
  export type CompletedCourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompletedCourses.
     */
    data: CompletedCourseCreateManyInput | CompletedCourseCreateManyInput[]
  }

  /**
   * CompletedCourse createManyAndReturn
   */
  export type CompletedCourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * The data used to create many CompletedCourses.
     */
    data: CompletedCourseCreateManyInput | CompletedCourseCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompletedCourse update
   */
  export type CompletedCourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    /**
     * The data needed to update a CompletedCourse.
     */
    data: XOR<CompletedCourseUpdateInput, CompletedCourseUncheckedUpdateInput>
    /**
     * Choose, which CompletedCourse to update.
     */
    where: CompletedCourseWhereUniqueInput
  }

  /**
   * CompletedCourse updateMany
   */
  export type CompletedCourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompletedCourses.
     */
    data: XOR<CompletedCourseUpdateManyMutationInput, CompletedCourseUncheckedUpdateManyInput>
    /**
     * Filter which CompletedCourses to update
     */
    where?: CompletedCourseWhereInput
    /**
     * Limit how many CompletedCourses to update.
     */
    limit?: number
  }

  /**
   * CompletedCourse updateManyAndReturn
   */
  export type CompletedCourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * The data used to update CompletedCourses.
     */
    data: XOR<CompletedCourseUpdateManyMutationInput, CompletedCourseUncheckedUpdateManyInput>
    /**
     * Filter which CompletedCourses to update
     */
    where?: CompletedCourseWhereInput
    /**
     * Limit how many CompletedCourses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompletedCourse upsert
   */
  export type CompletedCourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    /**
     * The filter to search for the CompletedCourse to update in case it exists.
     */
    where: CompletedCourseWhereUniqueInput
    /**
     * In case the CompletedCourse found by the `where` argument doesn't exist, create a new CompletedCourse with this data.
     */
    create: XOR<CompletedCourseCreateInput, CompletedCourseUncheckedCreateInput>
    /**
     * In case the CompletedCourse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompletedCourseUpdateInput, CompletedCourseUncheckedUpdateInput>
  }

  /**
   * CompletedCourse delete
   */
  export type CompletedCourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
    /**
     * Filter which CompletedCourse to delete.
     */
    where: CompletedCourseWhereUniqueInput
  }

  /**
   * CompletedCourse deleteMany
   */
  export type CompletedCourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompletedCourses to delete
     */
    where?: CompletedCourseWhereInput
    /**
     * Limit how many CompletedCourses to delete.
     */
    limit?: number
  }

  /**
   * CompletedCourse without action
   */
  export type CompletedCourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedCourse
     */
    select?: CompletedCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompletedCourse
     */
    omit?: CompletedCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompletedCourseInclude<ExtArgs> | null
  }


  /**
   * Model PendingCourse
   */

  export type AggregatePendingCourse = {
    _count: PendingCourseCountAggregateOutputType | null
    _avg: PendingCourseAvgAggregateOutputType | null
    _sum: PendingCourseSumAggregateOutputType | null
    _min: PendingCourseMinAggregateOutputType | null
    _max: PendingCourseMaxAggregateOutputType | null
  }

  export type PendingCourseAvgAggregateOutputType = {
    course_id: number | null
  }

  export type PendingCourseSumAggregateOutputType = {
    course_id: number | null
  }

  export type PendingCourseMinAggregateOutputType = {
    course_id: number | null
    student_id: string | null
    instructor_id: string | null
    approved: boolean | null
  }

  export type PendingCourseMaxAggregateOutputType = {
    course_id: number | null
    student_id: string | null
    instructor_id: string | null
    approved: boolean | null
  }

  export type PendingCourseCountAggregateOutputType = {
    course_id: number
    student_id: number
    instructor_id: number
    approved: number
    _all: number
  }


  export type PendingCourseAvgAggregateInputType = {
    course_id?: true
  }

  export type PendingCourseSumAggregateInputType = {
    course_id?: true
  }

  export type PendingCourseMinAggregateInputType = {
    course_id?: true
    student_id?: true
    instructor_id?: true
    approved?: true
  }

  export type PendingCourseMaxAggregateInputType = {
    course_id?: true
    student_id?: true
    instructor_id?: true
    approved?: true
  }

  export type PendingCourseCountAggregateInputType = {
    course_id?: true
    student_id?: true
    instructor_id?: true
    approved?: true
    _all?: true
  }

  export type PendingCourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PendingCourse to aggregate.
     */
    where?: PendingCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PendingCourses to fetch.
     */
    orderBy?: PendingCourseOrderByWithRelationInput | PendingCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PendingCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PendingCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PendingCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PendingCourses
    **/
    _count?: true | PendingCourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PendingCourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PendingCourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PendingCourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PendingCourseMaxAggregateInputType
  }

  export type GetPendingCourseAggregateType<T extends PendingCourseAggregateArgs> = {
        [P in keyof T & keyof AggregatePendingCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePendingCourse[P]>
      : GetScalarType<T[P], AggregatePendingCourse[P]>
  }




  export type PendingCourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PendingCourseWhereInput
    orderBy?: PendingCourseOrderByWithAggregationInput | PendingCourseOrderByWithAggregationInput[]
    by: PendingCourseScalarFieldEnum[] | PendingCourseScalarFieldEnum
    having?: PendingCourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PendingCourseCountAggregateInputType | true
    _avg?: PendingCourseAvgAggregateInputType
    _sum?: PendingCourseSumAggregateInputType
    _min?: PendingCourseMinAggregateInputType
    _max?: PendingCourseMaxAggregateInputType
  }

  export type PendingCourseGroupByOutputType = {
    course_id: number
    student_id: string
    instructor_id: string
    approved: boolean
    _count: PendingCourseCountAggregateOutputType | null
    _avg: PendingCourseAvgAggregateOutputType | null
    _sum: PendingCourseSumAggregateOutputType | null
    _min: PendingCourseMinAggregateOutputType | null
    _max: PendingCourseMaxAggregateOutputType | null
  }

  type GetPendingCourseGroupByPayload<T extends PendingCourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PendingCourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PendingCourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PendingCourseGroupByOutputType[P]>
            : GetScalarType<T[P], PendingCourseGroupByOutputType[P]>
        }
      >
    >


  export type PendingCourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    course_id?: boolean
    student_id?: boolean
    instructor_id?: boolean
    approved?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    instructor?: boolean | InstructorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pendingCourse"]>

  export type PendingCourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    course_id?: boolean
    student_id?: boolean
    instructor_id?: boolean
    approved?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    instructor?: boolean | InstructorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pendingCourse"]>

  export type PendingCourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    course_id?: boolean
    student_id?: boolean
    instructor_id?: boolean
    approved?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    instructor?: boolean | InstructorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pendingCourse"]>

  export type PendingCourseSelectScalar = {
    course_id?: boolean
    student_id?: boolean
    instructor_id?: boolean
    approved?: boolean
  }

  export type PendingCourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"course_id" | "student_id" | "instructor_id" | "approved", ExtArgs["result"]["pendingCourse"]>
  export type PendingCourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    instructor?: boolean | InstructorDefaultArgs<ExtArgs>
  }
  export type PendingCourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    instructor?: boolean | InstructorDefaultArgs<ExtArgs>
  }
  export type PendingCourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    instructor?: boolean | InstructorDefaultArgs<ExtArgs>
  }

  export type $PendingCoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PendingCourse"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      student: Prisma.$StudentPayload<ExtArgs>
      instructor: Prisma.$InstructorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      course_id: number
      student_id: string
      instructor_id: string
      approved: boolean
    }, ExtArgs["result"]["pendingCourse"]>
    composites: {}
  }

  type PendingCourseGetPayload<S extends boolean | null | undefined | PendingCourseDefaultArgs> = $Result.GetResult<Prisma.$PendingCoursePayload, S>

  type PendingCourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PendingCourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PendingCourseCountAggregateInputType | true
    }

  export interface PendingCourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PendingCourse'], meta: { name: 'PendingCourse' } }
    /**
     * Find zero or one PendingCourse that matches the filter.
     * @param {PendingCourseFindUniqueArgs} args - Arguments to find a PendingCourse
     * @example
     * // Get one PendingCourse
     * const pendingCourse = await prisma.pendingCourse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PendingCourseFindUniqueArgs>(args: SelectSubset<T, PendingCourseFindUniqueArgs<ExtArgs>>): Prisma__PendingCourseClient<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PendingCourse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PendingCourseFindUniqueOrThrowArgs} args - Arguments to find a PendingCourse
     * @example
     * // Get one PendingCourse
     * const pendingCourse = await prisma.pendingCourse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PendingCourseFindUniqueOrThrowArgs>(args: SelectSubset<T, PendingCourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PendingCourseClient<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PendingCourse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingCourseFindFirstArgs} args - Arguments to find a PendingCourse
     * @example
     * // Get one PendingCourse
     * const pendingCourse = await prisma.pendingCourse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PendingCourseFindFirstArgs>(args?: SelectSubset<T, PendingCourseFindFirstArgs<ExtArgs>>): Prisma__PendingCourseClient<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PendingCourse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingCourseFindFirstOrThrowArgs} args - Arguments to find a PendingCourse
     * @example
     * // Get one PendingCourse
     * const pendingCourse = await prisma.pendingCourse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PendingCourseFindFirstOrThrowArgs>(args?: SelectSubset<T, PendingCourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__PendingCourseClient<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PendingCourses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingCourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PendingCourses
     * const pendingCourses = await prisma.pendingCourse.findMany()
     * 
     * // Get first 10 PendingCourses
     * const pendingCourses = await prisma.pendingCourse.findMany({ take: 10 })
     * 
     * // Only select the `course_id`
     * const pendingCourseWithCourse_idOnly = await prisma.pendingCourse.findMany({ select: { course_id: true } })
     * 
     */
    findMany<T extends PendingCourseFindManyArgs>(args?: SelectSubset<T, PendingCourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PendingCourse.
     * @param {PendingCourseCreateArgs} args - Arguments to create a PendingCourse.
     * @example
     * // Create one PendingCourse
     * const PendingCourse = await prisma.pendingCourse.create({
     *   data: {
     *     // ... data to create a PendingCourse
     *   }
     * })
     * 
     */
    create<T extends PendingCourseCreateArgs>(args: SelectSubset<T, PendingCourseCreateArgs<ExtArgs>>): Prisma__PendingCourseClient<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PendingCourses.
     * @param {PendingCourseCreateManyArgs} args - Arguments to create many PendingCourses.
     * @example
     * // Create many PendingCourses
     * const pendingCourse = await prisma.pendingCourse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PendingCourseCreateManyArgs>(args?: SelectSubset<T, PendingCourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PendingCourses and returns the data saved in the database.
     * @param {PendingCourseCreateManyAndReturnArgs} args - Arguments to create many PendingCourses.
     * @example
     * // Create many PendingCourses
     * const pendingCourse = await prisma.pendingCourse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PendingCourses and only return the `course_id`
     * const pendingCourseWithCourse_idOnly = await prisma.pendingCourse.createManyAndReturn({
     *   select: { course_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PendingCourseCreateManyAndReturnArgs>(args?: SelectSubset<T, PendingCourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PendingCourse.
     * @param {PendingCourseDeleteArgs} args - Arguments to delete one PendingCourse.
     * @example
     * // Delete one PendingCourse
     * const PendingCourse = await prisma.pendingCourse.delete({
     *   where: {
     *     // ... filter to delete one PendingCourse
     *   }
     * })
     * 
     */
    delete<T extends PendingCourseDeleteArgs>(args: SelectSubset<T, PendingCourseDeleteArgs<ExtArgs>>): Prisma__PendingCourseClient<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PendingCourse.
     * @param {PendingCourseUpdateArgs} args - Arguments to update one PendingCourse.
     * @example
     * // Update one PendingCourse
     * const pendingCourse = await prisma.pendingCourse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PendingCourseUpdateArgs>(args: SelectSubset<T, PendingCourseUpdateArgs<ExtArgs>>): Prisma__PendingCourseClient<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PendingCourses.
     * @param {PendingCourseDeleteManyArgs} args - Arguments to filter PendingCourses to delete.
     * @example
     * // Delete a few PendingCourses
     * const { count } = await prisma.pendingCourse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PendingCourseDeleteManyArgs>(args?: SelectSubset<T, PendingCourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PendingCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingCourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PendingCourses
     * const pendingCourse = await prisma.pendingCourse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PendingCourseUpdateManyArgs>(args: SelectSubset<T, PendingCourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PendingCourses and returns the data updated in the database.
     * @param {PendingCourseUpdateManyAndReturnArgs} args - Arguments to update many PendingCourses.
     * @example
     * // Update many PendingCourses
     * const pendingCourse = await prisma.pendingCourse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PendingCourses and only return the `course_id`
     * const pendingCourseWithCourse_idOnly = await prisma.pendingCourse.updateManyAndReturn({
     *   select: { course_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PendingCourseUpdateManyAndReturnArgs>(args: SelectSubset<T, PendingCourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PendingCourse.
     * @param {PendingCourseUpsertArgs} args - Arguments to update or create a PendingCourse.
     * @example
     * // Update or create a PendingCourse
     * const pendingCourse = await prisma.pendingCourse.upsert({
     *   create: {
     *     // ... data to create a PendingCourse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PendingCourse we want to update
     *   }
     * })
     */
    upsert<T extends PendingCourseUpsertArgs>(args: SelectSubset<T, PendingCourseUpsertArgs<ExtArgs>>): Prisma__PendingCourseClient<$Result.GetResult<Prisma.$PendingCoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PendingCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingCourseCountArgs} args - Arguments to filter PendingCourses to count.
     * @example
     * // Count the number of PendingCourses
     * const count = await prisma.pendingCourse.count({
     *   where: {
     *     // ... the filter for the PendingCourses we want to count
     *   }
     * })
    **/
    count<T extends PendingCourseCountArgs>(
      args?: Subset<T, PendingCourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PendingCourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PendingCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingCourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PendingCourseAggregateArgs>(args: Subset<T, PendingCourseAggregateArgs>): Prisma.PrismaPromise<GetPendingCourseAggregateType<T>>

    /**
     * Group by PendingCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendingCourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PendingCourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PendingCourseGroupByArgs['orderBy'] }
        : { orderBy?: PendingCourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PendingCourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPendingCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PendingCourse model
   */
  readonly fields: PendingCourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PendingCourse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PendingCourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    instructor<T extends InstructorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstructorDefaultArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PendingCourse model
   */
  interface PendingCourseFieldRefs {
    readonly course_id: FieldRef<"PendingCourse", 'Int'>
    readonly student_id: FieldRef<"PendingCourse", 'String'>
    readonly instructor_id: FieldRef<"PendingCourse", 'String'>
    readonly approved: FieldRef<"PendingCourse", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * PendingCourse findUnique
   */
  export type PendingCourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    /**
     * Filter, which PendingCourse to fetch.
     */
    where: PendingCourseWhereUniqueInput
  }

  /**
   * PendingCourse findUniqueOrThrow
   */
  export type PendingCourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    /**
     * Filter, which PendingCourse to fetch.
     */
    where: PendingCourseWhereUniqueInput
  }

  /**
   * PendingCourse findFirst
   */
  export type PendingCourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    /**
     * Filter, which PendingCourse to fetch.
     */
    where?: PendingCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PendingCourses to fetch.
     */
    orderBy?: PendingCourseOrderByWithRelationInput | PendingCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PendingCourses.
     */
    cursor?: PendingCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PendingCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PendingCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PendingCourses.
     */
    distinct?: PendingCourseScalarFieldEnum | PendingCourseScalarFieldEnum[]
  }

  /**
   * PendingCourse findFirstOrThrow
   */
  export type PendingCourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    /**
     * Filter, which PendingCourse to fetch.
     */
    where?: PendingCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PendingCourses to fetch.
     */
    orderBy?: PendingCourseOrderByWithRelationInput | PendingCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PendingCourses.
     */
    cursor?: PendingCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PendingCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PendingCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PendingCourses.
     */
    distinct?: PendingCourseScalarFieldEnum | PendingCourseScalarFieldEnum[]
  }

  /**
   * PendingCourse findMany
   */
  export type PendingCourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    /**
     * Filter, which PendingCourses to fetch.
     */
    where?: PendingCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PendingCourses to fetch.
     */
    orderBy?: PendingCourseOrderByWithRelationInput | PendingCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PendingCourses.
     */
    cursor?: PendingCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PendingCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PendingCourses.
     */
    skip?: number
    distinct?: PendingCourseScalarFieldEnum | PendingCourseScalarFieldEnum[]
  }

  /**
   * PendingCourse create
   */
  export type PendingCourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    /**
     * The data needed to create a PendingCourse.
     */
    data: XOR<PendingCourseCreateInput, PendingCourseUncheckedCreateInput>
  }

  /**
   * PendingCourse createMany
   */
  export type PendingCourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PendingCourses.
     */
    data: PendingCourseCreateManyInput | PendingCourseCreateManyInput[]
  }

  /**
   * PendingCourse createManyAndReturn
   */
  export type PendingCourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * The data used to create many PendingCourses.
     */
    data: PendingCourseCreateManyInput | PendingCourseCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PendingCourse update
   */
  export type PendingCourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    /**
     * The data needed to update a PendingCourse.
     */
    data: XOR<PendingCourseUpdateInput, PendingCourseUncheckedUpdateInput>
    /**
     * Choose, which PendingCourse to update.
     */
    where: PendingCourseWhereUniqueInput
  }

  /**
   * PendingCourse updateMany
   */
  export type PendingCourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PendingCourses.
     */
    data: XOR<PendingCourseUpdateManyMutationInput, PendingCourseUncheckedUpdateManyInput>
    /**
     * Filter which PendingCourses to update
     */
    where?: PendingCourseWhereInput
    /**
     * Limit how many PendingCourses to update.
     */
    limit?: number
  }

  /**
   * PendingCourse updateManyAndReturn
   */
  export type PendingCourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * The data used to update PendingCourses.
     */
    data: XOR<PendingCourseUpdateManyMutationInput, PendingCourseUncheckedUpdateManyInput>
    /**
     * Filter which PendingCourses to update
     */
    where?: PendingCourseWhereInput
    /**
     * Limit how many PendingCourses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PendingCourse upsert
   */
  export type PendingCourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    /**
     * The filter to search for the PendingCourse to update in case it exists.
     */
    where: PendingCourseWhereUniqueInput
    /**
     * In case the PendingCourse found by the `where` argument doesn't exist, create a new PendingCourse with this data.
     */
    create: XOR<PendingCourseCreateInput, PendingCourseUncheckedCreateInput>
    /**
     * In case the PendingCourse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PendingCourseUpdateInput, PendingCourseUncheckedUpdateInput>
  }

  /**
   * PendingCourse delete
   */
  export type PendingCourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
    /**
     * Filter which PendingCourse to delete.
     */
    where: PendingCourseWhereUniqueInput
  }

  /**
   * PendingCourse deleteMany
   */
  export type PendingCourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PendingCourses to delete
     */
    where?: PendingCourseWhereInput
    /**
     * Limit how many PendingCourses to delete.
     */
    limit?: number
  }

  /**
   * PendingCourse without action
   */
  export type PendingCourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PendingCourse
     */
    select?: PendingCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PendingCourse
     */
    omit?: PendingCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PendingCourseInclude<ExtArgs> | null
  }


  /**
   * Model Prerequisite
   */

  export type AggregatePrerequisite = {
    _count: PrerequisiteCountAggregateOutputType | null
    _avg: PrerequisiteAvgAggregateOutputType | null
    _sum: PrerequisiteSumAggregateOutputType | null
    _min: PrerequisiteMinAggregateOutputType | null
    _max: PrerequisiteMaxAggregateOutputType | null
  }

  export type PrerequisiteAvgAggregateOutputType = {
    course_id: number | null
    prerequisite_id: number | null
  }

  export type PrerequisiteSumAggregateOutputType = {
    course_id: number | null
    prerequisite_id: number | null
  }

  export type PrerequisiteMinAggregateOutputType = {
    course_id: number | null
    prerequisite_id: number | null
  }

  export type PrerequisiteMaxAggregateOutputType = {
    course_id: number | null
    prerequisite_id: number | null
  }

  export type PrerequisiteCountAggregateOutputType = {
    course_id: number
    prerequisite_id: number
    _all: number
  }


  export type PrerequisiteAvgAggregateInputType = {
    course_id?: true
    prerequisite_id?: true
  }

  export type PrerequisiteSumAggregateInputType = {
    course_id?: true
    prerequisite_id?: true
  }

  export type PrerequisiteMinAggregateInputType = {
    course_id?: true
    prerequisite_id?: true
  }

  export type PrerequisiteMaxAggregateInputType = {
    course_id?: true
    prerequisite_id?: true
  }

  export type PrerequisiteCountAggregateInputType = {
    course_id?: true
    prerequisite_id?: true
    _all?: true
  }

  export type PrerequisiteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prerequisite to aggregate.
     */
    where?: PrerequisiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prerequisites to fetch.
     */
    orderBy?: PrerequisiteOrderByWithRelationInput | PrerequisiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrerequisiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prerequisites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prerequisites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Prerequisites
    **/
    _count?: true | PrerequisiteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrerequisiteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrerequisiteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrerequisiteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrerequisiteMaxAggregateInputType
  }

  export type GetPrerequisiteAggregateType<T extends PrerequisiteAggregateArgs> = {
        [P in keyof T & keyof AggregatePrerequisite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrerequisite[P]>
      : GetScalarType<T[P], AggregatePrerequisite[P]>
  }




  export type PrerequisiteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrerequisiteWhereInput
    orderBy?: PrerequisiteOrderByWithAggregationInput | PrerequisiteOrderByWithAggregationInput[]
    by: PrerequisiteScalarFieldEnum[] | PrerequisiteScalarFieldEnum
    having?: PrerequisiteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrerequisiteCountAggregateInputType | true
    _avg?: PrerequisiteAvgAggregateInputType
    _sum?: PrerequisiteSumAggregateInputType
    _min?: PrerequisiteMinAggregateInputType
    _max?: PrerequisiteMaxAggregateInputType
  }

  export type PrerequisiteGroupByOutputType = {
    course_id: number
    prerequisite_id: number
    _count: PrerequisiteCountAggregateOutputType | null
    _avg: PrerequisiteAvgAggregateOutputType | null
    _sum: PrerequisiteSumAggregateOutputType | null
    _min: PrerequisiteMinAggregateOutputType | null
    _max: PrerequisiteMaxAggregateOutputType | null
  }

  type GetPrerequisiteGroupByPayload<T extends PrerequisiteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrerequisiteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrerequisiteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrerequisiteGroupByOutputType[P]>
            : GetScalarType<T[P], PrerequisiteGroupByOutputType[P]>
        }
      >
    >


  export type PrerequisiteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    course_id?: boolean
    prerequisite_id?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    prerequisiteCourse?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prerequisite"]>

  export type PrerequisiteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    course_id?: boolean
    prerequisite_id?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    prerequisiteCourse?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prerequisite"]>

  export type PrerequisiteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    course_id?: boolean
    prerequisite_id?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    prerequisiteCourse?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prerequisite"]>

  export type PrerequisiteSelectScalar = {
    course_id?: boolean
    prerequisite_id?: boolean
  }

  export type PrerequisiteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"course_id" | "prerequisite_id", ExtArgs["result"]["prerequisite"]>
  export type PrerequisiteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    prerequisiteCourse?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type PrerequisiteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    prerequisiteCourse?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type PrerequisiteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    prerequisiteCourse?: boolean | CourseDefaultArgs<ExtArgs>
  }

  export type $PrerequisitePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Prerequisite"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      prerequisiteCourse: Prisma.$CoursePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      course_id: number
      prerequisite_id: number
    }, ExtArgs["result"]["prerequisite"]>
    composites: {}
  }

  type PrerequisiteGetPayload<S extends boolean | null | undefined | PrerequisiteDefaultArgs> = $Result.GetResult<Prisma.$PrerequisitePayload, S>

  type PrerequisiteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PrerequisiteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PrerequisiteCountAggregateInputType | true
    }

  export interface PrerequisiteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Prerequisite'], meta: { name: 'Prerequisite' } }
    /**
     * Find zero or one Prerequisite that matches the filter.
     * @param {PrerequisiteFindUniqueArgs} args - Arguments to find a Prerequisite
     * @example
     * // Get one Prerequisite
     * const prerequisite = await prisma.prerequisite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PrerequisiteFindUniqueArgs>(args: SelectSubset<T, PrerequisiteFindUniqueArgs<ExtArgs>>): Prisma__PrerequisiteClient<$Result.GetResult<Prisma.$PrerequisitePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Prerequisite that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PrerequisiteFindUniqueOrThrowArgs} args - Arguments to find a Prerequisite
     * @example
     * // Get one Prerequisite
     * const prerequisite = await prisma.prerequisite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PrerequisiteFindUniqueOrThrowArgs>(args: SelectSubset<T, PrerequisiteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PrerequisiteClient<$Result.GetResult<Prisma.$PrerequisitePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Prerequisite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrerequisiteFindFirstArgs} args - Arguments to find a Prerequisite
     * @example
     * // Get one Prerequisite
     * const prerequisite = await prisma.prerequisite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PrerequisiteFindFirstArgs>(args?: SelectSubset<T, PrerequisiteFindFirstArgs<ExtArgs>>): Prisma__PrerequisiteClient<$Result.GetResult<Prisma.$PrerequisitePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Prerequisite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrerequisiteFindFirstOrThrowArgs} args - Arguments to find a Prerequisite
     * @example
     * // Get one Prerequisite
     * const prerequisite = await prisma.prerequisite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PrerequisiteFindFirstOrThrowArgs>(args?: SelectSubset<T, PrerequisiteFindFirstOrThrowArgs<ExtArgs>>): Prisma__PrerequisiteClient<$Result.GetResult<Prisma.$PrerequisitePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Prerequisites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrerequisiteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Prerequisites
     * const prerequisites = await prisma.prerequisite.findMany()
     * 
     * // Get first 10 Prerequisites
     * const prerequisites = await prisma.prerequisite.findMany({ take: 10 })
     * 
     * // Only select the `course_id`
     * const prerequisiteWithCourse_idOnly = await prisma.prerequisite.findMany({ select: { course_id: true } })
     * 
     */
    findMany<T extends PrerequisiteFindManyArgs>(args?: SelectSubset<T, PrerequisiteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrerequisitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Prerequisite.
     * @param {PrerequisiteCreateArgs} args - Arguments to create a Prerequisite.
     * @example
     * // Create one Prerequisite
     * const Prerequisite = await prisma.prerequisite.create({
     *   data: {
     *     // ... data to create a Prerequisite
     *   }
     * })
     * 
     */
    create<T extends PrerequisiteCreateArgs>(args: SelectSubset<T, PrerequisiteCreateArgs<ExtArgs>>): Prisma__PrerequisiteClient<$Result.GetResult<Prisma.$PrerequisitePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Prerequisites.
     * @param {PrerequisiteCreateManyArgs} args - Arguments to create many Prerequisites.
     * @example
     * // Create many Prerequisites
     * const prerequisite = await prisma.prerequisite.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PrerequisiteCreateManyArgs>(args?: SelectSubset<T, PrerequisiteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Prerequisites and returns the data saved in the database.
     * @param {PrerequisiteCreateManyAndReturnArgs} args - Arguments to create many Prerequisites.
     * @example
     * // Create many Prerequisites
     * const prerequisite = await prisma.prerequisite.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Prerequisites and only return the `course_id`
     * const prerequisiteWithCourse_idOnly = await prisma.prerequisite.createManyAndReturn({
     *   select: { course_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PrerequisiteCreateManyAndReturnArgs>(args?: SelectSubset<T, PrerequisiteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrerequisitePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Prerequisite.
     * @param {PrerequisiteDeleteArgs} args - Arguments to delete one Prerequisite.
     * @example
     * // Delete one Prerequisite
     * const Prerequisite = await prisma.prerequisite.delete({
     *   where: {
     *     // ... filter to delete one Prerequisite
     *   }
     * })
     * 
     */
    delete<T extends PrerequisiteDeleteArgs>(args: SelectSubset<T, PrerequisiteDeleteArgs<ExtArgs>>): Prisma__PrerequisiteClient<$Result.GetResult<Prisma.$PrerequisitePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Prerequisite.
     * @param {PrerequisiteUpdateArgs} args - Arguments to update one Prerequisite.
     * @example
     * // Update one Prerequisite
     * const prerequisite = await prisma.prerequisite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PrerequisiteUpdateArgs>(args: SelectSubset<T, PrerequisiteUpdateArgs<ExtArgs>>): Prisma__PrerequisiteClient<$Result.GetResult<Prisma.$PrerequisitePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Prerequisites.
     * @param {PrerequisiteDeleteManyArgs} args - Arguments to filter Prerequisites to delete.
     * @example
     * // Delete a few Prerequisites
     * const { count } = await prisma.prerequisite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PrerequisiteDeleteManyArgs>(args?: SelectSubset<T, PrerequisiteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prerequisites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrerequisiteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Prerequisites
     * const prerequisite = await prisma.prerequisite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PrerequisiteUpdateManyArgs>(args: SelectSubset<T, PrerequisiteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prerequisites and returns the data updated in the database.
     * @param {PrerequisiteUpdateManyAndReturnArgs} args - Arguments to update many Prerequisites.
     * @example
     * // Update many Prerequisites
     * const prerequisite = await prisma.prerequisite.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Prerequisites and only return the `course_id`
     * const prerequisiteWithCourse_idOnly = await prisma.prerequisite.updateManyAndReturn({
     *   select: { course_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PrerequisiteUpdateManyAndReturnArgs>(args: SelectSubset<T, PrerequisiteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrerequisitePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Prerequisite.
     * @param {PrerequisiteUpsertArgs} args - Arguments to update or create a Prerequisite.
     * @example
     * // Update or create a Prerequisite
     * const prerequisite = await prisma.prerequisite.upsert({
     *   create: {
     *     // ... data to create a Prerequisite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Prerequisite we want to update
     *   }
     * })
     */
    upsert<T extends PrerequisiteUpsertArgs>(args: SelectSubset<T, PrerequisiteUpsertArgs<ExtArgs>>): Prisma__PrerequisiteClient<$Result.GetResult<Prisma.$PrerequisitePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Prerequisites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrerequisiteCountArgs} args - Arguments to filter Prerequisites to count.
     * @example
     * // Count the number of Prerequisites
     * const count = await prisma.prerequisite.count({
     *   where: {
     *     // ... the filter for the Prerequisites we want to count
     *   }
     * })
    **/
    count<T extends PrerequisiteCountArgs>(
      args?: Subset<T, PrerequisiteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrerequisiteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Prerequisite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrerequisiteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrerequisiteAggregateArgs>(args: Subset<T, PrerequisiteAggregateArgs>): Prisma.PrismaPromise<GetPrerequisiteAggregateType<T>>

    /**
     * Group by Prerequisite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrerequisiteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrerequisiteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrerequisiteGroupByArgs['orderBy'] }
        : { orderBy?: PrerequisiteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrerequisiteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrerequisiteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Prerequisite model
   */
  readonly fields: PrerequisiteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Prerequisite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrerequisiteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    prerequisiteCourse<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Prerequisite model
   */
  interface PrerequisiteFieldRefs {
    readonly course_id: FieldRef<"Prerequisite", 'Int'>
    readonly prerequisite_id: FieldRef<"Prerequisite", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Prerequisite findUnique
   */
  export type PrerequisiteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prerequisite
     */
    select?: PrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prerequisite
     */
    omit?: PrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrerequisiteInclude<ExtArgs> | null
    /**
     * Filter, which Prerequisite to fetch.
     */
    where: PrerequisiteWhereUniqueInput
  }

  /**
   * Prerequisite findUniqueOrThrow
   */
  export type PrerequisiteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prerequisite
     */
    select?: PrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prerequisite
     */
    omit?: PrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrerequisiteInclude<ExtArgs> | null
    /**
     * Filter, which Prerequisite to fetch.
     */
    where: PrerequisiteWhereUniqueInput
  }

  /**
   * Prerequisite findFirst
   */
  export type PrerequisiteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prerequisite
     */
    select?: PrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prerequisite
     */
    omit?: PrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrerequisiteInclude<ExtArgs> | null
    /**
     * Filter, which Prerequisite to fetch.
     */
    where?: PrerequisiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prerequisites to fetch.
     */
    orderBy?: PrerequisiteOrderByWithRelationInput | PrerequisiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prerequisites.
     */
    cursor?: PrerequisiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prerequisites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prerequisites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prerequisites.
     */
    distinct?: PrerequisiteScalarFieldEnum | PrerequisiteScalarFieldEnum[]
  }

  /**
   * Prerequisite findFirstOrThrow
   */
  export type PrerequisiteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prerequisite
     */
    select?: PrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prerequisite
     */
    omit?: PrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrerequisiteInclude<ExtArgs> | null
    /**
     * Filter, which Prerequisite to fetch.
     */
    where?: PrerequisiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prerequisites to fetch.
     */
    orderBy?: PrerequisiteOrderByWithRelationInput | PrerequisiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prerequisites.
     */
    cursor?: PrerequisiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prerequisites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prerequisites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prerequisites.
     */
    distinct?: PrerequisiteScalarFieldEnum | PrerequisiteScalarFieldEnum[]
  }

  /**
   * Prerequisite findMany
   */
  export type PrerequisiteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prerequisite
     */
    select?: PrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prerequisite
     */
    omit?: PrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrerequisiteInclude<ExtArgs> | null
    /**
     * Filter, which Prerequisites to fetch.
     */
    where?: PrerequisiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prerequisites to fetch.
     */
    orderBy?: PrerequisiteOrderByWithRelationInput | PrerequisiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Prerequisites.
     */
    cursor?: PrerequisiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prerequisites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prerequisites.
     */
    skip?: number
    distinct?: PrerequisiteScalarFieldEnum | PrerequisiteScalarFieldEnum[]
  }

  /**
   * Prerequisite create
   */
  export type PrerequisiteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prerequisite
     */
    select?: PrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prerequisite
     */
    omit?: PrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrerequisiteInclude<ExtArgs> | null
    /**
     * The data needed to create a Prerequisite.
     */
    data: XOR<PrerequisiteCreateInput, PrerequisiteUncheckedCreateInput>
  }

  /**
   * Prerequisite createMany
   */
  export type PrerequisiteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Prerequisites.
     */
    data: PrerequisiteCreateManyInput | PrerequisiteCreateManyInput[]
  }

  /**
   * Prerequisite createManyAndReturn
   */
  export type PrerequisiteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prerequisite
     */
    select?: PrerequisiteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Prerequisite
     */
    omit?: PrerequisiteOmit<ExtArgs> | null
    /**
     * The data used to create many Prerequisites.
     */
    data: PrerequisiteCreateManyInput | PrerequisiteCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrerequisiteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Prerequisite update
   */
  export type PrerequisiteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prerequisite
     */
    select?: PrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prerequisite
     */
    omit?: PrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrerequisiteInclude<ExtArgs> | null
    /**
     * The data needed to update a Prerequisite.
     */
    data: XOR<PrerequisiteUpdateInput, PrerequisiteUncheckedUpdateInput>
    /**
     * Choose, which Prerequisite to update.
     */
    where: PrerequisiteWhereUniqueInput
  }

  /**
   * Prerequisite updateMany
   */
  export type PrerequisiteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Prerequisites.
     */
    data: XOR<PrerequisiteUpdateManyMutationInput, PrerequisiteUncheckedUpdateManyInput>
    /**
     * Filter which Prerequisites to update
     */
    where?: PrerequisiteWhereInput
    /**
     * Limit how many Prerequisites to update.
     */
    limit?: number
  }

  /**
   * Prerequisite updateManyAndReturn
   */
  export type PrerequisiteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prerequisite
     */
    select?: PrerequisiteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Prerequisite
     */
    omit?: PrerequisiteOmit<ExtArgs> | null
    /**
     * The data used to update Prerequisites.
     */
    data: XOR<PrerequisiteUpdateManyMutationInput, PrerequisiteUncheckedUpdateManyInput>
    /**
     * Filter which Prerequisites to update
     */
    where?: PrerequisiteWhereInput
    /**
     * Limit how many Prerequisites to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrerequisiteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Prerequisite upsert
   */
  export type PrerequisiteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prerequisite
     */
    select?: PrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prerequisite
     */
    omit?: PrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrerequisiteInclude<ExtArgs> | null
    /**
     * The filter to search for the Prerequisite to update in case it exists.
     */
    where: PrerequisiteWhereUniqueInput
    /**
     * In case the Prerequisite found by the `where` argument doesn't exist, create a new Prerequisite with this data.
     */
    create: XOR<PrerequisiteCreateInput, PrerequisiteUncheckedCreateInput>
    /**
     * In case the Prerequisite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrerequisiteUpdateInput, PrerequisiteUncheckedUpdateInput>
  }

  /**
   * Prerequisite delete
   */
  export type PrerequisiteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prerequisite
     */
    select?: PrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prerequisite
     */
    omit?: PrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrerequisiteInclude<ExtArgs> | null
    /**
     * Filter which Prerequisite to delete.
     */
    where: PrerequisiteWhereUniqueInput
  }

  /**
   * Prerequisite deleteMany
   */
  export type PrerequisiteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prerequisites to delete
     */
    where?: PrerequisiteWhereInput
    /**
     * Limit how many Prerequisites to delete.
     */
    limit?: number
  }

  /**
   * Prerequisite without action
   */
  export type PrerequisiteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prerequisite
     */
    select?: PrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prerequisite
     */
    omit?: PrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrerequisiteInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const StudentScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const InstructorScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password'
  };

  export type InstructorScalarFieldEnum = (typeof InstructorScalarFieldEnum)[keyof typeof InstructorScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    course_id: 'course_id',
    course_name: 'course_name',
    course_description: 'course_description',
    category: 'category',
    status: 'status'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const InstructorCourseScalarFieldEnum: {
    capacity: 'capacity',
    status: 'status',
    course_id: 'course_id',
    instructor_id: 'instructor_id'
  };

  export type InstructorCourseScalarFieldEnum = (typeof InstructorCourseScalarFieldEnum)[keyof typeof InstructorCourseScalarFieldEnum]


  export const RegisteredStudentScalarFieldEnum: {
    instructor_course_course_id: 'instructor_course_course_id',
    instructor_course_instructor_id: 'instructor_course_instructor_id',
    student_id: 'student_id'
  };

  export type RegisteredStudentScalarFieldEnum = (typeof RegisteredStudentScalarFieldEnum)[keyof typeof RegisteredStudentScalarFieldEnum]


  export const CompletedCourseScalarFieldEnum: {
    course_id: 'course_id',
    student_id: 'student_id',
    grade: 'grade'
  };

  export type CompletedCourseScalarFieldEnum = (typeof CompletedCourseScalarFieldEnum)[keyof typeof CompletedCourseScalarFieldEnum]


  export const PendingCourseScalarFieldEnum: {
    course_id: 'course_id',
    student_id: 'student_id',
    instructor_id: 'instructor_id',
    approved: 'approved'
  };

  export type PendingCourseScalarFieldEnum = (typeof PendingCourseScalarFieldEnum)[keyof typeof PendingCourseScalarFieldEnum]


  export const PrerequisiteScalarFieldEnum: {
    course_id: 'course_id',
    prerequisite_id: 'prerequisite_id'
  };

  export type PrerequisiteScalarFieldEnum = (typeof PrerequisiteScalarFieldEnum)[keyof typeof PrerequisiteScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    id?: StringFilter<"Student"> | string
    username?: StringFilter<"Student"> | string
    password?: StringFilter<"Student"> | string
    completedCourses?: CompletedCourseListRelationFilter
    pendingCourses?: PendingCourseListRelationFilter
    registeredCourses?: RegisteredStudentListRelationFilter
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    completedCourses?: CompletedCourseOrderByRelationAggregateInput
    pendingCourses?: PendingCourseOrderByRelationAggregateInput
    registeredCourses?: RegisteredStudentOrderByRelationAggregateInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    password?: StringFilter<"Student"> | string
    completedCourses?: CompletedCourseListRelationFilter
    pendingCourses?: PendingCourseListRelationFilter
    registeredCourses?: RegisteredStudentListRelationFilter
  }, "id" | "username">

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Student"> | string
    username?: StringWithAggregatesFilter<"Student"> | string
    password?: StringWithAggregatesFilter<"Student"> | string
  }

  export type InstructorWhereInput = {
    AND?: InstructorWhereInput | InstructorWhereInput[]
    OR?: InstructorWhereInput[]
    NOT?: InstructorWhereInput | InstructorWhereInput[]
    id?: StringFilter<"Instructor"> | string
    username?: StringFilter<"Instructor"> | string
    password?: StringFilter<"Instructor"> | string
    courses?: InstructorCourseListRelationFilter
    pendingApprovals?: PendingCourseListRelationFilter
  }

  export type InstructorOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    courses?: InstructorCourseOrderByRelationAggregateInput
    pendingApprovals?: PendingCourseOrderByRelationAggregateInput
  }

  export type InstructorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: InstructorWhereInput | InstructorWhereInput[]
    OR?: InstructorWhereInput[]
    NOT?: InstructorWhereInput | InstructorWhereInput[]
    password?: StringFilter<"Instructor"> | string
    courses?: InstructorCourseListRelationFilter
    pendingApprovals?: PendingCourseListRelationFilter
  }, "id" | "username">

  export type InstructorOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: InstructorCountOrderByAggregateInput
    _max?: InstructorMaxOrderByAggregateInput
    _min?: InstructorMinOrderByAggregateInput
  }

  export type InstructorScalarWhereWithAggregatesInput = {
    AND?: InstructorScalarWhereWithAggregatesInput | InstructorScalarWhereWithAggregatesInput[]
    OR?: InstructorScalarWhereWithAggregatesInput[]
    NOT?: InstructorScalarWhereWithAggregatesInput | InstructorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Instructor"> | string
    username?: StringWithAggregatesFilter<"Instructor"> | string
    password?: StringWithAggregatesFilter<"Instructor"> | string
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: StringFilter<"Admin"> | string
    username?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    password?: StringFilter<"Admin"> | string
  }, "id" | "username">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Admin"> | string
    username?: StringWithAggregatesFilter<"Admin"> | string
    password?: StringWithAggregatesFilter<"Admin"> | string
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    course_id?: IntFilter<"Course"> | number
    course_name?: StringFilter<"Course"> | string
    course_description?: StringNullableFilter<"Course"> | string | null
    category?: StringFilter<"Course"> | string
    status?: StringFilter<"Course"> | string
    prerequisites?: PrerequisiteListRelationFilter
    requiredBy?: PrerequisiteListRelationFilter
    instructorCourses?: InstructorCourseListRelationFilter
    completedCourses?: CompletedCourseListRelationFilter
    pendingCourses?: PendingCourseListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    course_id?: SortOrder
    course_name?: SortOrder
    course_description?: SortOrderInput | SortOrder
    category?: SortOrder
    status?: SortOrder
    prerequisites?: PrerequisiteOrderByRelationAggregateInput
    requiredBy?: PrerequisiteOrderByRelationAggregateInput
    instructorCourses?: InstructorCourseOrderByRelationAggregateInput
    completedCourses?: CompletedCourseOrderByRelationAggregateInput
    pendingCourses?: PendingCourseOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    course_id?: number
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    course_name?: StringFilter<"Course"> | string
    course_description?: StringNullableFilter<"Course"> | string | null
    category?: StringFilter<"Course"> | string
    status?: StringFilter<"Course"> | string
    prerequisites?: PrerequisiteListRelationFilter
    requiredBy?: PrerequisiteListRelationFilter
    instructorCourses?: InstructorCourseListRelationFilter
    completedCourses?: CompletedCourseListRelationFilter
    pendingCourses?: PendingCourseListRelationFilter
  }, "course_id">

  export type CourseOrderByWithAggregationInput = {
    course_id?: SortOrder
    course_name?: SortOrder
    course_description?: SortOrderInput | SortOrder
    category?: SortOrder
    status?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    course_id?: IntWithAggregatesFilter<"Course"> | number
    course_name?: StringWithAggregatesFilter<"Course"> | string
    course_description?: StringNullableWithAggregatesFilter<"Course"> | string | null
    category?: StringWithAggregatesFilter<"Course"> | string
    status?: StringWithAggregatesFilter<"Course"> | string
  }

  export type InstructorCourseWhereInput = {
    AND?: InstructorCourseWhereInput | InstructorCourseWhereInput[]
    OR?: InstructorCourseWhereInput[]
    NOT?: InstructorCourseWhereInput | InstructorCourseWhereInput[]
    capacity?: IntFilter<"InstructorCourse"> | number
    status?: StringFilter<"InstructorCourse"> | string
    course_id?: IntFilter<"InstructorCourse"> | number
    instructor_id?: StringFilter<"InstructorCourse"> | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    instructor?: XOR<InstructorScalarRelationFilter, InstructorWhereInput>
    registeredStudents?: RegisteredStudentListRelationFilter
  }

  export type InstructorCourseOrderByWithRelationInput = {
    capacity?: SortOrder
    status?: SortOrder
    course_id?: SortOrder
    instructor_id?: SortOrder
    course?: CourseOrderByWithRelationInput
    instructor?: InstructorOrderByWithRelationInput
    registeredStudents?: RegisteredStudentOrderByRelationAggregateInput
  }

  export type InstructorCourseWhereUniqueInput = Prisma.AtLeast<{
    course_id_instructor_id?: InstructorCourseCourse_idInstructor_idCompoundUniqueInput
    AND?: InstructorCourseWhereInput | InstructorCourseWhereInput[]
    OR?: InstructorCourseWhereInput[]
    NOT?: InstructorCourseWhereInput | InstructorCourseWhereInput[]
    capacity?: IntFilter<"InstructorCourse"> | number
    status?: StringFilter<"InstructorCourse"> | string
    course_id?: IntFilter<"InstructorCourse"> | number
    instructor_id?: StringFilter<"InstructorCourse"> | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    instructor?: XOR<InstructorScalarRelationFilter, InstructorWhereInput>
    registeredStudents?: RegisteredStudentListRelationFilter
  }, "course_id_instructor_id">

  export type InstructorCourseOrderByWithAggregationInput = {
    capacity?: SortOrder
    status?: SortOrder
    course_id?: SortOrder
    instructor_id?: SortOrder
    _count?: InstructorCourseCountOrderByAggregateInput
    _avg?: InstructorCourseAvgOrderByAggregateInput
    _max?: InstructorCourseMaxOrderByAggregateInput
    _min?: InstructorCourseMinOrderByAggregateInput
    _sum?: InstructorCourseSumOrderByAggregateInput
  }

  export type InstructorCourseScalarWhereWithAggregatesInput = {
    AND?: InstructorCourseScalarWhereWithAggregatesInput | InstructorCourseScalarWhereWithAggregatesInput[]
    OR?: InstructorCourseScalarWhereWithAggregatesInput[]
    NOT?: InstructorCourseScalarWhereWithAggregatesInput | InstructorCourseScalarWhereWithAggregatesInput[]
    capacity?: IntWithAggregatesFilter<"InstructorCourse"> | number
    status?: StringWithAggregatesFilter<"InstructorCourse"> | string
    course_id?: IntWithAggregatesFilter<"InstructorCourse"> | number
    instructor_id?: StringWithAggregatesFilter<"InstructorCourse"> | string
  }

  export type RegisteredStudentWhereInput = {
    AND?: RegisteredStudentWhereInput | RegisteredStudentWhereInput[]
    OR?: RegisteredStudentWhereInput[]
    NOT?: RegisteredStudentWhereInput | RegisteredStudentWhereInput[]
    instructor_course_course_id?: IntFilter<"RegisteredStudent"> | number
    instructor_course_instructor_id?: StringFilter<"RegisteredStudent"> | string
    student_id?: StringFilter<"RegisteredStudent"> | string
    instructorCourse?: XOR<InstructorCourseScalarRelationFilter, InstructorCourseWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type RegisteredStudentOrderByWithRelationInput = {
    instructor_course_course_id?: SortOrder
    instructor_course_instructor_id?: SortOrder
    student_id?: SortOrder
    instructorCourse?: InstructorCourseOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
  }

  export type RegisteredStudentWhereUniqueInput = Prisma.AtLeast<{
    instructor_course_course_id_instructor_course_instructor_id_student_id?: RegisteredStudentInstructor_course_course_idInstructor_course_instructor_idStudent_idCompoundUniqueInput
    AND?: RegisteredStudentWhereInput | RegisteredStudentWhereInput[]
    OR?: RegisteredStudentWhereInput[]
    NOT?: RegisteredStudentWhereInput | RegisteredStudentWhereInput[]
    instructor_course_course_id?: IntFilter<"RegisteredStudent"> | number
    instructor_course_instructor_id?: StringFilter<"RegisteredStudent"> | string
    student_id?: StringFilter<"RegisteredStudent"> | string
    instructorCourse?: XOR<InstructorCourseScalarRelationFilter, InstructorCourseWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "instructor_course_course_id_instructor_course_instructor_id_student_id">

  export type RegisteredStudentOrderByWithAggregationInput = {
    instructor_course_course_id?: SortOrder
    instructor_course_instructor_id?: SortOrder
    student_id?: SortOrder
    _count?: RegisteredStudentCountOrderByAggregateInput
    _avg?: RegisteredStudentAvgOrderByAggregateInput
    _max?: RegisteredStudentMaxOrderByAggregateInput
    _min?: RegisteredStudentMinOrderByAggregateInput
    _sum?: RegisteredStudentSumOrderByAggregateInput
  }

  export type RegisteredStudentScalarWhereWithAggregatesInput = {
    AND?: RegisteredStudentScalarWhereWithAggregatesInput | RegisteredStudentScalarWhereWithAggregatesInput[]
    OR?: RegisteredStudentScalarWhereWithAggregatesInput[]
    NOT?: RegisteredStudentScalarWhereWithAggregatesInput | RegisteredStudentScalarWhereWithAggregatesInput[]
    instructor_course_course_id?: IntWithAggregatesFilter<"RegisteredStudent"> | number
    instructor_course_instructor_id?: StringWithAggregatesFilter<"RegisteredStudent"> | string
    student_id?: StringWithAggregatesFilter<"RegisteredStudent"> | string
  }

  export type CompletedCourseWhereInput = {
    AND?: CompletedCourseWhereInput | CompletedCourseWhereInput[]
    OR?: CompletedCourseWhereInput[]
    NOT?: CompletedCourseWhereInput | CompletedCourseWhereInput[]
    course_id?: IntFilter<"CompletedCourse"> | number
    student_id?: StringFilter<"CompletedCourse"> | string
    grade?: StringFilter<"CompletedCourse"> | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type CompletedCourseOrderByWithRelationInput = {
    course_id?: SortOrder
    student_id?: SortOrder
    grade?: SortOrder
    course?: CourseOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
  }

  export type CompletedCourseWhereUniqueInput = Prisma.AtLeast<{
    course_id_student_id?: CompletedCourseCourse_idStudent_idCompoundUniqueInput
    AND?: CompletedCourseWhereInput | CompletedCourseWhereInput[]
    OR?: CompletedCourseWhereInput[]
    NOT?: CompletedCourseWhereInput | CompletedCourseWhereInput[]
    course_id?: IntFilter<"CompletedCourse"> | number
    student_id?: StringFilter<"CompletedCourse"> | string
    grade?: StringFilter<"CompletedCourse"> | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "course_id_student_id">

  export type CompletedCourseOrderByWithAggregationInput = {
    course_id?: SortOrder
    student_id?: SortOrder
    grade?: SortOrder
    _count?: CompletedCourseCountOrderByAggregateInput
    _avg?: CompletedCourseAvgOrderByAggregateInput
    _max?: CompletedCourseMaxOrderByAggregateInput
    _min?: CompletedCourseMinOrderByAggregateInput
    _sum?: CompletedCourseSumOrderByAggregateInput
  }

  export type CompletedCourseScalarWhereWithAggregatesInput = {
    AND?: CompletedCourseScalarWhereWithAggregatesInput | CompletedCourseScalarWhereWithAggregatesInput[]
    OR?: CompletedCourseScalarWhereWithAggregatesInput[]
    NOT?: CompletedCourseScalarWhereWithAggregatesInput | CompletedCourseScalarWhereWithAggregatesInput[]
    course_id?: IntWithAggregatesFilter<"CompletedCourse"> | number
    student_id?: StringWithAggregatesFilter<"CompletedCourse"> | string
    grade?: StringWithAggregatesFilter<"CompletedCourse"> | string
  }

  export type PendingCourseWhereInput = {
    AND?: PendingCourseWhereInput | PendingCourseWhereInput[]
    OR?: PendingCourseWhereInput[]
    NOT?: PendingCourseWhereInput | PendingCourseWhereInput[]
    course_id?: IntFilter<"PendingCourse"> | number
    student_id?: StringFilter<"PendingCourse"> | string
    instructor_id?: StringFilter<"PendingCourse"> | string
    approved?: BoolFilter<"PendingCourse"> | boolean
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    instructor?: XOR<InstructorScalarRelationFilter, InstructorWhereInput>
  }

  export type PendingCourseOrderByWithRelationInput = {
    course_id?: SortOrder
    student_id?: SortOrder
    instructor_id?: SortOrder
    approved?: SortOrder
    course?: CourseOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
    instructor?: InstructorOrderByWithRelationInput
  }

  export type PendingCourseWhereUniqueInput = Prisma.AtLeast<{
    course_id_student_id_instructor_id?: PendingCourseCourse_idStudent_idInstructor_idCompoundUniqueInput
    AND?: PendingCourseWhereInput | PendingCourseWhereInput[]
    OR?: PendingCourseWhereInput[]
    NOT?: PendingCourseWhereInput | PendingCourseWhereInput[]
    course_id?: IntFilter<"PendingCourse"> | number
    student_id?: StringFilter<"PendingCourse"> | string
    instructor_id?: StringFilter<"PendingCourse"> | string
    approved?: BoolFilter<"PendingCourse"> | boolean
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    instructor?: XOR<InstructorScalarRelationFilter, InstructorWhereInput>
  }, "course_id_student_id_instructor_id">

  export type PendingCourseOrderByWithAggregationInput = {
    course_id?: SortOrder
    student_id?: SortOrder
    instructor_id?: SortOrder
    approved?: SortOrder
    _count?: PendingCourseCountOrderByAggregateInput
    _avg?: PendingCourseAvgOrderByAggregateInput
    _max?: PendingCourseMaxOrderByAggregateInput
    _min?: PendingCourseMinOrderByAggregateInput
    _sum?: PendingCourseSumOrderByAggregateInput
  }

  export type PendingCourseScalarWhereWithAggregatesInput = {
    AND?: PendingCourseScalarWhereWithAggregatesInput | PendingCourseScalarWhereWithAggregatesInput[]
    OR?: PendingCourseScalarWhereWithAggregatesInput[]
    NOT?: PendingCourseScalarWhereWithAggregatesInput | PendingCourseScalarWhereWithAggregatesInput[]
    course_id?: IntWithAggregatesFilter<"PendingCourse"> | number
    student_id?: StringWithAggregatesFilter<"PendingCourse"> | string
    instructor_id?: StringWithAggregatesFilter<"PendingCourse"> | string
    approved?: BoolWithAggregatesFilter<"PendingCourse"> | boolean
  }

  export type PrerequisiteWhereInput = {
    AND?: PrerequisiteWhereInput | PrerequisiteWhereInput[]
    OR?: PrerequisiteWhereInput[]
    NOT?: PrerequisiteWhereInput | PrerequisiteWhereInput[]
    course_id?: IntFilter<"Prerequisite"> | number
    prerequisite_id?: IntFilter<"Prerequisite"> | number
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    prerequisiteCourse?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }

  export type PrerequisiteOrderByWithRelationInput = {
    course_id?: SortOrder
    prerequisite_id?: SortOrder
    course?: CourseOrderByWithRelationInput
    prerequisiteCourse?: CourseOrderByWithRelationInput
  }

  export type PrerequisiteWhereUniqueInput = Prisma.AtLeast<{
    course_id_prerequisite_id?: PrerequisiteCourse_idPrerequisite_idCompoundUniqueInput
    AND?: PrerequisiteWhereInput | PrerequisiteWhereInput[]
    OR?: PrerequisiteWhereInput[]
    NOT?: PrerequisiteWhereInput | PrerequisiteWhereInput[]
    course_id?: IntFilter<"Prerequisite"> | number
    prerequisite_id?: IntFilter<"Prerequisite"> | number
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    prerequisiteCourse?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }, "course_id_prerequisite_id">

  export type PrerequisiteOrderByWithAggregationInput = {
    course_id?: SortOrder
    prerequisite_id?: SortOrder
    _count?: PrerequisiteCountOrderByAggregateInput
    _avg?: PrerequisiteAvgOrderByAggregateInput
    _max?: PrerequisiteMaxOrderByAggregateInput
    _min?: PrerequisiteMinOrderByAggregateInput
    _sum?: PrerequisiteSumOrderByAggregateInput
  }

  export type PrerequisiteScalarWhereWithAggregatesInput = {
    AND?: PrerequisiteScalarWhereWithAggregatesInput | PrerequisiteScalarWhereWithAggregatesInput[]
    OR?: PrerequisiteScalarWhereWithAggregatesInput[]
    NOT?: PrerequisiteScalarWhereWithAggregatesInput | PrerequisiteScalarWhereWithAggregatesInput[]
    course_id?: IntWithAggregatesFilter<"Prerequisite"> | number
    prerequisite_id?: IntWithAggregatesFilter<"Prerequisite"> | number
  }

  export type StudentCreateInput = {
    id: string
    username: string
    password: string
    completedCourses?: CompletedCourseCreateNestedManyWithoutStudentInput
    pendingCourses?: PendingCourseCreateNestedManyWithoutStudentInput
    registeredCourses?: RegisteredStudentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    id: string
    username: string
    password: string
    completedCourses?: CompletedCourseUncheckedCreateNestedManyWithoutStudentInput
    pendingCourses?: PendingCourseUncheckedCreateNestedManyWithoutStudentInput
    registeredCourses?: RegisteredStudentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    completedCourses?: CompletedCourseUpdateManyWithoutStudentNestedInput
    pendingCourses?: PendingCourseUpdateManyWithoutStudentNestedInput
    registeredCourses?: RegisteredStudentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    completedCourses?: CompletedCourseUncheckedUpdateManyWithoutStudentNestedInput
    pendingCourses?: PendingCourseUncheckedUpdateManyWithoutStudentNestedInput
    registeredCourses?: RegisteredStudentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    id: string
    username: string
    password: string
  }

  export type StudentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type StudentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type InstructorCreateInput = {
    id: string
    username: string
    password: string
    courses?: InstructorCourseCreateNestedManyWithoutInstructorInput
    pendingApprovals?: PendingCourseCreateNestedManyWithoutInstructorInput
  }

  export type InstructorUncheckedCreateInput = {
    id: string
    username: string
    password: string
    courses?: InstructorCourseUncheckedCreateNestedManyWithoutInstructorInput
    pendingApprovals?: PendingCourseUncheckedCreateNestedManyWithoutInstructorInput
  }

  export type InstructorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    courses?: InstructorCourseUpdateManyWithoutInstructorNestedInput
    pendingApprovals?: PendingCourseUpdateManyWithoutInstructorNestedInput
  }

  export type InstructorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    courses?: InstructorCourseUncheckedUpdateManyWithoutInstructorNestedInput
    pendingApprovals?: PendingCourseUncheckedUpdateManyWithoutInstructorNestedInput
  }

  export type InstructorCreateManyInput = {
    id: string
    username: string
    password: string
  }

  export type InstructorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type InstructorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminCreateInput = {
    id: string
    username: string
    password: string
  }

  export type AdminUncheckedCreateInput = {
    id: string
    username: string
    password: string
  }

  export type AdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminCreateManyInput = {
    id: string
    username: string
    password: string
  }

  export type AdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CourseCreateInput = {
    course_id: number
    course_name: string
    course_description?: string | null
    category: string
    status: string
    prerequisites?: PrerequisiteCreateNestedManyWithoutPrerequisiteCourseInput
    requiredBy?: PrerequisiteCreateNestedManyWithoutCourseInput
    instructorCourses?: InstructorCourseCreateNestedManyWithoutCourseInput
    completedCourses?: CompletedCourseCreateNestedManyWithoutCourseInput
    pendingCourses?: PendingCourseCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    course_id: number
    course_name: string
    course_description?: string | null
    category: string
    status: string
    prerequisites?: PrerequisiteUncheckedCreateNestedManyWithoutPrerequisiteCourseInput
    requiredBy?: PrerequisiteUncheckedCreateNestedManyWithoutCourseInput
    instructorCourses?: InstructorCourseUncheckedCreateNestedManyWithoutCourseInput
    completedCourses?: CompletedCourseUncheckedCreateNestedManyWithoutCourseInput
    pendingCourses?: PendingCourseUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    course_description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    prerequisites?: PrerequisiteUpdateManyWithoutPrerequisiteCourseNestedInput
    requiredBy?: PrerequisiteUpdateManyWithoutCourseNestedInput
    instructorCourses?: InstructorCourseUpdateManyWithoutCourseNestedInput
    completedCourses?: CompletedCourseUpdateManyWithoutCourseNestedInput
    pendingCourses?: PendingCourseUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    course_description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    prerequisites?: PrerequisiteUncheckedUpdateManyWithoutPrerequisiteCourseNestedInput
    requiredBy?: PrerequisiteUncheckedUpdateManyWithoutCourseNestedInput
    instructorCourses?: InstructorCourseUncheckedUpdateManyWithoutCourseNestedInput
    completedCourses?: CompletedCourseUncheckedUpdateManyWithoutCourseNestedInput
    pendingCourses?: PendingCourseUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateManyInput = {
    course_id: number
    course_name: string
    course_description?: string | null
    category: string
    status: string
  }

  export type CourseUpdateManyMutationInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    course_description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CourseUncheckedUpdateManyInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    course_description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type InstructorCourseCreateInput = {
    capacity: number
    status: string
    course: CourseCreateNestedOneWithoutInstructorCoursesInput
    instructor: InstructorCreateNestedOneWithoutCoursesInput
    registeredStudents?: RegisteredStudentCreateNestedManyWithoutInstructorCourseInput
  }

  export type InstructorCourseUncheckedCreateInput = {
    capacity: number
    status: string
    course_id: number
    instructor_id: string
    registeredStudents?: RegisteredStudentUncheckedCreateNestedManyWithoutInstructorCourseInput
  }

  export type InstructorCourseUpdateInput = {
    capacity?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    course?: CourseUpdateOneRequiredWithoutInstructorCoursesNestedInput
    instructor?: InstructorUpdateOneRequiredWithoutCoursesNestedInput
    registeredStudents?: RegisteredStudentUpdateManyWithoutInstructorCourseNestedInput
  }

  export type InstructorCourseUncheckedUpdateInput = {
    capacity?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    course_id?: IntFieldUpdateOperationsInput | number
    instructor_id?: StringFieldUpdateOperationsInput | string
    registeredStudents?: RegisteredStudentUncheckedUpdateManyWithoutInstructorCourseNestedInput
  }

  export type InstructorCourseCreateManyInput = {
    capacity: number
    status: string
    course_id: number
    instructor_id: string
  }

  export type InstructorCourseUpdateManyMutationInput = {
    capacity?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type InstructorCourseUncheckedUpdateManyInput = {
    capacity?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    course_id?: IntFieldUpdateOperationsInput | number
    instructor_id?: StringFieldUpdateOperationsInput | string
  }

  export type RegisteredStudentCreateInput = {
    instructorCourse: InstructorCourseCreateNestedOneWithoutRegisteredStudentsInput
    student: StudentCreateNestedOneWithoutRegisteredCoursesInput
  }

  export type RegisteredStudentUncheckedCreateInput = {
    instructor_course_course_id: number
    instructor_course_instructor_id: string
    student_id: string
  }

  export type RegisteredStudentUpdateInput = {
    instructorCourse?: InstructorCourseUpdateOneRequiredWithoutRegisteredStudentsNestedInput
    student?: StudentUpdateOneRequiredWithoutRegisteredCoursesNestedInput
  }

  export type RegisteredStudentUncheckedUpdateInput = {
    instructor_course_course_id?: IntFieldUpdateOperationsInput | number
    instructor_course_instructor_id?: StringFieldUpdateOperationsInput | string
    student_id?: StringFieldUpdateOperationsInput | string
  }

  export type RegisteredStudentCreateManyInput = {
    instructor_course_course_id: number
    instructor_course_instructor_id: string
    student_id: string
  }

  export type RegisteredStudentUpdateManyMutationInput = {

  }

  export type RegisteredStudentUncheckedUpdateManyInput = {
    instructor_course_course_id?: IntFieldUpdateOperationsInput | number
    instructor_course_instructor_id?: StringFieldUpdateOperationsInput | string
    student_id?: StringFieldUpdateOperationsInput | string
  }

  export type CompletedCourseCreateInput = {
    grade: string
    course: CourseCreateNestedOneWithoutCompletedCoursesInput
    student: StudentCreateNestedOneWithoutCompletedCoursesInput
  }

  export type CompletedCourseUncheckedCreateInput = {
    course_id: number
    student_id: string
    grade: string
  }

  export type CompletedCourseUpdateInput = {
    grade?: StringFieldUpdateOperationsInput | string
    course?: CourseUpdateOneRequiredWithoutCompletedCoursesNestedInput
    student?: StudentUpdateOneRequiredWithoutCompletedCoursesNestedInput
  }

  export type CompletedCourseUncheckedUpdateInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    student_id?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
  }

  export type CompletedCourseCreateManyInput = {
    course_id: number
    student_id: string
    grade: string
  }

  export type CompletedCourseUpdateManyMutationInput = {
    grade?: StringFieldUpdateOperationsInput | string
  }

  export type CompletedCourseUncheckedUpdateManyInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    student_id?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
  }

  export type PendingCourseCreateInput = {
    approved: boolean
    course: CourseCreateNestedOneWithoutPendingCoursesInput
    student: StudentCreateNestedOneWithoutPendingCoursesInput
    instructor: InstructorCreateNestedOneWithoutPendingApprovalsInput
  }

  export type PendingCourseUncheckedCreateInput = {
    course_id: number
    student_id: string
    instructor_id: string
    approved: boolean
  }

  export type PendingCourseUpdateInput = {
    approved?: BoolFieldUpdateOperationsInput | boolean
    course?: CourseUpdateOneRequiredWithoutPendingCoursesNestedInput
    student?: StudentUpdateOneRequiredWithoutPendingCoursesNestedInput
    instructor?: InstructorUpdateOneRequiredWithoutPendingApprovalsNestedInput
  }

  export type PendingCourseUncheckedUpdateInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    student_id?: StringFieldUpdateOperationsInput | string
    instructor_id?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PendingCourseCreateManyInput = {
    course_id: number
    student_id: string
    instructor_id: string
    approved: boolean
  }

  export type PendingCourseUpdateManyMutationInput = {
    approved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PendingCourseUncheckedUpdateManyInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    student_id?: StringFieldUpdateOperationsInput | string
    instructor_id?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PrerequisiteCreateInput = {
    course: CourseCreateNestedOneWithoutRequiredByInput
    prerequisiteCourse: CourseCreateNestedOneWithoutPrerequisitesInput
  }

  export type PrerequisiteUncheckedCreateInput = {
    course_id: number
    prerequisite_id: number
  }

  export type PrerequisiteUpdateInput = {
    course?: CourseUpdateOneRequiredWithoutRequiredByNestedInput
    prerequisiteCourse?: CourseUpdateOneRequiredWithoutPrerequisitesNestedInput
  }

  export type PrerequisiteUncheckedUpdateInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    prerequisite_id?: IntFieldUpdateOperationsInput | number
  }

  export type PrerequisiteCreateManyInput = {
    course_id: number
    prerequisite_id: number
  }

  export type PrerequisiteUpdateManyMutationInput = {

  }

  export type PrerequisiteUncheckedUpdateManyInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    prerequisite_id?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type CompletedCourseListRelationFilter = {
    every?: CompletedCourseWhereInput
    some?: CompletedCourseWhereInput
    none?: CompletedCourseWhereInput
  }

  export type PendingCourseListRelationFilter = {
    every?: PendingCourseWhereInput
    some?: PendingCourseWhereInput
    none?: PendingCourseWhereInput
  }

  export type RegisteredStudentListRelationFilter = {
    every?: RegisteredStudentWhereInput
    some?: RegisteredStudentWhereInput
    none?: RegisteredStudentWhereInput
  }

  export type CompletedCourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PendingCourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RegisteredStudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type InstructorCourseListRelationFilter = {
    every?: InstructorCourseWhereInput
    some?: InstructorCourseWhereInput
    none?: InstructorCourseWhereInput
  }

  export type InstructorCourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InstructorCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type InstructorMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type InstructorMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PrerequisiteListRelationFilter = {
    every?: PrerequisiteWhereInput
    some?: PrerequisiteWhereInput
    none?: PrerequisiteWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PrerequisiteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseCountOrderByAggregateInput = {
    course_id?: SortOrder
    course_name?: SortOrder
    course_description?: SortOrder
    category?: SortOrder
    status?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    course_id?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    course_id?: SortOrder
    course_name?: SortOrder
    course_description?: SortOrder
    category?: SortOrder
    status?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    course_id?: SortOrder
    course_name?: SortOrder
    course_description?: SortOrder
    category?: SortOrder
    status?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    course_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CourseScalarRelationFilter = {
    is?: CourseWhereInput
    isNot?: CourseWhereInput
  }

  export type InstructorScalarRelationFilter = {
    is?: InstructorWhereInput
    isNot?: InstructorWhereInput
  }

  export type InstructorCourseCourse_idInstructor_idCompoundUniqueInput = {
    course_id: number
    instructor_id: string
  }

  export type InstructorCourseCountOrderByAggregateInput = {
    capacity?: SortOrder
    status?: SortOrder
    course_id?: SortOrder
    instructor_id?: SortOrder
  }

  export type InstructorCourseAvgOrderByAggregateInput = {
    capacity?: SortOrder
    course_id?: SortOrder
  }

  export type InstructorCourseMaxOrderByAggregateInput = {
    capacity?: SortOrder
    status?: SortOrder
    course_id?: SortOrder
    instructor_id?: SortOrder
  }

  export type InstructorCourseMinOrderByAggregateInput = {
    capacity?: SortOrder
    status?: SortOrder
    course_id?: SortOrder
    instructor_id?: SortOrder
  }

  export type InstructorCourseSumOrderByAggregateInput = {
    capacity?: SortOrder
    course_id?: SortOrder
  }

  export type InstructorCourseScalarRelationFilter = {
    is?: InstructorCourseWhereInput
    isNot?: InstructorCourseWhereInput
  }

  export type StudentScalarRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type RegisteredStudentInstructor_course_course_idInstructor_course_instructor_idStudent_idCompoundUniqueInput = {
    instructor_course_course_id: number
    instructor_course_instructor_id: string
    student_id: string
  }

  export type RegisteredStudentCountOrderByAggregateInput = {
    instructor_course_course_id?: SortOrder
    instructor_course_instructor_id?: SortOrder
    student_id?: SortOrder
  }

  export type RegisteredStudentAvgOrderByAggregateInput = {
    instructor_course_course_id?: SortOrder
  }

  export type RegisteredStudentMaxOrderByAggregateInput = {
    instructor_course_course_id?: SortOrder
    instructor_course_instructor_id?: SortOrder
    student_id?: SortOrder
  }

  export type RegisteredStudentMinOrderByAggregateInput = {
    instructor_course_course_id?: SortOrder
    instructor_course_instructor_id?: SortOrder
    student_id?: SortOrder
  }

  export type RegisteredStudentSumOrderByAggregateInput = {
    instructor_course_course_id?: SortOrder
  }

  export type CompletedCourseCourse_idStudent_idCompoundUniqueInput = {
    course_id: number
    student_id: string
  }

  export type CompletedCourseCountOrderByAggregateInput = {
    course_id?: SortOrder
    student_id?: SortOrder
    grade?: SortOrder
  }

  export type CompletedCourseAvgOrderByAggregateInput = {
    course_id?: SortOrder
  }

  export type CompletedCourseMaxOrderByAggregateInput = {
    course_id?: SortOrder
    student_id?: SortOrder
    grade?: SortOrder
  }

  export type CompletedCourseMinOrderByAggregateInput = {
    course_id?: SortOrder
    student_id?: SortOrder
    grade?: SortOrder
  }

  export type CompletedCourseSumOrderByAggregateInput = {
    course_id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PendingCourseCourse_idStudent_idInstructor_idCompoundUniqueInput = {
    course_id: number
    student_id: string
    instructor_id: string
  }

  export type PendingCourseCountOrderByAggregateInput = {
    course_id?: SortOrder
    student_id?: SortOrder
    instructor_id?: SortOrder
    approved?: SortOrder
  }

  export type PendingCourseAvgOrderByAggregateInput = {
    course_id?: SortOrder
  }

  export type PendingCourseMaxOrderByAggregateInput = {
    course_id?: SortOrder
    student_id?: SortOrder
    instructor_id?: SortOrder
    approved?: SortOrder
  }

  export type PendingCourseMinOrderByAggregateInput = {
    course_id?: SortOrder
    student_id?: SortOrder
    instructor_id?: SortOrder
    approved?: SortOrder
  }

  export type PendingCourseSumOrderByAggregateInput = {
    course_id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PrerequisiteCourse_idPrerequisite_idCompoundUniqueInput = {
    course_id: number
    prerequisite_id: number
  }

  export type PrerequisiteCountOrderByAggregateInput = {
    course_id?: SortOrder
    prerequisite_id?: SortOrder
  }

  export type PrerequisiteAvgOrderByAggregateInput = {
    course_id?: SortOrder
    prerequisite_id?: SortOrder
  }

  export type PrerequisiteMaxOrderByAggregateInput = {
    course_id?: SortOrder
    prerequisite_id?: SortOrder
  }

  export type PrerequisiteMinOrderByAggregateInput = {
    course_id?: SortOrder
    prerequisite_id?: SortOrder
  }

  export type PrerequisiteSumOrderByAggregateInput = {
    course_id?: SortOrder
    prerequisite_id?: SortOrder
  }

  export type CompletedCourseCreateNestedManyWithoutStudentInput = {
    create?: XOR<CompletedCourseCreateWithoutStudentInput, CompletedCourseUncheckedCreateWithoutStudentInput> | CompletedCourseCreateWithoutStudentInput[] | CompletedCourseUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: CompletedCourseCreateOrConnectWithoutStudentInput | CompletedCourseCreateOrConnectWithoutStudentInput[]
    createMany?: CompletedCourseCreateManyStudentInputEnvelope
    connect?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
  }

  export type PendingCourseCreateNestedManyWithoutStudentInput = {
    create?: XOR<PendingCourseCreateWithoutStudentInput, PendingCourseUncheckedCreateWithoutStudentInput> | PendingCourseCreateWithoutStudentInput[] | PendingCourseUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: PendingCourseCreateOrConnectWithoutStudentInput | PendingCourseCreateOrConnectWithoutStudentInput[]
    createMany?: PendingCourseCreateManyStudentInputEnvelope
    connect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
  }

  export type RegisteredStudentCreateNestedManyWithoutStudentInput = {
    create?: XOR<RegisteredStudentCreateWithoutStudentInput, RegisteredStudentUncheckedCreateWithoutStudentInput> | RegisteredStudentCreateWithoutStudentInput[] | RegisteredStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: RegisteredStudentCreateOrConnectWithoutStudentInput | RegisteredStudentCreateOrConnectWithoutStudentInput[]
    createMany?: RegisteredStudentCreateManyStudentInputEnvelope
    connect?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
  }

  export type CompletedCourseUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<CompletedCourseCreateWithoutStudentInput, CompletedCourseUncheckedCreateWithoutStudentInput> | CompletedCourseCreateWithoutStudentInput[] | CompletedCourseUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: CompletedCourseCreateOrConnectWithoutStudentInput | CompletedCourseCreateOrConnectWithoutStudentInput[]
    createMany?: CompletedCourseCreateManyStudentInputEnvelope
    connect?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
  }

  export type PendingCourseUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<PendingCourseCreateWithoutStudentInput, PendingCourseUncheckedCreateWithoutStudentInput> | PendingCourseCreateWithoutStudentInput[] | PendingCourseUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: PendingCourseCreateOrConnectWithoutStudentInput | PendingCourseCreateOrConnectWithoutStudentInput[]
    createMany?: PendingCourseCreateManyStudentInputEnvelope
    connect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
  }

  export type RegisteredStudentUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<RegisteredStudentCreateWithoutStudentInput, RegisteredStudentUncheckedCreateWithoutStudentInput> | RegisteredStudentCreateWithoutStudentInput[] | RegisteredStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: RegisteredStudentCreateOrConnectWithoutStudentInput | RegisteredStudentCreateOrConnectWithoutStudentInput[]
    createMany?: RegisteredStudentCreateManyStudentInputEnvelope
    connect?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type CompletedCourseUpdateManyWithoutStudentNestedInput = {
    create?: XOR<CompletedCourseCreateWithoutStudentInput, CompletedCourseUncheckedCreateWithoutStudentInput> | CompletedCourseCreateWithoutStudentInput[] | CompletedCourseUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: CompletedCourseCreateOrConnectWithoutStudentInput | CompletedCourseCreateOrConnectWithoutStudentInput[]
    upsert?: CompletedCourseUpsertWithWhereUniqueWithoutStudentInput | CompletedCourseUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: CompletedCourseCreateManyStudentInputEnvelope
    set?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    disconnect?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    delete?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    connect?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    update?: CompletedCourseUpdateWithWhereUniqueWithoutStudentInput | CompletedCourseUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: CompletedCourseUpdateManyWithWhereWithoutStudentInput | CompletedCourseUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: CompletedCourseScalarWhereInput | CompletedCourseScalarWhereInput[]
  }

  export type PendingCourseUpdateManyWithoutStudentNestedInput = {
    create?: XOR<PendingCourseCreateWithoutStudentInput, PendingCourseUncheckedCreateWithoutStudentInput> | PendingCourseCreateWithoutStudentInput[] | PendingCourseUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: PendingCourseCreateOrConnectWithoutStudentInput | PendingCourseCreateOrConnectWithoutStudentInput[]
    upsert?: PendingCourseUpsertWithWhereUniqueWithoutStudentInput | PendingCourseUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: PendingCourseCreateManyStudentInputEnvelope
    set?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    disconnect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    delete?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    connect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    update?: PendingCourseUpdateWithWhereUniqueWithoutStudentInput | PendingCourseUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: PendingCourseUpdateManyWithWhereWithoutStudentInput | PendingCourseUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: PendingCourseScalarWhereInput | PendingCourseScalarWhereInput[]
  }

  export type RegisteredStudentUpdateManyWithoutStudentNestedInput = {
    create?: XOR<RegisteredStudentCreateWithoutStudentInput, RegisteredStudentUncheckedCreateWithoutStudentInput> | RegisteredStudentCreateWithoutStudentInput[] | RegisteredStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: RegisteredStudentCreateOrConnectWithoutStudentInput | RegisteredStudentCreateOrConnectWithoutStudentInput[]
    upsert?: RegisteredStudentUpsertWithWhereUniqueWithoutStudentInput | RegisteredStudentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: RegisteredStudentCreateManyStudentInputEnvelope
    set?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
    disconnect?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
    delete?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
    connect?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
    update?: RegisteredStudentUpdateWithWhereUniqueWithoutStudentInput | RegisteredStudentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: RegisteredStudentUpdateManyWithWhereWithoutStudentInput | RegisteredStudentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: RegisteredStudentScalarWhereInput | RegisteredStudentScalarWhereInput[]
  }

  export type CompletedCourseUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<CompletedCourseCreateWithoutStudentInput, CompletedCourseUncheckedCreateWithoutStudentInput> | CompletedCourseCreateWithoutStudentInput[] | CompletedCourseUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: CompletedCourseCreateOrConnectWithoutStudentInput | CompletedCourseCreateOrConnectWithoutStudentInput[]
    upsert?: CompletedCourseUpsertWithWhereUniqueWithoutStudentInput | CompletedCourseUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: CompletedCourseCreateManyStudentInputEnvelope
    set?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    disconnect?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    delete?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    connect?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    update?: CompletedCourseUpdateWithWhereUniqueWithoutStudentInput | CompletedCourseUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: CompletedCourseUpdateManyWithWhereWithoutStudentInput | CompletedCourseUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: CompletedCourseScalarWhereInput | CompletedCourseScalarWhereInput[]
  }

  export type PendingCourseUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<PendingCourseCreateWithoutStudentInput, PendingCourseUncheckedCreateWithoutStudentInput> | PendingCourseCreateWithoutStudentInput[] | PendingCourseUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: PendingCourseCreateOrConnectWithoutStudentInput | PendingCourseCreateOrConnectWithoutStudentInput[]
    upsert?: PendingCourseUpsertWithWhereUniqueWithoutStudentInput | PendingCourseUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: PendingCourseCreateManyStudentInputEnvelope
    set?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    disconnect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    delete?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    connect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    update?: PendingCourseUpdateWithWhereUniqueWithoutStudentInput | PendingCourseUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: PendingCourseUpdateManyWithWhereWithoutStudentInput | PendingCourseUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: PendingCourseScalarWhereInput | PendingCourseScalarWhereInput[]
  }

  export type RegisteredStudentUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<RegisteredStudentCreateWithoutStudentInput, RegisteredStudentUncheckedCreateWithoutStudentInput> | RegisteredStudentCreateWithoutStudentInput[] | RegisteredStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: RegisteredStudentCreateOrConnectWithoutStudentInput | RegisteredStudentCreateOrConnectWithoutStudentInput[]
    upsert?: RegisteredStudentUpsertWithWhereUniqueWithoutStudentInput | RegisteredStudentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: RegisteredStudentCreateManyStudentInputEnvelope
    set?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
    disconnect?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
    delete?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
    connect?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
    update?: RegisteredStudentUpdateWithWhereUniqueWithoutStudentInput | RegisteredStudentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: RegisteredStudentUpdateManyWithWhereWithoutStudentInput | RegisteredStudentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: RegisteredStudentScalarWhereInput | RegisteredStudentScalarWhereInput[]
  }

  export type InstructorCourseCreateNestedManyWithoutInstructorInput = {
    create?: XOR<InstructorCourseCreateWithoutInstructorInput, InstructorCourseUncheckedCreateWithoutInstructorInput> | InstructorCourseCreateWithoutInstructorInput[] | InstructorCourseUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: InstructorCourseCreateOrConnectWithoutInstructorInput | InstructorCourseCreateOrConnectWithoutInstructorInput[]
    createMany?: InstructorCourseCreateManyInstructorInputEnvelope
    connect?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
  }

  export type PendingCourseCreateNestedManyWithoutInstructorInput = {
    create?: XOR<PendingCourseCreateWithoutInstructorInput, PendingCourseUncheckedCreateWithoutInstructorInput> | PendingCourseCreateWithoutInstructorInput[] | PendingCourseUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: PendingCourseCreateOrConnectWithoutInstructorInput | PendingCourseCreateOrConnectWithoutInstructorInput[]
    createMany?: PendingCourseCreateManyInstructorInputEnvelope
    connect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
  }

  export type InstructorCourseUncheckedCreateNestedManyWithoutInstructorInput = {
    create?: XOR<InstructorCourseCreateWithoutInstructorInput, InstructorCourseUncheckedCreateWithoutInstructorInput> | InstructorCourseCreateWithoutInstructorInput[] | InstructorCourseUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: InstructorCourseCreateOrConnectWithoutInstructorInput | InstructorCourseCreateOrConnectWithoutInstructorInput[]
    createMany?: InstructorCourseCreateManyInstructorInputEnvelope
    connect?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
  }

  export type PendingCourseUncheckedCreateNestedManyWithoutInstructorInput = {
    create?: XOR<PendingCourseCreateWithoutInstructorInput, PendingCourseUncheckedCreateWithoutInstructorInput> | PendingCourseCreateWithoutInstructorInput[] | PendingCourseUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: PendingCourseCreateOrConnectWithoutInstructorInput | PendingCourseCreateOrConnectWithoutInstructorInput[]
    createMany?: PendingCourseCreateManyInstructorInputEnvelope
    connect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
  }

  export type InstructorCourseUpdateManyWithoutInstructorNestedInput = {
    create?: XOR<InstructorCourseCreateWithoutInstructorInput, InstructorCourseUncheckedCreateWithoutInstructorInput> | InstructorCourseCreateWithoutInstructorInput[] | InstructorCourseUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: InstructorCourseCreateOrConnectWithoutInstructorInput | InstructorCourseCreateOrConnectWithoutInstructorInput[]
    upsert?: InstructorCourseUpsertWithWhereUniqueWithoutInstructorInput | InstructorCourseUpsertWithWhereUniqueWithoutInstructorInput[]
    createMany?: InstructorCourseCreateManyInstructorInputEnvelope
    set?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
    disconnect?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
    delete?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
    connect?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
    update?: InstructorCourseUpdateWithWhereUniqueWithoutInstructorInput | InstructorCourseUpdateWithWhereUniqueWithoutInstructorInput[]
    updateMany?: InstructorCourseUpdateManyWithWhereWithoutInstructorInput | InstructorCourseUpdateManyWithWhereWithoutInstructorInput[]
    deleteMany?: InstructorCourseScalarWhereInput | InstructorCourseScalarWhereInput[]
  }

  export type PendingCourseUpdateManyWithoutInstructorNestedInput = {
    create?: XOR<PendingCourseCreateWithoutInstructorInput, PendingCourseUncheckedCreateWithoutInstructorInput> | PendingCourseCreateWithoutInstructorInput[] | PendingCourseUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: PendingCourseCreateOrConnectWithoutInstructorInput | PendingCourseCreateOrConnectWithoutInstructorInput[]
    upsert?: PendingCourseUpsertWithWhereUniqueWithoutInstructorInput | PendingCourseUpsertWithWhereUniqueWithoutInstructorInput[]
    createMany?: PendingCourseCreateManyInstructorInputEnvelope
    set?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    disconnect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    delete?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    connect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    update?: PendingCourseUpdateWithWhereUniqueWithoutInstructorInput | PendingCourseUpdateWithWhereUniqueWithoutInstructorInput[]
    updateMany?: PendingCourseUpdateManyWithWhereWithoutInstructorInput | PendingCourseUpdateManyWithWhereWithoutInstructorInput[]
    deleteMany?: PendingCourseScalarWhereInput | PendingCourseScalarWhereInput[]
  }

  export type InstructorCourseUncheckedUpdateManyWithoutInstructorNestedInput = {
    create?: XOR<InstructorCourseCreateWithoutInstructorInput, InstructorCourseUncheckedCreateWithoutInstructorInput> | InstructorCourseCreateWithoutInstructorInput[] | InstructorCourseUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: InstructorCourseCreateOrConnectWithoutInstructorInput | InstructorCourseCreateOrConnectWithoutInstructorInput[]
    upsert?: InstructorCourseUpsertWithWhereUniqueWithoutInstructorInput | InstructorCourseUpsertWithWhereUniqueWithoutInstructorInput[]
    createMany?: InstructorCourseCreateManyInstructorInputEnvelope
    set?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
    disconnect?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
    delete?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
    connect?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
    update?: InstructorCourseUpdateWithWhereUniqueWithoutInstructorInput | InstructorCourseUpdateWithWhereUniqueWithoutInstructorInput[]
    updateMany?: InstructorCourseUpdateManyWithWhereWithoutInstructorInput | InstructorCourseUpdateManyWithWhereWithoutInstructorInput[]
    deleteMany?: InstructorCourseScalarWhereInput | InstructorCourseScalarWhereInput[]
  }

  export type PendingCourseUncheckedUpdateManyWithoutInstructorNestedInput = {
    create?: XOR<PendingCourseCreateWithoutInstructorInput, PendingCourseUncheckedCreateWithoutInstructorInput> | PendingCourseCreateWithoutInstructorInput[] | PendingCourseUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: PendingCourseCreateOrConnectWithoutInstructorInput | PendingCourseCreateOrConnectWithoutInstructorInput[]
    upsert?: PendingCourseUpsertWithWhereUniqueWithoutInstructorInput | PendingCourseUpsertWithWhereUniqueWithoutInstructorInput[]
    createMany?: PendingCourseCreateManyInstructorInputEnvelope
    set?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    disconnect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    delete?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    connect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    update?: PendingCourseUpdateWithWhereUniqueWithoutInstructorInput | PendingCourseUpdateWithWhereUniqueWithoutInstructorInput[]
    updateMany?: PendingCourseUpdateManyWithWhereWithoutInstructorInput | PendingCourseUpdateManyWithWhereWithoutInstructorInput[]
    deleteMany?: PendingCourseScalarWhereInput | PendingCourseScalarWhereInput[]
  }

  export type PrerequisiteCreateNestedManyWithoutPrerequisiteCourseInput = {
    create?: XOR<PrerequisiteCreateWithoutPrerequisiteCourseInput, PrerequisiteUncheckedCreateWithoutPrerequisiteCourseInput> | PrerequisiteCreateWithoutPrerequisiteCourseInput[] | PrerequisiteUncheckedCreateWithoutPrerequisiteCourseInput[]
    connectOrCreate?: PrerequisiteCreateOrConnectWithoutPrerequisiteCourseInput | PrerequisiteCreateOrConnectWithoutPrerequisiteCourseInput[]
    createMany?: PrerequisiteCreateManyPrerequisiteCourseInputEnvelope
    connect?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
  }

  export type PrerequisiteCreateNestedManyWithoutCourseInput = {
    create?: XOR<PrerequisiteCreateWithoutCourseInput, PrerequisiteUncheckedCreateWithoutCourseInput> | PrerequisiteCreateWithoutCourseInput[] | PrerequisiteUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: PrerequisiteCreateOrConnectWithoutCourseInput | PrerequisiteCreateOrConnectWithoutCourseInput[]
    createMany?: PrerequisiteCreateManyCourseInputEnvelope
    connect?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
  }

  export type InstructorCourseCreateNestedManyWithoutCourseInput = {
    create?: XOR<InstructorCourseCreateWithoutCourseInput, InstructorCourseUncheckedCreateWithoutCourseInput> | InstructorCourseCreateWithoutCourseInput[] | InstructorCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: InstructorCourseCreateOrConnectWithoutCourseInput | InstructorCourseCreateOrConnectWithoutCourseInput[]
    createMany?: InstructorCourseCreateManyCourseInputEnvelope
    connect?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
  }

  export type CompletedCourseCreateNestedManyWithoutCourseInput = {
    create?: XOR<CompletedCourseCreateWithoutCourseInput, CompletedCourseUncheckedCreateWithoutCourseInput> | CompletedCourseCreateWithoutCourseInput[] | CompletedCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CompletedCourseCreateOrConnectWithoutCourseInput | CompletedCourseCreateOrConnectWithoutCourseInput[]
    createMany?: CompletedCourseCreateManyCourseInputEnvelope
    connect?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
  }

  export type PendingCourseCreateNestedManyWithoutCourseInput = {
    create?: XOR<PendingCourseCreateWithoutCourseInput, PendingCourseUncheckedCreateWithoutCourseInput> | PendingCourseCreateWithoutCourseInput[] | PendingCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: PendingCourseCreateOrConnectWithoutCourseInput | PendingCourseCreateOrConnectWithoutCourseInput[]
    createMany?: PendingCourseCreateManyCourseInputEnvelope
    connect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
  }

  export type PrerequisiteUncheckedCreateNestedManyWithoutPrerequisiteCourseInput = {
    create?: XOR<PrerequisiteCreateWithoutPrerequisiteCourseInput, PrerequisiteUncheckedCreateWithoutPrerequisiteCourseInput> | PrerequisiteCreateWithoutPrerequisiteCourseInput[] | PrerequisiteUncheckedCreateWithoutPrerequisiteCourseInput[]
    connectOrCreate?: PrerequisiteCreateOrConnectWithoutPrerequisiteCourseInput | PrerequisiteCreateOrConnectWithoutPrerequisiteCourseInput[]
    createMany?: PrerequisiteCreateManyPrerequisiteCourseInputEnvelope
    connect?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
  }

  export type PrerequisiteUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<PrerequisiteCreateWithoutCourseInput, PrerequisiteUncheckedCreateWithoutCourseInput> | PrerequisiteCreateWithoutCourseInput[] | PrerequisiteUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: PrerequisiteCreateOrConnectWithoutCourseInput | PrerequisiteCreateOrConnectWithoutCourseInput[]
    createMany?: PrerequisiteCreateManyCourseInputEnvelope
    connect?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
  }

  export type InstructorCourseUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<InstructorCourseCreateWithoutCourseInput, InstructorCourseUncheckedCreateWithoutCourseInput> | InstructorCourseCreateWithoutCourseInput[] | InstructorCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: InstructorCourseCreateOrConnectWithoutCourseInput | InstructorCourseCreateOrConnectWithoutCourseInput[]
    createMany?: InstructorCourseCreateManyCourseInputEnvelope
    connect?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
  }

  export type CompletedCourseUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<CompletedCourseCreateWithoutCourseInput, CompletedCourseUncheckedCreateWithoutCourseInput> | CompletedCourseCreateWithoutCourseInput[] | CompletedCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CompletedCourseCreateOrConnectWithoutCourseInput | CompletedCourseCreateOrConnectWithoutCourseInput[]
    createMany?: CompletedCourseCreateManyCourseInputEnvelope
    connect?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
  }

  export type PendingCourseUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<PendingCourseCreateWithoutCourseInput, PendingCourseUncheckedCreateWithoutCourseInput> | PendingCourseCreateWithoutCourseInput[] | PendingCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: PendingCourseCreateOrConnectWithoutCourseInput | PendingCourseCreateOrConnectWithoutCourseInput[]
    createMany?: PendingCourseCreateManyCourseInputEnvelope
    connect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PrerequisiteUpdateManyWithoutPrerequisiteCourseNestedInput = {
    create?: XOR<PrerequisiteCreateWithoutPrerequisiteCourseInput, PrerequisiteUncheckedCreateWithoutPrerequisiteCourseInput> | PrerequisiteCreateWithoutPrerequisiteCourseInput[] | PrerequisiteUncheckedCreateWithoutPrerequisiteCourseInput[]
    connectOrCreate?: PrerequisiteCreateOrConnectWithoutPrerequisiteCourseInput | PrerequisiteCreateOrConnectWithoutPrerequisiteCourseInput[]
    upsert?: PrerequisiteUpsertWithWhereUniqueWithoutPrerequisiteCourseInput | PrerequisiteUpsertWithWhereUniqueWithoutPrerequisiteCourseInput[]
    createMany?: PrerequisiteCreateManyPrerequisiteCourseInputEnvelope
    set?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
    disconnect?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
    delete?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
    connect?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
    update?: PrerequisiteUpdateWithWhereUniqueWithoutPrerequisiteCourseInput | PrerequisiteUpdateWithWhereUniqueWithoutPrerequisiteCourseInput[]
    updateMany?: PrerequisiteUpdateManyWithWhereWithoutPrerequisiteCourseInput | PrerequisiteUpdateManyWithWhereWithoutPrerequisiteCourseInput[]
    deleteMany?: PrerequisiteScalarWhereInput | PrerequisiteScalarWhereInput[]
  }

  export type PrerequisiteUpdateManyWithoutCourseNestedInput = {
    create?: XOR<PrerequisiteCreateWithoutCourseInput, PrerequisiteUncheckedCreateWithoutCourseInput> | PrerequisiteCreateWithoutCourseInput[] | PrerequisiteUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: PrerequisiteCreateOrConnectWithoutCourseInput | PrerequisiteCreateOrConnectWithoutCourseInput[]
    upsert?: PrerequisiteUpsertWithWhereUniqueWithoutCourseInput | PrerequisiteUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: PrerequisiteCreateManyCourseInputEnvelope
    set?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
    disconnect?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
    delete?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
    connect?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
    update?: PrerequisiteUpdateWithWhereUniqueWithoutCourseInput | PrerequisiteUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: PrerequisiteUpdateManyWithWhereWithoutCourseInput | PrerequisiteUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: PrerequisiteScalarWhereInput | PrerequisiteScalarWhereInput[]
  }

  export type InstructorCourseUpdateManyWithoutCourseNestedInput = {
    create?: XOR<InstructorCourseCreateWithoutCourseInput, InstructorCourseUncheckedCreateWithoutCourseInput> | InstructorCourseCreateWithoutCourseInput[] | InstructorCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: InstructorCourseCreateOrConnectWithoutCourseInput | InstructorCourseCreateOrConnectWithoutCourseInput[]
    upsert?: InstructorCourseUpsertWithWhereUniqueWithoutCourseInput | InstructorCourseUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: InstructorCourseCreateManyCourseInputEnvelope
    set?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
    disconnect?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
    delete?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
    connect?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
    update?: InstructorCourseUpdateWithWhereUniqueWithoutCourseInput | InstructorCourseUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: InstructorCourseUpdateManyWithWhereWithoutCourseInput | InstructorCourseUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: InstructorCourseScalarWhereInput | InstructorCourseScalarWhereInput[]
  }

  export type CompletedCourseUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CompletedCourseCreateWithoutCourseInput, CompletedCourseUncheckedCreateWithoutCourseInput> | CompletedCourseCreateWithoutCourseInput[] | CompletedCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CompletedCourseCreateOrConnectWithoutCourseInput | CompletedCourseCreateOrConnectWithoutCourseInput[]
    upsert?: CompletedCourseUpsertWithWhereUniqueWithoutCourseInput | CompletedCourseUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CompletedCourseCreateManyCourseInputEnvelope
    set?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    disconnect?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    delete?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    connect?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    update?: CompletedCourseUpdateWithWhereUniqueWithoutCourseInput | CompletedCourseUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CompletedCourseUpdateManyWithWhereWithoutCourseInput | CompletedCourseUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CompletedCourseScalarWhereInput | CompletedCourseScalarWhereInput[]
  }

  export type PendingCourseUpdateManyWithoutCourseNestedInput = {
    create?: XOR<PendingCourseCreateWithoutCourseInput, PendingCourseUncheckedCreateWithoutCourseInput> | PendingCourseCreateWithoutCourseInput[] | PendingCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: PendingCourseCreateOrConnectWithoutCourseInput | PendingCourseCreateOrConnectWithoutCourseInput[]
    upsert?: PendingCourseUpsertWithWhereUniqueWithoutCourseInput | PendingCourseUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: PendingCourseCreateManyCourseInputEnvelope
    set?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    disconnect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    delete?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    connect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    update?: PendingCourseUpdateWithWhereUniqueWithoutCourseInput | PendingCourseUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: PendingCourseUpdateManyWithWhereWithoutCourseInput | PendingCourseUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: PendingCourseScalarWhereInput | PendingCourseScalarWhereInput[]
  }

  export type PrerequisiteUncheckedUpdateManyWithoutPrerequisiteCourseNestedInput = {
    create?: XOR<PrerequisiteCreateWithoutPrerequisiteCourseInput, PrerequisiteUncheckedCreateWithoutPrerequisiteCourseInput> | PrerequisiteCreateWithoutPrerequisiteCourseInput[] | PrerequisiteUncheckedCreateWithoutPrerequisiteCourseInput[]
    connectOrCreate?: PrerequisiteCreateOrConnectWithoutPrerequisiteCourseInput | PrerequisiteCreateOrConnectWithoutPrerequisiteCourseInput[]
    upsert?: PrerequisiteUpsertWithWhereUniqueWithoutPrerequisiteCourseInput | PrerequisiteUpsertWithWhereUniqueWithoutPrerequisiteCourseInput[]
    createMany?: PrerequisiteCreateManyPrerequisiteCourseInputEnvelope
    set?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
    disconnect?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
    delete?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
    connect?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
    update?: PrerequisiteUpdateWithWhereUniqueWithoutPrerequisiteCourseInput | PrerequisiteUpdateWithWhereUniqueWithoutPrerequisiteCourseInput[]
    updateMany?: PrerequisiteUpdateManyWithWhereWithoutPrerequisiteCourseInput | PrerequisiteUpdateManyWithWhereWithoutPrerequisiteCourseInput[]
    deleteMany?: PrerequisiteScalarWhereInput | PrerequisiteScalarWhereInput[]
  }

  export type PrerequisiteUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<PrerequisiteCreateWithoutCourseInput, PrerequisiteUncheckedCreateWithoutCourseInput> | PrerequisiteCreateWithoutCourseInput[] | PrerequisiteUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: PrerequisiteCreateOrConnectWithoutCourseInput | PrerequisiteCreateOrConnectWithoutCourseInput[]
    upsert?: PrerequisiteUpsertWithWhereUniqueWithoutCourseInput | PrerequisiteUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: PrerequisiteCreateManyCourseInputEnvelope
    set?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
    disconnect?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
    delete?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
    connect?: PrerequisiteWhereUniqueInput | PrerequisiteWhereUniqueInput[]
    update?: PrerequisiteUpdateWithWhereUniqueWithoutCourseInput | PrerequisiteUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: PrerequisiteUpdateManyWithWhereWithoutCourseInput | PrerequisiteUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: PrerequisiteScalarWhereInput | PrerequisiteScalarWhereInput[]
  }

  export type InstructorCourseUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<InstructorCourseCreateWithoutCourseInput, InstructorCourseUncheckedCreateWithoutCourseInput> | InstructorCourseCreateWithoutCourseInput[] | InstructorCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: InstructorCourseCreateOrConnectWithoutCourseInput | InstructorCourseCreateOrConnectWithoutCourseInput[]
    upsert?: InstructorCourseUpsertWithWhereUniqueWithoutCourseInput | InstructorCourseUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: InstructorCourseCreateManyCourseInputEnvelope
    set?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
    disconnect?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
    delete?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
    connect?: InstructorCourseWhereUniqueInput | InstructorCourseWhereUniqueInput[]
    update?: InstructorCourseUpdateWithWhereUniqueWithoutCourseInput | InstructorCourseUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: InstructorCourseUpdateManyWithWhereWithoutCourseInput | InstructorCourseUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: InstructorCourseScalarWhereInput | InstructorCourseScalarWhereInput[]
  }

  export type CompletedCourseUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CompletedCourseCreateWithoutCourseInput, CompletedCourseUncheckedCreateWithoutCourseInput> | CompletedCourseCreateWithoutCourseInput[] | CompletedCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CompletedCourseCreateOrConnectWithoutCourseInput | CompletedCourseCreateOrConnectWithoutCourseInput[]
    upsert?: CompletedCourseUpsertWithWhereUniqueWithoutCourseInput | CompletedCourseUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CompletedCourseCreateManyCourseInputEnvelope
    set?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    disconnect?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    delete?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    connect?: CompletedCourseWhereUniqueInput | CompletedCourseWhereUniqueInput[]
    update?: CompletedCourseUpdateWithWhereUniqueWithoutCourseInput | CompletedCourseUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CompletedCourseUpdateManyWithWhereWithoutCourseInput | CompletedCourseUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CompletedCourseScalarWhereInput | CompletedCourseScalarWhereInput[]
  }

  export type PendingCourseUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<PendingCourseCreateWithoutCourseInput, PendingCourseUncheckedCreateWithoutCourseInput> | PendingCourseCreateWithoutCourseInput[] | PendingCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: PendingCourseCreateOrConnectWithoutCourseInput | PendingCourseCreateOrConnectWithoutCourseInput[]
    upsert?: PendingCourseUpsertWithWhereUniqueWithoutCourseInput | PendingCourseUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: PendingCourseCreateManyCourseInputEnvelope
    set?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    disconnect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    delete?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    connect?: PendingCourseWhereUniqueInput | PendingCourseWhereUniqueInput[]
    update?: PendingCourseUpdateWithWhereUniqueWithoutCourseInput | PendingCourseUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: PendingCourseUpdateManyWithWhereWithoutCourseInput | PendingCourseUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: PendingCourseScalarWhereInput | PendingCourseScalarWhereInput[]
  }

  export type CourseCreateNestedOneWithoutInstructorCoursesInput = {
    create?: XOR<CourseCreateWithoutInstructorCoursesInput, CourseUncheckedCreateWithoutInstructorCoursesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutInstructorCoursesInput
    connect?: CourseWhereUniqueInput
  }

  export type InstructorCreateNestedOneWithoutCoursesInput = {
    create?: XOR<InstructorCreateWithoutCoursesInput, InstructorUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: InstructorCreateOrConnectWithoutCoursesInput
    connect?: InstructorWhereUniqueInput
  }

  export type RegisteredStudentCreateNestedManyWithoutInstructorCourseInput = {
    create?: XOR<RegisteredStudentCreateWithoutInstructorCourseInput, RegisteredStudentUncheckedCreateWithoutInstructorCourseInput> | RegisteredStudentCreateWithoutInstructorCourseInput[] | RegisteredStudentUncheckedCreateWithoutInstructorCourseInput[]
    connectOrCreate?: RegisteredStudentCreateOrConnectWithoutInstructorCourseInput | RegisteredStudentCreateOrConnectWithoutInstructorCourseInput[]
    createMany?: RegisteredStudentCreateManyInstructorCourseInputEnvelope
    connect?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
  }

  export type RegisteredStudentUncheckedCreateNestedManyWithoutInstructorCourseInput = {
    create?: XOR<RegisteredStudentCreateWithoutInstructorCourseInput, RegisteredStudentUncheckedCreateWithoutInstructorCourseInput> | RegisteredStudentCreateWithoutInstructorCourseInput[] | RegisteredStudentUncheckedCreateWithoutInstructorCourseInput[]
    connectOrCreate?: RegisteredStudentCreateOrConnectWithoutInstructorCourseInput | RegisteredStudentCreateOrConnectWithoutInstructorCourseInput[]
    createMany?: RegisteredStudentCreateManyInstructorCourseInputEnvelope
    connect?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
  }

  export type CourseUpdateOneRequiredWithoutInstructorCoursesNestedInput = {
    create?: XOR<CourseCreateWithoutInstructorCoursesInput, CourseUncheckedCreateWithoutInstructorCoursesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutInstructorCoursesInput
    upsert?: CourseUpsertWithoutInstructorCoursesInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutInstructorCoursesInput, CourseUpdateWithoutInstructorCoursesInput>, CourseUncheckedUpdateWithoutInstructorCoursesInput>
  }

  export type InstructorUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<InstructorCreateWithoutCoursesInput, InstructorUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: InstructorCreateOrConnectWithoutCoursesInput
    upsert?: InstructorUpsertWithoutCoursesInput
    connect?: InstructorWhereUniqueInput
    update?: XOR<XOR<InstructorUpdateToOneWithWhereWithoutCoursesInput, InstructorUpdateWithoutCoursesInput>, InstructorUncheckedUpdateWithoutCoursesInput>
  }

  export type RegisteredStudentUpdateManyWithoutInstructorCourseNestedInput = {
    create?: XOR<RegisteredStudentCreateWithoutInstructorCourseInput, RegisteredStudentUncheckedCreateWithoutInstructorCourseInput> | RegisteredStudentCreateWithoutInstructorCourseInput[] | RegisteredStudentUncheckedCreateWithoutInstructorCourseInput[]
    connectOrCreate?: RegisteredStudentCreateOrConnectWithoutInstructorCourseInput | RegisteredStudentCreateOrConnectWithoutInstructorCourseInput[]
    upsert?: RegisteredStudentUpsertWithWhereUniqueWithoutInstructorCourseInput | RegisteredStudentUpsertWithWhereUniqueWithoutInstructorCourseInput[]
    createMany?: RegisteredStudentCreateManyInstructorCourseInputEnvelope
    set?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
    disconnect?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
    delete?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
    connect?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
    update?: RegisteredStudentUpdateWithWhereUniqueWithoutInstructorCourseInput | RegisteredStudentUpdateWithWhereUniqueWithoutInstructorCourseInput[]
    updateMany?: RegisteredStudentUpdateManyWithWhereWithoutInstructorCourseInput | RegisteredStudentUpdateManyWithWhereWithoutInstructorCourseInput[]
    deleteMany?: RegisteredStudentScalarWhereInput | RegisteredStudentScalarWhereInput[]
  }

  export type RegisteredStudentUncheckedUpdateManyWithoutInstructorCourseNestedInput = {
    create?: XOR<RegisteredStudentCreateWithoutInstructorCourseInput, RegisteredStudentUncheckedCreateWithoutInstructorCourseInput> | RegisteredStudentCreateWithoutInstructorCourseInput[] | RegisteredStudentUncheckedCreateWithoutInstructorCourseInput[]
    connectOrCreate?: RegisteredStudentCreateOrConnectWithoutInstructorCourseInput | RegisteredStudentCreateOrConnectWithoutInstructorCourseInput[]
    upsert?: RegisteredStudentUpsertWithWhereUniqueWithoutInstructorCourseInput | RegisteredStudentUpsertWithWhereUniqueWithoutInstructorCourseInput[]
    createMany?: RegisteredStudentCreateManyInstructorCourseInputEnvelope
    set?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
    disconnect?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
    delete?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
    connect?: RegisteredStudentWhereUniqueInput | RegisteredStudentWhereUniqueInput[]
    update?: RegisteredStudentUpdateWithWhereUniqueWithoutInstructorCourseInput | RegisteredStudentUpdateWithWhereUniqueWithoutInstructorCourseInput[]
    updateMany?: RegisteredStudentUpdateManyWithWhereWithoutInstructorCourseInput | RegisteredStudentUpdateManyWithWhereWithoutInstructorCourseInput[]
    deleteMany?: RegisteredStudentScalarWhereInput | RegisteredStudentScalarWhereInput[]
  }

  export type InstructorCourseCreateNestedOneWithoutRegisteredStudentsInput = {
    create?: XOR<InstructorCourseCreateWithoutRegisteredStudentsInput, InstructorCourseUncheckedCreateWithoutRegisteredStudentsInput>
    connectOrCreate?: InstructorCourseCreateOrConnectWithoutRegisteredStudentsInput
    connect?: InstructorCourseWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutRegisteredCoursesInput = {
    create?: XOR<StudentCreateWithoutRegisteredCoursesInput, StudentUncheckedCreateWithoutRegisteredCoursesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutRegisteredCoursesInput
    connect?: StudentWhereUniqueInput
  }

  export type InstructorCourseUpdateOneRequiredWithoutRegisteredStudentsNestedInput = {
    create?: XOR<InstructorCourseCreateWithoutRegisteredStudentsInput, InstructorCourseUncheckedCreateWithoutRegisteredStudentsInput>
    connectOrCreate?: InstructorCourseCreateOrConnectWithoutRegisteredStudentsInput
    upsert?: InstructorCourseUpsertWithoutRegisteredStudentsInput
    connect?: InstructorCourseWhereUniqueInput
    update?: XOR<XOR<InstructorCourseUpdateToOneWithWhereWithoutRegisteredStudentsInput, InstructorCourseUpdateWithoutRegisteredStudentsInput>, InstructorCourseUncheckedUpdateWithoutRegisteredStudentsInput>
  }

  export type StudentUpdateOneRequiredWithoutRegisteredCoursesNestedInput = {
    create?: XOR<StudentCreateWithoutRegisteredCoursesInput, StudentUncheckedCreateWithoutRegisteredCoursesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutRegisteredCoursesInput
    upsert?: StudentUpsertWithoutRegisteredCoursesInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutRegisteredCoursesInput, StudentUpdateWithoutRegisteredCoursesInput>, StudentUncheckedUpdateWithoutRegisteredCoursesInput>
  }

  export type CourseCreateNestedOneWithoutCompletedCoursesInput = {
    create?: XOR<CourseCreateWithoutCompletedCoursesInput, CourseUncheckedCreateWithoutCompletedCoursesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCompletedCoursesInput
    connect?: CourseWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutCompletedCoursesInput = {
    create?: XOR<StudentCreateWithoutCompletedCoursesInput, StudentUncheckedCreateWithoutCompletedCoursesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutCompletedCoursesInput
    connect?: StudentWhereUniqueInput
  }

  export type CourseUpdateOneRequiredWithoutCompletedCoursesNestedInput = {
    create?: XOR<CourseCreateWithoutCompletedCoursesInput, CourseUncheckedCreateWithoutCompletedCoursesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCompletedCoursesInput
    upsert?: CourseUpsertWithoutCompletedCoursesInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutCompletedCoursesInput, CourseUpdateWithoutCompletedCoursesInput>, CourseUncheckedUpdateWithoutCompletedCoursesInput>
  }

  export type StudentUpdateOneRequiredWithoutCompletedCoursesNestedInput = {
    create?: XOR<StudentCreateWithoutCompletedCoursesInput, StudentUncheckedCreateWithoutCompletedCoursesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutCompletedCoursesInput
    upsert?: StudentUpsertWithoutCompletedCoursesInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutCompletedCoursesInput, StudentUpdateWithoutCompletedCoursesInput>, StudentUncheckedUpdateWithoutCompletedCoursesInput>
  }

  export type CourseCreateNestedOneWithoutPendingCoursesInput = {
    create?: XOR<CourseCreateWithoutPendingCoursesInput, CourseUncheckedCreateWithoutPendingCoursesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutPendingCoursesInput
    connect?: CourseWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutPendingCoursesInput = {
    create?: XOR<StudentCreateWithoutPendingCoursesInput, StudentUncheckedCreateWithoutPendingCoursesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutPendingCoursesInput
    connect?: StudentWhereUniqueInput
  }

  export type InstructorCreateNestedOneWithoutPendingApprovalsInput = {
    create?: XOR<InstructorCreateWithoutPendingApprovalsInput, InstructorUncheckedCreateWithoutPendingApprovalsInput>
    connectOrCreate?: InstructorCreateOrConnectWithoutPendingApprovalsInput
    connect?: InstructorWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CourseUpdateOneRequiredWithoutPendingCoursesNestedInput = {
    create?: XOR<CourseCreateWithoutPendingCoursesInput, CourseUncheckedCreateWithoutPendingCoursesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutPendingCoursesInput
    upsert?: CourseUpsertWithoutPendingCoursesInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutPendingCoursesInput, CourseUpdateWithoutPendingCoursesInput>, CourseUncheckedUpdateWithoutPendingCoursesInput>
  }

  export type StudentUpdateOneRequiredWithoutPendingCoursesNestedInput = {
    create?: XOR<StudentCreateWithoutPendingCoursesInput, StudentUncheckedCreateWithoutPendingCoursesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutPendingCoursesInput
    upsert?: StudentUpsertWithoutPendingCoursesInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutPendingCoursesInput, StudentUpdateWithoutPendingCoursesInput>, StudentUncheckedUpdateWithoutPendingCoursesInput>
  }

  export type InstructorUpdateOneRequiredWithoutPendingApprovalsNestedInput = {
    create?: XOR<InstructorCreateWithoutPendingApprovalsInput, InstructorUncheckedCreateWithoutPendingApprovalsInput>
    connectOrCreate?: InstructorCreateOrConnectWithoutPendingApprovalsInput
    upsert?: InstructorUpsertWithoutPendingApprovalsInput
    connect?: InstructorWhereUniqueInput
    update?: XOR<XOR<InstructorUpdateToOneWithWhereWithoutPendingApprovalsInput, InstructorUpdateWithoutPendingApprovalsInput>, InstructorUncheckedUpdateWithoutPendingApprovalsInput>
  }

  export type CourseCreateNestedOneWithoutRequiredByInput = {
    create?: XOR<CourseCreateWithoutRequiredByInput, CourseUncheckedCreateWithoutRequiredByInput>
    connectOrCreate?: CourseCreateOrConnectWithoutRequiredByInput
    connect?: CourseWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutPrerequisitesInput = {
    create?: XOR<CourseCreateWithoutPrerequisitesInput, CourseUncheckedCreateWithoutPrerequisitesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutPrerequisitesInput
    connect?: CourseWhereUniqueInput
  }

  export type CourseUpdateOneRequiredWithoutRequiredByNestedInput = {
    create?: XOR<CourseCreateWithoutRequiredByInput, CourseUncheckedCreateWithoutRequiredByInput>
    connectOrCreate?: CourseCreateOrConnectWithoutRequiredByInput
    upsert?: CourseUpsertWithoutRequiredByInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutRequiredByInput, CourseUpdateWithoutRequiredByInput>, CourseUncheckedUpdateWithoutRequiredByInput>
  }

  export type CourseUpdateOneRequiredWithoutPrerequisitesNestedInput = {
    create?: XOR<CourseCreateWithoutPrerequisitesInput, CourseUncheckedCreateWithoutPrerequisitesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutPrerequisitesInput
    upsert?: CourseUpsertWithoutPrerequisitesInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutPrerequisitesInput, CourseUpdateWithoutPrerequisitesInput>, CourseUncheckedUpdateWithoutPrerequisitesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CompletedCourseCreateWithoutStudentInput = {
    grade: string
    course: CourseCreateNestedOneWithoutCompletedCoursesInput
  }

  export type CompletedCourseUncheckedCreateWithoutStudentInput = {
    course_id: number
    grade: string
  }

  export type CompletedCourseCreateOrConnectWithoutStudentInput = {
    where: CompletedCourseWhereUniqueInput
    create: XOR<CompletedCourseCreateWithoutStudentInput, CompletedCourseUncheckedCreateWithoutStudentInput>
  }

  export type CompletedCourseCreateManyStudentInputEnvelope = {
    data: CompletedCourseCreateManyStudentInput | CompletedCourseCreateManyStudentInput[]
  }

  export type PendingCourseCreateWithoutStudentInput = {
    approved: boolean
    course: CourseCreateNestedOneWithoutPendingCoursesInput
    instructor: InstructorCreateNestedOneWithoutPendingApprovalsInput
  }

  export type PendingCourseUncheckedCreateWithoutStudentInput = {
    course_id: number
    instructor_id: string
    approved: boolean
  }

  export type PendingCourseCreateOrConnectWithoutStudentInput = {
    where: PendingCourseWhereUniqueInput
    create: XOR<PendingCourseCreateWithoutStudentInput, PendingCourseUncheckedCreateWithoutStudentInput>
  }

  export type PendingCourseCreateManyStudentInputEnvelope = {
    data: PendingCourseCreateManyStudentInput | PendingCourseCreateManyStudentInput[]
  }

  export type RegisteredStudentCreateWithoutStudentInput = {
    instructorCourse: InstructorCourseCreateNestedOneWithoutRegisteredStudentsInput
  }

  export type RegisteredStudentUncheckedCreateWithoutStudentInput = {
    instructor_course_course_id: number
    instructor_course_instructor_id: string
  }

  export type RegisteredStudentCreateOrConnectWithoutStudentInput = {
    where: RegisteredStudentWhereUniqueInput
    create: XOR<RegisteredStudentCreateWithoutStudentInput, RegisteredStudentUncheckedCreateWithoutStudentInput>
  }

  export type RegisteredStudentCreateManyStudentInputEnvelope = {
    data: RegisteredStudentCreateManyStudentInput | RegisteredStudentCreateManyStudentInput[]
  }

  export type CompletedCourseUpsertWithWhereUniqueWithoutStudentInput = {
    where: CompletedCourseWhereUniqueInput
    update: XOR<CompletedCourseUpdateWithoutStudentInput, CompletedCourseUncheckedUpdateWithoutStudentInput>
    create: XOR<CompletedCourseCreateWithoutStudentInput, CompletedCourseUncheckedCreateWithoutStudentInput>
  }

  export type CompletedCourseUpdateWithWhereUniqueWithoutStudentInput = {
    where: CompletedCourseWhereUniqueInput
    data: XOR<CompletedCourseUpdateWithoutStudentInput, CompletedCourseUncheckedUpdateWithoutStudentInput>
  }

  export type CompletedCourseUpdateManyWithWhereWithoutStudentInput = {
    where: CompletedCourseScalarWhereInput
    data: XOR<CompletedCourseUpdateManyMutationInput, CompletedCourseUncheckedUpdateManyWithoutStudentInput>
  }

  export type CompletedCourseScalarWhereInput = {
    AND?: CompletedCourseScalarWhereInput | CompletedCourseScalarWhereInput[]
    OR?: CompletedCourseScalarWhereInput[]
    NOT?: CompletedCourseScalarWhereInput | CompletedCourseScalarWhereInput[]
    course_id?: IntFilter<"CompletedCourse"> | number
    student_id?: StringFilter<"CompletedCourse"> | string
    grade?: StringFilter<"CompletedCourse"> | string
  }

  export type PendingCourseUpsertWithWhereUniqueWithoutStudentInput = {
    where: PendingCourseWhereUniqueInput
    update: XOR<PendingCourseUpdateWithoutStudentInput, PendingCourseUncheckedUpdateWithoutStudentInput>
    create: XOR<PendingCourseCreateWithoutStudentInput, PendingCourseUncheckedCreateWithoutStudentInput>
  }

  export type PendingCourseUpdateWithWhereUniqueWithoutStudentInput = {
    where: PendingCourseWhereUniqueInput
    data: XOR<PendingCourseUpdateWithoutStudentInput, PendingCourseUncheckedUpdateWithoutStudentInput>
  }

  export type PendingCourseUpdateManyWithWhereWithoutStudentInput = {
    where: PendingCourseScalarWhereInput
    data: XOR<PendingCourseUpdateManyMutationInput, PendingCourseUncheckedUpdateManyWithoutStudentInput>
  }

  export type PendingCourseScalarWhereInput = {
    AND?: PendingCourseScalarWhereInput | PendingCourseScalarWhereInput[]
    OR?: PendingCourseScalarWhereInput[]
    NOT?: PendingCourseScalarWhereInput | PendingCourseScalarWhereInput[]
    course_id?: IntFilter<"PendingCourse"> | number
    student_id?: StringFilter<"PendingCourse"> | string
    instructor_id?: StringFilter<"PendingCourse"> | string
    approved?: BoolFilter<"PendingCourse"> | boolean
  }

  export type RegisteredStudentUpsertWithWhereUniqueWithoutStudentInput = {
    where: RegisteredStudentWhereUniqueInput
    update: XOR<RegisteredStudentUpdateWithoutStudentInput, RegisteredStudentUncheckedUpdateWithoutStudentInput>
    create: XOR<RegisteredStudentCreateWithoutStudentInput, RegisteredStudentUncheckedCreateWithoutStudentInput>
  }

  export type RegisteredStudentUpdateWithWhereUniqueWithoutStudentInput = {
    where: RegisteredStudentWhereUniqueInput
    data: XOR<RegisteredStudentUpdateWithoutStudentInput, RegisteredStudentUncheckedUpdateWithoutStudentInput>
  }

  export type RegisteredStudentUpdateManyWithWhereWithoutStudentInput = {
    where: RegisteredStudentScalarWhereInput
    data: XOR<RegisteredStudentUpdateManyMutationInput, RegisteredStudentUncheckedUpdateManyWithoutStudentInput>
  }

  export type RegisteredStudentScalarWhereInput = {
    AND?: RegisteredStudentScalarWhereInput | RegisteredStudentScalarWhereInput[]
    OR?: RegisteredStudentScalarWhereInput[]
    NOT?: RegisteredStudentScalarWhereInput | RegisteredStudentScalarWhereInput[]
    instructor_course_course_id?: IntFilter<"RegisteredStudent"> | number
    instructor_course_instructor_id?: StringFilter<"RegisteredStudent"> | string
    student_id?: StringFilter<"RegisteredStudent"> | string
  }

  export type InstructorCourseCreateWithoutInstructorInput = {
    capacity: number
    status: string
    course: CourseCreateNestedOneWithoutInstructorCoursesInput
    registeredStudents?: RegisteredStudentCreateNestedManyWithoutInstructorCourseInput
  }

  export type InstructorCourseUncheckedCreateWithoutInstructorInput = {
    capacity: number
    status: string
    course_id: number
    registeredStudents?: RegisteredStudentUncheckedCreateNestedManyWithoutInstructorCourseInput
  }

  export type InstructorCourseCreateOrConnectWithoutInstructorInput = {
    where: InstructorCourseWhereUniqueInput
    create: XOR<InstructorCourseCreateWithoutInstructorInput, InstructorCourseUncheckedCreateWithoutInstructorInput>
  }

  export type InstructorCourseCreateManyInstructorInputEnvelope = {
    data: InstructorCourseCreateManyInstructorInput | InstructorCourseCreateManyInstructorInput[]
  }

  export type PendingCourseCreateWithoutInstructorInput = {
    approved: boolean
    course: CourseCreateNestedOneWithoutPendingCoursesInput
    student: StudentCreateNestedOneWithoutPendingCoursesInput
  }

  export type PendingCourseUncheckedCreateWithoutInstructorInput = {
    course_id: number
    student_id: string
    approved: boolean
  }

  export type PendingCourseCreateOrConnectWithoutInstructorInput = {
    where: PendingCourseWhereUniqueInput
    create: XOR<PendingCourseCreateWithoutInstructorInput, PendingCourseUncheckedCreateWithoutInstructorInput>
  }

  export type PendingCourseCreateManyInstructorInputEnvelope = {
    data: PendingCourseCreateManyInstructorInput | PendingCourseCreateManyInstructorInput[]
  }

  export type InstructorCourseUpsertWithWhereUniqueWithoutInstructorInput = {
    where: InstructorCourseWhereUniqueInput
    update: XOR<InstructorCourseUpdateWithoutInstructorInput, InstructorCourseUncheckedUpdateWithoutInstructorInput>
    create: XOR<InstructorCourseCreateWithoutInstructorInput, InstructorCourseUncheckedCreateWithoutInstructorInput>
  }

  export type InstructorCourseUpdateWithWhereUniqueWithoutInstructorInput = {
    where: InstructorCourseWhereUniqueInput
    data: XOR<InstructorCourseUpdateWithoutInstructorInput, InstructorCourseUncheckedUpdateWithoutInstructorInput>
  }

  export type InstructorCourseUpdateManyWithWhereWithoutInstructorInput = {
    where: InstructorCourseScalarWhereInput
    data: XOR<InstructorCourseUpdateManyMutationInput, InstructorCourseUncheckedUpdateManyWithoutInstructorInput>
  }

  export type InstructorCourseScalarWhereInput = {
    AND?: InstructorCourseScalarWhereInput | InstructorCourseScalarWhereInput[]
    OR?: InstructorCourseScalarWhereInput[]
    NOT?: InstructorCourseScalarWhereInput | InstructorCourseScalarWhereInput[]
    capacity?: IntFilter<"InstructorCourse"> | number
    status?: StringFilter<"InstructorCourse"> | string
    course_id?: IntFilter<"InstructorCourse"> | number
    instructor_id?: StringFilter<"InstructorCourse"> | string
  }

  export type PendingCourseUpsertWithWhereUniqueWithoutInstructorInput = {
    where: PendingCourseWhereUniqueInput
    update: XOR<PendingCourseUpdateWithoutInstructorInput, PendingCourseUncheckedUpdateWithoutInstructorInput>
    create: XOR<PendingCourseCreateWithoutInstructorInput, PendingCourseUncheckedCreateWithoutInstructorInput>
  }

  export type PendingCourseUpdateWithWhereUniqueWithoutInstructorInput = {
    where: PendingCourseWhereUniqueInput
    data: XOR<PendingCourseUpdateWithoutInstructorInput, PendingCourseUncheckedUpdateWithoutInstructorInput>
  }

  export type PendingCourseUpdateManyWithWhereWithoutInstructorInput = {
    where: PendingCourseScalarWhereInput
    data: XOR<PendingCourseUpdateManyMutationInput, PendingCourseUncheckedUpdateManyWithoutInstructorInput>
  }

  export type PrerequisiteCreateWithoutPrerequisiteCourseInput = {
    course: CourseCreateNestedOneWithoutRequiredByInput
  }

  export type PrerequisiteUncheckedCreateWithoutPrerequisiteCourseInput = {
    course_id: number
  }

  export type PrerequisiteCreateOrConnectWithoutPrerequisiteCourseInput = {
    where: PrerequisiteWhereUniqueInput
    create: XOR<PrerequisiteCreateWithoutPrerequisiteCourseInput, PrerequisiteUncheckedCreateWithoutPrerequisiteCourseInput>
  }

  export type PrerequisiteCreateManyPrerequisiteCourseInputEnvelope = {
    data: PrerequisiteCreateManyPrerequisiteCourseInput | PrerequisiteCreateManyPrerequisiteCourseInput[]
  }

  export type PrerequisiteCreateWithoutCourseInput = {
    prerequisiteCourse: CourseCreateNestedOneWithoutPrerequisitesInput
  }

  export type PrerequisiteUncheckedCreateWithoutCourseInput = {
    prerequisite_id: number
  }

  export type PrerequisiteCreateOrConnectWithoutCourseInput = {
    where: PrerequisiteWhereUniqueInput
    create: XOR<PrerequisiteCreateWithoutCourseInput, PrerequisiteUncheckedCreateWithoutCourseInput>
  }

  export type PrerequisiteCreateManyCourseInputEnvelope = {
    data: PrerequisiteCreateManyCourseInput | PrerequisiteCreateManyCourseInput[]
  }

  export type InstructorCourseCreateWithoutCourseInput = {
    capacity: number
    status: string
    instructor: InstructorCreateNestedOneWithoutCoursesInput
    registeredStudents?: RegisteredStudentCreateNestedManyWithoutInstructorCourseInput
  }

  export type InstructorCourseUncheckedCreateWithoutCourseInput = {
    capacity: number
    status: string
    instructor_id: string
    registeredStudents?: RegisteredStudentUncheckedCreateNestedManyWithoutInstructorCourseInput
  }

  export type InstructorCourseCreateOrConnectWithoutCourseInput = {
    where: InstructorCourseWhereUniqueInput
    create: XOR<InstructorCourseCreateWithoutCourseInput, InstructorCourseUncheckedCreateWithoutCourseInput>
  }

  export type InstructorCourseCreateManyCourseInputEnvelope = {
    data: InstructorCourseCreateManyCourseInput | InstructorCourseCreateManyCourseInput[]
  }

  export type CompletedCourseCreateWithoutCourseInput = {
    grade: string
    student: StudentCreateNestedOneWithoutCompletedCoursesInput
  }

  export type CompletedCourseUncheckedCreateWithoutCourseInput = {
    student_id: string
    grade: string
  }

  export type CompletedCourseCreateOrConnectWithoutCourseInput = {
    where: CompletedCourseWhereUniqueInput
    create: XOR<CompletedCourseCreateWithoutCourseInput, CompletedCourseUncheckedCreateWithoutCourseInput>
  }

  export type CompletedCourseCreateManyCourseInputEnvelope = {
    data: CompletedCourseCreateManyCourseInput | CompletedCourseCreateManyCourseInput[]
  }

  export type PendingCourseCreateWithoutCourseInput = {
    approved: boolean
    student: StudentCreateNestedOneWithoutPendingCoursesInput
    instructor: InstructorCreateNestedOneWithoutPendingApprovalsInput
  }

  export type PendingCourseUncheckedCreateWithoutCourseInput = {
    student_id: string
    instructor_id: string
    approved: boolean
  }

  export type PendingCourseCreateOrConnectWithoutCourseInput = {
    where: PendingCourseWhereUniqueInput
    create: XOR<PendingCourseCreateWithoutCourseInput, PendingCourseUncheckedCreateWithoutCourseInput>
  }

  export type PendingCourseCreateManyCourseInputEnvelope = {
    data: PendingCourseCreateManyCourseInput | PendingCourseCreateManyCourseInput[]
  }

  export type PrerequisiteUpsertWithWhereUniqueWithoutPrerequisiteCourseInput = {
    where: PrerequisiteWhereUniqueInput
    update: XOR<PrerequisiteUpdateWithoutPrerequisiteCourseInput, PrerequisiteUncheckedUpdateWithoutPrerequisiteCourseInput>
    create: XOR<PrerequisiteCreateWithoutPrerequisiteCourseInput, PrerequisiteUncheckedCreateWithoutPrerequisiteCourseInput>
  }

  export type PrerequisiteUpdateWithWhereUniqueWithoutPrerequisiteCourseInput = {
    where: PrerequisiteWhereUniqueInput
    data: XOR<PrerequisiteUpdateWithoutPrerequisiteCourseInput, PrerequisiteUncheckedUpdateWithoutPrerequisiteCourseInput>
  }

  export type PrerequisiteUpdateManyWithWhereWithoutPrerequisiteCourseInput = {
    where: PrerequisiteScalarWhereInput
    data: XOR<PrerequisiteUpdateManyMutationInput, PrerequisiteUncheckedUpdateManyWithoutPrerequisiteCourseInput>
  }

  export type PrerequisiteScalarWhereInput = {
    AND?: PrerequisiteScalarWhereInput | PrerequisiteScalarWhereInput[]
    OR?: PrerequisiteScalarWhereInput[]
    NOT?: PrerequisiteScalarWhereInput | PrerequisiteScalarWhereInput[]
    course_id?: IntFilter<"Prerequisite"> | number
    prerequisite_id?: IntFilter<"Prerequisite"> | number
  }

  export type PrerequisiteUpsertWithWhereUniqueWithoutCourseInput = {
    where: PrerequisiteWhereUniqueInput
    update: XOR<PrerequisiteUpdateWithoutCourseInput, PrerequisiteUncheckedUpdateWithoutCourseInput>
    create: XOR<PrerequisiteCreateWithoutCourseInput, PrerequisiteUncheckedCreateWithoutCourseInput>
  }

  export type PrerequisiteUpdateWithWhereUniqueWithoutCourseInput = {
    where: PrerequisiteWhereUniqueInput
    data: XOR<PrerequisiteUpdateWithoutCourseInput, PrerequisiteUncheckedUpdateWithoutCourseInput>
  }

  export type PrerequisiteUpdateManyWithWhereWithoutCourseInput = {
    where: PrerequisiteScalarWhereInput
    data: XOR<PrerequisiteUpdateManyMutationInput, PrerequisiteUncheckedUpdateManyWithoutCourseInput>
  }

  export type InstructorCourseUpsertWithWhereUniqueWithoutCourseInput = {
    where: InstructorCourseWhereUniqueInput
    update: XOR<InstructorCourseUpdateWithoutCourseInput, InstructorCourseUncheckedUpdateWithoutCourseInput>
    create: XOR<InstructorCourseCreateWithoutCourseInput, InstructorCourseUncheckedCreateWithoutCourseInput>
  }

  export type InstructorCourseUpdateWithWhereUniqueWithoutCourseInput = {
    where: InstructorCourseWhereUniqueInput
    data: XOR<InstructorCourseUpdateWithoutCourseInput, InstructorCourseUncheckedUpdateWithoutCourseInput>
  }

  export type InstructorCourseUpdateManyWithWhereWithoutCourseInput = {
    where: InstructorCourseScalarWhereInput
    data: XOR<InstructorCourseUpdateManyMutationInput, InstructorCourseUncheckedUpdateManyWithoutCourseInput>
  }

  export type CompletedCourseUpsertWithWhereUniqueWithoutCourseInput = {
    where: CompletedCourseWhereUniqueInput
    update: XOR<CompletedCourseUpdateWithoutCourseInput, CompletedCourseUncheckedUpdateWithoutCourseInput>
    create: XOR<CompletedCourseCreateWithoutCourseInput, CompletedCourseUncheckedCreateWithoutCourseInput>
  }

  export type CompletedCourseUpdateWithWhereUniqueWithoutCourseInput = {
    where: CompletedCourseWhereUniqueInput
    data: XOR<CompletedCourseUpdateWithoutCourseInput, CompletedCourseUncheckedUpdateWithoutCourseInput>
  }

  export type CompletedCourseUpdateManyWithWhereWithoutCourseInput = {
    where: CompletedCourseScalarWhereInput
    data: XOR<CompletedCourseUpdateManyMutationInput, CompletedCourseUncheckedUpdateManyWithoutCourseInput>
  }

  export type PendingCourseUpsertWithWhereUniqueWithoutCourseInput = {
    where: PendingCourseWhereUniqueInput
    update: XOR<PendingCourseUpdateWithoutCourseInput, PendingCourseUncheckedUpdateWithoutCourseInput>
    create: XOR<PendingCourseCreateWithoutCourseInput, PendingCourseUncheckedCreateWithoutCourseInput>
  }

  export type PendingCourseUpdateWithWhereUniqueWithoutCourseInput = {
    where: PendingCourseWhereUniqueInput
    data: XOR<PendingCourseUpdateWithoutCourseInput, PendingCourseUncheckedUpdateWithoutCourseInput>
  }

  export type PendingCourseUpdateManyWithWhereWithoutCourseInput = {
    where: PendingCourseScalarWhereInput
    data: XOR<PendingCourseUpdateManyMutationInput, PendingCourseUncheckedUpdateManyWithoutCourseInput>
  }

  export type CourseCreateWithoutInstructorCoursesInput = {
    course_id: number
    course_name: string
    course_description?: string | null
    category: string
    status: string
    prerequisites?: PrerequisiteCreateNestedManyWithoutPrerequisiteCourseInput
    requiredBy?: PrerequisiteCreateNestedManyWithoutCourseInput
    completedCourses?: CompletedCourseCreateNestedManyWithoutCourseInput
    pendingCourses?: PendingCourseCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutInstructorCoursesInput = {
    course_id: number
    course_name: string
    course_description?: string | null
    category: string
    status: string
    prerequisites?: PrerequisiteUncheckedCreateNestedManyWithoutPrerequisiteCourseInput
    requiredBy?: PrerequisiteUncheckedCreateNestedManyWithoutCourseInput
    completedCourses?: CompletedCourseUncheckedCreateNestedManyWithoutCourseInput
    pendingCourses?: PendingCourseUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutInstructorCoursesInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutInstructorCoursesInput, CourseUncheckedCreateWithoutInstructorCoursesInput>
  }

  export type InstructorCreateWithoutCoursesInput = {
    id: string
    username: string
    password: string
    pendingApprovals?: PendingCourseCreateNestedManyWithoutInstructorInput
  }

  export type InstructorUncheckedCreateWithoutCoursesInput = {
    id: string
    username: string
    password: string
    pendingApprovals?: PendingCourseUncheckedCreateNestedManyWithoutInstructorInput
  }

  export type InstructorCreateOrConnectWithoutCoursesInput = {
    where: InstructorWhereUniqueInput
    create: XOR<InstructorCreateWithoutCoursesInput, InstructorUncheckedCreateWithoutCoursesInput>
  }

  export type RegisteredStudentCreateWithoutInstructorCourseInput = {
    student: StudentCreateNestedOneWithoutRegisteredCoursesInput
  }

  export type RegisteredStudentUncheckedCreateWithoutInstructorCourseInput = {
    student_id: string
  }

  export type RegisteredStudentCreateOrConnectWithoutInstructorCourseInput = {
    where: RegisteredStudentWhereUniqueInput
    create: XOR<RegisteredStudentCreateWithoutInstructorCourseInput, RegisteredStudentUncheckedCreateWithoutInstructorCourseInput>
  }

  export type RegisteredStudentCreateManyInstructorCourseInputEnvelope = {
    data: RegisteredStudentCreateManyInstructorCourseInput | RegisteredStudentCreateManyInstructorCourseInput[]
  }

  export type CourseUpsertWithoutInstructorCoursesInput = {
    update: XOR<CourseUpdateWithoutInstructorCoursesInput, CourseUncheckedUpdateWithoutInstructorCoursesInput>
    create: XOR<CourseCreateWithoutInstructorCoursesInput, CourseUncheckedCreateWithoutInstructorCoursesInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutInstructorCoursesInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutInstructorCoursesInput, CourseUncheckedUpdateWithoutInstructorCoursesInput>
  }

  export type CourseUpdateWithoutInstructorCoursesInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    course_description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    prerequisites?: PrerequisiteUpdateManyWithoutPrerequisiteCourseNestedInput
    requiredBy?: PrerequisiteUpdateManyWithoutCourseNestedInput
    completedCourses?: CompletedCourseUpdateManyWithoutCourseNestedInput
    pendingCourses?: PendingCourseUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutInstructorCoursesInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    course_description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    prerequisites?: PrerequisiteUncheckedUpdateManyWithoutPrerequisiteCourseNestedInput
    requiredBy?: PrerequisiteUncheckedUpdateManyWithoutCourseNestedInput
    completedCourses?: CompletedCourseUncheckedUpdateManyWithoutCourseNestedInput
    pendingCourses?: PendingCourseUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type InstructorUpsertWithoutCoursesInput = {
    update: XOR<InstructorUpdateWithoutCoursesInput, InstructorUncheckedUpdateWithoutCoursesInput>
    create: XOR<InstructorCreateWithoutCoursesInput, InstructorUncheckedCreateWithoutCoursesInput>
    where?: InstructorWhereInput
  }

  export type InstructorUpdateToOneWithWhereWithoutCoursesInput = {
    where?: InstructorWhereInput
    data: XOR<InstructorUpdateWithoutCoursesInput, InstructorUncheckedUpdateWithoutCoursesInput>
  }

  export type InstructorUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pendingApprovals?: PendingCourseUpdateManyWithoutInstructorNestedInput
  }

  export type InstructorUncheckedUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pendingApprovals?: PendingCourseUncheckedUpdateManyWithoutInstructorNestedInput
  }

  export type RegisteredStudentUpsertWithWhereUniqueWithoutInstructorCourseInput = {
    where: RegisteredStudentWhereUniqueInput
    update: XOR<RegisteredStudentUpdateWithoutInstructorCourseInput, RegisteredStudentUncheckedUpdateWithoutInstructorCourseInput>
    create: XOR<RegisteredStudentCreateWithoutInstructorCourseInput, RegisteredStudentUncheckedCreateWithoutInstructorCourseInput>
  }

  export type RegisteredStudentUpdateWithWhereUniqueWithoutInstructorCourseInput = {
    where: RegisteredStudentWhereUniqueInput
    data: XOR<RegisteredStudentUpdateWithoutInstructorCourseInput, RegisteredStudentUncheckedUpdateWithoutInstructorCourseInput>
  }

  export type RegisteredStudentUpdateManyWithWhereWithoutInstructorCourseInput = {
    where: RegisteredStudentScalarWhereInput
    data: XOR<RegisteredStudentUpdateManyMutationInput, RegisteredStudentUncheckedUpdateManyWithoutInstructorCourseInput>
  }

  export type InstructorCourseCreateWithoutRegisteredStudentsInput = {
    capacity: number
    status: string
    course: CourseCreateNestedOneWithoutInstructorCoursesInput
    instructor: InstructorCreateNestedOneWithoutCoursesInput
  }

  export type InstructorCourseUncheckedCreateWithoutRegisteredStudentsInput = {
    capacity: number
    status: string
    course_id: number
    instructor_id: string
  }

  export type InstructorCourseCreateOrConnectWithoutRegisteredStudentsInput = {
    where: InstructorCourseWhereUniqueInput
    create: XOR<InstructorCourseCreateWithoutRegisteredStudentsInput, InstructorCourseUncheckedCreateWithoutRegisteredStudentsInput>
  }

  export type StudentCreateWithoutRegisteredCoursesInput = {
    id: string
    username: string
    password: string
    completedCourses?: CompletedCourseCreateNestedManyWithoutStudentInput
    pendingCourses?: PendingCourseCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutRegisteredCoursesInput = {
    id: string
    username: string
    password: string
    completedCourses?: CompletedCourseUncheckedCreateNestedManyWithoutStudentInput
    pendingCourses?: PendingCourseUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutRegisteredCoursesInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutRegisteredCoursesInput, StudentUncheckedCreateWithoutRegisteredCoursesInput>
  }

  export type InstructorCourseUpsertWithoutRegisteredStudentsInput = {
    update: XOR<InstructorCourseUpdateWithoutRegisteredStudentsInput, InstructorCourseUncheckedUpdateWithoutRegisteredStudentsInput>
    create: XOR<InstructorCourseCreateWithoutRegisteredStudentsInput, InstructorCourseUncheckedCreateWithoutRegisteredStudentsInput>
    where?: InstructorCourseWhereInput
  }

  export type InstructorCourseUpdateToOneWithWhereWithoutRegisteredStudentsInput = {
    where?: InstructorCourseWhereInput
    data: XOR<InstructorCourseUpdateWithoutRegisteredStudentsInput, InstructorCourseUncheckedUpdateWithoutRegisteredStudentsInput>
  }

  export type InstructorCourseUpdateWithoutRegisteredStudentsInput = {
    capacity?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    course?: CourseUpdateOneRequiredWithoutInstructorCoursesNestedInput
    instructor?: InstructorUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type InstructorCourseUncheckedUpdateWithoutRegisteredStudentsInput = {
    capacity?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    course_id?: IntFieldUpdateOperationsInput | number
    instructor_id?: StringFieldUpdateOperationsInput | string
  }

  export type StudentUpsertWithoutRegisteredCoursesInput = {
    update: XOR<StudentUpdateWithoutRegisteredCoursesInput, StudentUncheckedUpdateWithoutRegisteredCoursesInput>
    create: XOR<StudentCreateWithoutRegisteredCoursesInput, StudentUncheckedCreateWithoutRegisteredCoursesInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutRegisteredCoursesInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutRegisteredCoursesInput, StudentUncheckedUpdateWithoutRegisteredCoursesInput>
  }

  export type StudentUpdateWithoutRegisteredCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    completedCourses?: CompletedCourseUpdateManyWithoutStudentNestedInput
    pendingCourses?: PendingCourseUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutRegisteredCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    completedCourses?: CompletedCourseUncheckedUpdateManyWithoutStudentNestedInput
    pendingCourses?: PendingCourseUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type CourseCreateWithoutCompletedCoursesInput = {
    course_id: number
    course_name: string
    course_description?: string | null
    category: string
    status: string
    prerequisites?: PrerequisiteCreateNestedManyWithoutPrerequisiteCourseInput
    requiredBy?: PrerequisiteCreateNestedManyWithoutCourseInput
    instructorCourses?: InstructorCourseCreateNestedManyWithoutCourseInput
    pendingCourses?: PendingCourseCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutCompletedCoursesInput = {
    course_id: number
    course_name: string
    course_description?: string | null
    category: string
    status: string
    prerequisites?: PrerequisiteUncheckedCreateNestedManyWithoutPrerequisiteCourseInput
    requiredBy?: PrerequisiteUncheckedCreateNestedManyWithoutCourseInput
    instructorCourses?: InstructorCourseUncheckedCreateNestedManyWithoutCourseInput
    pendingCourses?: PendingCourseUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutCompletedCoursesInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutCompletedCoursesInput, CourseUncheckedCreateWithoutCompletedCoursesInput>
  }

  export type StudentCreateWithoutCompletedCoursesInput = {
    id: string
    username: string
    password: string
    pendingCourses?: PendingCourseCreateNestedManyWithoutStudentInput
    registeredCourses?: RegisteredStudentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutCompletedCoursesInput = {
    id: string
    username: string
    password: string
    pendingCourses?: PendingCourseUncheckedCreateNestedManyWithoutStudentInput
    registeredCourses?: RegisteredStudentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutCompletedCoursesInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutCompletedCoursesInput, StudentUncheckedCreateWithoutCompletedCoursesInput>
  }

  export type CourseUpsertWithoutCompletedCoursesInput = {
    update: XOR<CourseUpdateWithoutCompletedCoursesInput, CourseUncheckedUpdateWithoutCompletedCoursesInput>
    create: XOR<CourseCreateWithoutCompletedCoursesInput, CourseUncheckedCreateWithoutCompletedCoursesInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutCompletedCoursesInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutCompletedCoursesInput, CourseUncheckedUpdateWithoutCompletedCoursesInput>
  }

  export type CourseUpdateWithoutCompletedCoursesInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    course_description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    prerequisites?: PrerequisiteUpdateManyWithoutPrerequisiteCourseNestedInput
    requiredBy?: PrerequisiteUpdateManyWithoutCourseNestedInput
    instructorCourses?: InstructorCourseUpdateManyWithoutCourseNestedInput
    pendingCourses?: PendingCourseUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutCompletedCoursesInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    course_description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    prerequisites?: PrerequisiteUncheckedUpdateManyWithoutPrerequisiteCourseNestedInput
    requiredBy?: PrerequisiteUncheckedUpdateManyWithoutCourseNestedInput
    instructorCourses?: InstructorCourseUncheckedUpdateManyWithoutCourseNestedInput
    pendingCourses?: PendingCourseUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type StudentUpsertWithoutCompletedCoursesInput = {
    update: XOR<StudentUpdateWithoutCompletedCoursesInput, StudentUncheckedUpdateWithoutCompletedCoursesInput>
    create: XOR<StudentCreateWithoutCompletedCoursesInput, StudentUncheckedCreateWithoutCompletedCoursesInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutCompletedCoursesInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutCompletedCoursesInput, StudentUncheckedUpdateWithoutCompletedCoursesInput>
  }

  export type StudentUpdateWithoutCompletedCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pendingCourses?: PendingCourseUpdateManyWithoutStudentNestedInput
    registeredCourses?: RegisteredStudentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutCompletedCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pendingCourses?: PendingCourseUncheckedUpdateManyWithoutStudentNestedInput
    registeredCourses?: RegisteredStudentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type CourseCreateWithoutPendingCoursesInput = {
    course_id: number
    course_name: string
    course_description?: string | null
    category: string
    status: string
    prerequisites?: PrerequisiteCreateNestedManyWithoutPrerequisiteCourseInput
    requiredBy?: PrerequisiteCreateNestedManyWithoutCourseInput
    instructorCourses?: InstructorCourseCreateNestedManyWithoutCourseInput
    completedCourses?: CompletedCourseCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutPendingCoursesInput = {
    course_id: number
    course_name: string
    course_description?: string | null
    category: string
    status: string
    prerequisites?: PrerequisiteUncheckedCreateNestedManyWithoutPrerequisiteCourseInput
    requiredBy?: PrerequisiteUncheckedCreateNestedManyWithoutCourseInput
    instructorCourses?: InstructorCourseUncheckedCreateNestedManyWithoutCourseInput
    completedCourses?: CompletedCourseUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutPendingCoursesInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutPendingCoursesInput, CourseUncheckedCreateWithoutPendingCoursesInput>
  }

  export type StudentCreateWithoutPendingCoursesInput = {
    id: string
    username: string
    password: string
    completedCourses?: CompletedCourseCreateNestedManyWithoutStudentInput
    registeredCourses?: RegisteredStudentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutPendingCoursesInput = {
    id: string
    username: string
    password: string
    completedCourses?: CompletedCourseUncheckedCreateNestedManyWithoutStudentInput
    registeredCourses?: RegisteredStudentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutPendingCoursesInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutPendingCoursesInput, StudentUncheckedCreateWithoutPendingCoursesInput>
  }

  export type InstructorCreateWithoutPendingApprovalsInput = {
    id: string
    username: string
    password: string
    courses?: InstructorCourseCreateNestedManyWithoutInstructorInput
  }

  export type InstructorUncheckedCreateWithoutPendingApprovalsInput = {
    id: string
    username: string
    password: string
    courses?: InstructorCourseUncheckedCreateNestedManyWithoutInstructorInput
  }

  export type InstructorCreateOrConnectWithoutPendingApprovalsInput = {
    where: InstructorWhereUniqueInput
    create: XOR<InstructorCreateWithoutPendingApprovalsInput, InstructorUncheckedCreateWithoutPendingApprovalsInput>
  }

  export type CourseUpsertWithoutPendingCoursesInput = {
    update: XOR<CourseUpdateWithoutPendingCoursesInput, CourseUncheckedUpdateWithoutPendingCoursesInput>
    create: XOR<CourseCreateWithoutPendingCoursesInput, CourseUncheckedCreateWithoutPendingCoursesInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutPendingCoursesInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutPendingCoursesInput, CourseUncheckedUpdateWithoutPendingCoursesInput>
  }

  export type CourseUpdateWithoutPendingCoursesInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    course_description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    prerequisites?: PrerequisiteUpdateManyWithoutPrerequisiteCourseNestedInput
    requiredBy?: PrerequisiteUpdateManyWithoutCourseNestedInput
    instructorCourses?: InstructorCourseUpdateManyWithoutCourseNestedInput
    completedCourses?: CompletedCourseUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutPendingCoursesInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    course_description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    prerequisites?: PrerequisiteUncheckedUpdateManyWithoutPrerequisiteCourseNestedInput
    requiredBy?: PrerequisiteUncheckedUpdateManyWithoutCourseNestedInput
    instructorCourses?: InstructorCourseUncheckedUpdateManyWithoutCourseNestedInput
    completedCourses?: CompletedCourseUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type StudentUpsertWithoutPendingCoursesInput = {
    update: XOR<StudentUpdateWithoutPendingCoursesInput, StudentUncheckedUpdateWithoutPendingCoursesInput>
    create: XOR<StudentCreateWithoutPendingCoursesInput, StudentUncheckedCreateWithoutPendingCoursesInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutPendingCoursesInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutPendingCoursesInput, StudentUncheckedUpdateWithoutPendingCoursesInput>
  }

  export type StudentUpdateWithoutPendingCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    completedCourses?: CompletedCourseUpdateManyWithoutStudentNestedInput
    registeredCourses?: RegisteredStudentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutPendingCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    completedCourses?: CompletedCourseUncheckedUpdateManyWithoutStudentNestedInput
    registeredCourses?: RegisteredStudentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type InstructorUpsertWithoutPendingApprovalsInput = {
    update: XOR<InstructorUpdateWithoutPendingApprovalsInput, InstructorUncheckedUpdateWithoutPendingApprovalsInput>
    create: XOR<InstructorCreateWithoutPendingApprovalsInput, InstructorUncheckedCreateWithoutPendingApprovalsInput>
    where?: InstructorWhereInput
  }

  export type InstructorUpdateToOneWithWhereWithoutPendingApprovalsInput = {
    where?: InstructorWhereInput
    data: XOR<InstructorUpdateWithoutPendingApprovalsInput, InstructorUncheckedUpdateWithoutPendingApprovalsInput>
  }

  export type InstructorUpdateWithoutPendingApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    courses?: InstructorCourseUpdateManyWithoutInstructorNestedInput
  }

  export type InstructorUncheckedUpdateWithoutPendingApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    courses?: InstructorCourseUncheckedUpdateManyWithoutInstructorNestedInput
  }

  export type CourseCreateWithoutRequiredByInput = {
    course_id: number
    course_name: string
    course_description?: string | null
    category: string
    status: string
    prerequisites?: PrerequisiteCreateNestedManyWithoutPrerequisiteCourseInput
    instructorCourses?: InstructorCourseCreateNestedManyWithoutCourseInput
    completedCourses?: CompletedCourseCreateNestedManyWithoutCourseInput
    pendingCourses?: PendingCourseCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutRequiredByInput = {
    course_id: number
    course_name: string
    course_description?: string | null
    category: string
    status: string
    prerequisites?: PrerequisiteUncheckedCreateNestedManyWithoutPrerequisiteCourseInput
    instructorCourses?: InstructorCourseUncheckedCreateNestedManyWithoutCourseInput
    completedCourses?: CompletedCourseUncheckedCreateNestedManyWithoutCourseInput
    pendingCourses?: PendingCourseUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutRequiredByInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutRequiredByInput, CourseUncheckedCreateWithoutRequiredByInput>
  }

  export type CourseCreateWithoutPrerequisitesInput = {
    course_id: number
    course_name: string
    course_description?: string | null
    category: string
    status: string
    requiredBy?: PrerequisiteCreateNestedManyWithoutCourseInput
    instructorCourses?: InstructorCourseCreateNestedManyWithoutCourseInput
    completedCourses?: CompletedCourseCreateNestedManyWithoutCourseInput
    pendingCourses?: PendingCourseCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutPrerequisitesInput = {
    course_id: number
    course_name: string
    course_description?: string | null
    category: string
    status: string
    requiredBy?: PrerequisiteUncheckedCreateNestedManyWithoutCourseInput
    instructorCourses?: InstructorCourseUncheckedCreateNestedManyWithoutCourseInput
    completedCourses?: CompletedCourseUncheckedCreateNestedManyWithoutCourseInput
    pendingCourses?: PendingCourseUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutPrerequisitesInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutPrerequisitesInput, CourseUncheckedCreateWithoutPrerequisitesInput>
  }

  export type CourseUpsertWithoutRequiredByInput = {
    update: XOR<CourseUpdateWithoutRequiredByInput, CourseUncheckedUpdateWithoutRequiredByInput>
    create: XOR<CourseCreateWithoutRequiredByInput, CourseUncheckedCreateWithoutRequiredByInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutRequiredByInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutRequiredByInput, CourseUncheckedUpdateWithoutRequiredByInput>
  }

  export type CourseUpdateWithoutRequiredByInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    course_description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    prerequisites?: PrerequisiteUpdateManyWithoutPrerequisiteCourseNestedInput
    instructorCourses?: InstructorCourseUpdateManyWithoutCourseNestedInput
    completedCourses?: CompletedCourseUpdateManyWithoutCourseNestedInput
    pendingCourses?: PendingCourseUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutRequiredByInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    course_description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    prerequisites?: PrerequisiteUncheckedUpdateManyWithoutPrerequisiteCourseNestedInput
    instructorCourses?: InstructorCourseUncheckedUpdateManyWithoutCourseNestedInput
    completedCourses?: CompletedCourseUncheckedUpdateManyWithoutCourseNestedInput
    pendingCourses?: PendingCourseUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUpsertWithoutPrerequisitesInput = {
    update: XOR<CourseUpdateWithoutPrerequisitesInput, CourseUncheckedUpdateWithoutPrerequisitesInput>
    create: XOR<CourseCreateWithoutPrerequisitesInput, CourseUncheckedCreateWithoutPrerequisitesInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutPrerequisitesInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutPrerequisitesInput, CourseUncheckedUpdateWithoutPrerequisitesInput>
  }

  export type CourseUpdateWithoutPrerequisitesInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    course_description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    requiredBy?: PrerequisiteUpdateManyWithoutCourseNestedInput
    instructorCourses?: InstructorCourseUpdateManyWithoutCourseNestedInput
    completedCourses?: CompletedCourseUpdateManyWithoutCourseNestedInput
    pendingCourses?: PendingCourseUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutPrerequisitesInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    course_name?: StringFieldUpdateOperationsInput | string
    course_description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    requiredBy?: PrerequisiteUncheckedUpdateManyWithoutCourseNestedInput
    instructorCourses?: InstructorCourseUncheckedUpdateManyWithoutCourseNestedInput
    completedCourses?: CompletedCourseUncheckedUpdateManyWithoutCourseNestedInput
    pendingCourses?: PendingCourseUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CompletedCourseCreateManyStudentInput = {
    course_id: number
    grade: string
  }

  export type PendingCourseCreateManyStudentInput = {
    course_id: number
    instructor_id: string
    approved: boolean
  }

  export type RegisteredStudentCreateManyStudentInput = {
    instructor_course_course_id: number
    instructor_course_instructor_id: string
  }

  export type CompletedCourseUpdateWithoutStudentInput = {
    grade?: StringFieldUpdateOperationsInput | string
    course?: CourseUpdateOneRequiredWithoutCompletedCoursesNestedInput
  }

  export type CompletedCourseUncheckedUpdateWithoutStudentInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    grade?: StringFieldUpdateOperationsInput | string
  }

  export type CompletedCourseUncheckedUpdateManyWithoutStudentInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    grade?: StringFieldUpdateOperationsInput | string
  }

  export type PendingCourseUpdateWithoutStudentInput = {
    approved?: BoolFieldUpdateOperationsInput | boolean
    course?: CourseUpdateOneRequiredWithoutPendingCoursesNestedInput
    instructor?: InstructorUpdateOneRequiredWithoutPendingApprovalsNestedInput
  }

  export type PendingCourseUncheckedUpdateWithoutStudentInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    instructor_id?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PendingCourseUncheckedUpdateManyWithoutStudentInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    instructor_id?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RegisteredStudentUpdateWithoutStudentInput = {
    instructorCourse?: InstructorCourseUpdateOneRequiredWithoutRegisteredStudentsNestedInput
  }

  export type RegisteredStudentUncheckedUpdateWithoutStudentInput = {
    instructor_course_course_id?: IntFieldUpdateOperationsInput | number
    instructor_course_instructor_id?: StringFieldUpdateOperationsInput | string
  }

  export type RegisteredStudentUncheckedUpdateManyWithoutStudentInput = {
    instructor_course_course_id?: IntFieldUpdateOperationsInput | number
    instructor_course_instructor_id?: StringFieldUpdateOperationsInput | string
  }

  export type InstructorCourseCreateManyInstructorInput = {
    capacity: number
    status: string
    course_id: number
  }

  export type PendingCourseCreateManyInstructorInput = {
    course_id: number
    student_id: string
    approved: boolean
  }

  export type InstructorCourseUpdateWithoutInstructorInput = {
    capacity?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    course?: CourseUpdateOneRequiredWithoutInstructorCoursesNestedInput
    registeredStudents?: RegisteredStudentUpdateManyWithoutInstructorCourseNestedInput
  }

  export type InstructorCourseUncheckedUpdateWithoutInstructorInput = {
    capacity?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    course_id?: IntFieldUpdateOperationsInput | number
    registeredStudents?: RegisteredStudentUncheckedUpdateManyWithoutInstructorCourseNestedInput
  }

  export type InstructorCourseUncheckedUpdateManyWithoutInstructorInput = {
    capacity?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    course_id?: IntFieldUpdateOperationsInput | number
  }

  export type PendingCourseUpdateWithoutInstructorInput = {
    approved?: BoolFieldUpdateOperationsInput | boolean
    course?: CourseUpdateOneRequiredWithoutPendingCoursesNestedInput
    student?: StudentUpdateOneRequiredWithoutPendingCoursesNestedInput
  }

  export type PendingCourseUncheckedUpdateWithoutInstructorInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    student_id?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PendingCourseUncheckedUpdateManyWithoutInstructorInput = {
    course_id?: IntFieldUpdateOperationsInput | number
    student_id?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PrerequisiteCreateManyPrerequisiteCourseInput = {
    course_id: number
  }

  export type PrerequisiteCreateManyCourseInput = {
    prerequisite_id: number
  }

  export type InstructorCourseCreateManyCourseInput = {
    capacity: number
    status: string
    instructor_id: string
  }

  export type CompletedCourseCreateManyCourseInput = {
    student_id: string
    grade: string
  }

  export type PendingCourseCreateManyCourseInput = {
    student_id: string
    instructor_id: string
    approved: boolean
  }

  export type PrerequisiteUpdateWithoutPrerequisiteCourseInput = {
    course?: CourseUpdateOneRequiredWithoutRequiredByNestedInput
  }

  export type PrerequisiteUncheckedUpdateWithoutPrerequisiteCourseInput = {
    course_id?: IntFieldUpdateOperationsInput | number
  }

  export type PrerequisiteUncheckedUpdateManyWithoutPrerequisiteCourseInput = {
    course_id?: IntFieldUpdateOperationsInput | number
  }

  export type PrerequisiteUpdateWithoutCourseInput = {
    prerequisiteCourse?: CourseUpdateOneRequiredWithoutPrerequisitesNestedInput
  }

  export type PrerequisiteUncheckedUpdateWithoutCourseInput = {
    prerequisite_id?: IntFieldUpdateOperationsInput | number
  }

  export type PrerequisiteUncheckedUpdateManyWithoutCourseInput = {
    prerequisite_id?: IntFieldUpdateOperationsInput | number
  }

  export type InstructorCourseUpdateWithoutCourseInput = {
    capacity?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    instructor?: InstructorUpdateOneRequiredWithoutCoursesNestedInput
    registeredStudents?: RegisteredStudentUpdateManyWithoutInstructorCourseNestedInput
  }

  export type InstructorCourseUncheckedUpdateWithoutCourseInput = {
    capacity?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    instructor_id?: StringFieldUpdateOperationsInput | string
    registeredStudents?: RegisteredStudentUncheckedUpdateManyWithoutInstructorCourseNestedInput
  }

  export type InstructorCourseUncheckedUpdateManyWithoutCourseInput = {
    capacity?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    instructor_id?: StringFieldUpdateOperationsInput | string
  }

  export type CompletedCourseUpdateWithoutCourseInput = {
    grade?: StringFieldUpdateOperationsInput | string
    student?: StudentUpdateOneRequiredWithoutCompletedCoursesNestedInput
  }

  export type CompletedCourseUncheckedUpdateWithoutCourseInput = {
    student_id?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
  }

  export type CompletedCourseUncheckedUpdateManyWithoutCourseInput = {
    student_id?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
  }

  export type PendingCourseUpdateWithoutCourseInput = {
    approved?: BoolFieldUpdateOperationsInput | boolean
    student?: StudentUpdateOneRequiredWithoutPendingCoursesNestedInput
    instructor?: InstructorUpdateOneRequiredWithoutPendingApprovalsNestedInput
  }

  export type PendingCourseUncheckedUpdateWithoutCourseInput = {
    student_id?: StringFieldUpdateOperationsInput | string
    instructor_id?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PendingCourseUncheckedUpdateManyWithoutCourseInput = {
    student_id?: StringFieldUpdateOperationsInput | string
    instructor_id?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RegisteredStudentCreateManyInstructorCourseInput = {
    student_id: string
  }

  export type RegisteredStudentUpdateWithoutInstructorCourseInput = {
    student?: StudentUpdateOneRequiredWithoutRegisteredCoursesNestedInput
  }

  export type RegisteredStudentUncheckedUpdateWithoutInstructorCourseInput = {
    student_id?: StringFieldUpdateOperationsInput | string
  }

  export type RegisteredStudentUncheckedUpdateManyWithoutInstructorCourseInput = {
    student_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}